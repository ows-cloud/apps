#!/usr/bin/env python

#
# Generated Thu May 20 18:37:26 2021 by generateDS.py version 2.38.6.
# Python 3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)]
#
# Command line options:
#   ('-o', 'fradrag.py') # renamed to gavefrivilligorganisasjon_2_0.py
#
# Command line arguments:
#   gavefrivilligorganisasjon_v2_0.xsd
#
# Command line:
#   ./generateDS.py -o "fradrag.py" gavefrivilligorganisasjon_v2_0.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.38.6
#

import sys

try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
import base64
import datetime as datetime_
import decimal as decimal_
import os
import re as re_

from six.moves import zip_longest

try:
    from lxml import etree as etree_
except ModulenotfoundExp_:
    from xml.etree import ElementTree as etree_

Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc


def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element


#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import (
        GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_,
    )
except ModulenotfoundExp_:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_:

    class GdsCollector_(object):
        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_:

    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r"(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$")

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=""):
            return input_data

        def gds_parse_string(self, input_data, node=None, input_name=""):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=""):
            if not input_data:
                return ""
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=""):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_integer(self, input_data, input_name=""):
            return "%d" % input_data

        def gds_parse_integer(self, input_data, node=None, input_name=""):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, "Requires integer value: %s" % exp)
            return ival

        def gds_validate_integer(self, input_data, node=None, input_name=""):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires integer value")
            return value

        def gds_format_integer_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_integer_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, "Requires sequence of integer values")
            return values

        def gds_format_float(self, input_data, input_name=""):
            return ("%.15f" % input_data).rstrip("0")

        def gds_parse_float(self, input_data, node=None, input_name=""):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, "Requires float or double value: %s" % exp)
            return fval_

        def gds_validate_float(self, input_data, node=None, input_name=""):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires float value")
            return value

        def gds_format_float_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_float_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, "Requires sequence of float values")
            return values

        def gds_format_decimal(self, input_data, input_name=""):
            return_value = "%s" % input_data
            if "." in return_value:
                return_value = return_value.rstrip("0")
                if return_value.endswith("."):
                    return_value = return_value.rstrip(".")
            return return_value

        def gds_parse_decimal(self, input_data, node=None, input_name=""):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires decimal value")
            return decimal_value

        def gds_validate_decimal(self, input_data, node=None, input_name=""):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires decimal value")
            return value

        def gds_format_decimal_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return " ".join([self.gds_format_decimal(item) for item in input_data])

        def gds_validate_decimal_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, "Requires sequence of decimal values")
            return values

        def gds_format_double(self, input_data, input_name=""):
            return "%s" % input_data

        def gds_parse_double(self, input_data, node=None, input_name=""):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, "Requires double or float value: %s" % exp)
            return fval_

        def gds_validate_double(self, input_data, node=None, input_name=""):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires double or float value")
            return value

        def gds_format_double_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_double_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, "Requires sequence of double or float values"
                    )
            return values

        def gds_format_boolean(self, input_data, input_name=""):
            return ("%s" % input_data).lower()

        def gds_parse_boolean(self, input_data, node=None, input_name=""):
            if input_data in ("true", "1"):
                bval = True
            elif input_data in ("false", "0"):
                bval = False
            else:
                raise_parse_error(node, "Requires boolean value")
            return bval

        def gds_validate_boolean(self, input_data, node=None, input_name=""):
            if input_data not in (
                True,
                1,
                False,
                0,
            ):
                raise_parse_error(
                    node, "Requires boolean value " "(one of True, 1, False, 0)"
                )
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_boolean_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (
                    True,
                    1,
                    False,
                    0,
                ):
                    raise_parse_error(
                        node,
                        "Requires sequence of boolean values "
                        "(one of True, 1, False, 0)",
                    )
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_datetime(self, input_data, input_name=""):
            if input_data.microsecond == 0:
                _svalue = "%04d-%02d-%02dT%02d:%02d:%02d" % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = "%04d-%02d-%02dT%02d:%02d:%02d.%s" % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ("%f" % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += "Z"
                    else:
                        if total_seconds < 0:
                            _svalue += "-"
                            total_seconds *= -1
                        else:
                            _svalue += "+"
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += "{:02d}:{:02d}".format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == "Z":
                tz = GeneratedsSuper._FixedOffsetTZ(0, "UTC")
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(":")
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == "-":
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split(".")
            if len(time_parts) > 1:
                micro_seconds = int(float("0." + time_parts[1]) * 1000000)
                input_data = "%s.%s" % (
                    time_parts[0],
                    "{}".format(micro_seconds).rjust(6, "0"),
                )
                dt = datetime_.datetime.strptime(input_data, "%Y-%m-%dT%H:%M:%S.%f")
            else:
                dt = datetime_.datetime.strptime(input_data, "%Y-%m-%dT%H:%M:%S")
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_date(self, input_data, input_name=""):
            _svalue = "%04d-%02d-%02d" % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += "Z"
                        else:
                            if total_seconds < 0:
                                _svalue += "-"
                                total_seconds *= -1
                            else:
                                _svalue += "+"
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += "{:02d}:{:02d}".format(hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == "Z":
                tz = GeneratedsSuper._FixedOffsetTZ(0, "UTC")
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(":")
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == "-":
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, "%Y-%m-%d")
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_time(self, input_data, input_name=""):
            if input_data.microsecond == 0:
                _svalue = "%02d:%02d:%02d" % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = "%02d:%02d:%02d.%s" % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ("%f" % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += "Z"
                    else:
                        if total_seconds < 0:
                            _svalue += "-"
                            total_seconds *= -1
                        else:
                            _svalue += "+"
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += "{:02d}:{:02d}".format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == "Z":
                tz = GeneratedsSuper._FixedOffsetTZ(0, "UTC")
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(":")
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == "-":
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split(".")) > 1:
                dt = datetime_.datetime.strptime(input_data, "%H:%M:%S.%f")
            else:
                dt = datetime_.datetime.strptime(input_data, "%H:%M:%S")
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_check_cardinality_(
            self, value, input_name, min_occurs=0, max_occurs=1, required=None
        ):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None:
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()
                        )
                    )
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(), min_occurs, length
                    )
                )
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(), max_occurs, length
                    )
                )

        def gds_validate_builtin_ST_(
            self,
            validator,
            value,
            input_name,
            min_occurs=None,
            max_occurs=None,
            required=None,
        ):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))

        def gds_validate_defined_ST_(
            self,
            validator,
            value,
            input_name,
            min_occurs=None,
            max_occurs=None,
            required=None,
        ):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = "/".join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r"\{.*\}")

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub("", node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if "xsi" in node.nsmap:
                classname = node.get("{%s}type" % node.nsmap["xsi"])
                if classname is not None:
                    names = classname.split(":")
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return {v: k for k, v in mapping.items()}

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = "utf-8"
                return instring.encode(encoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode("utf8")
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            def excl_select_objs_(obj):
                return obj[0] != "parent_object_" and obj[0] != "gds_collector_"

            if type(self) != type(other):
                return False
            return all(
                x == y
                for x, y in zip_longest(
                    filter(excl_select_objs_, self.__dict__.items()),
                    filter(excl_select_objs_, other.__dict__.items()),
                )
            )

        def __ne__(self, other):
            return not self.__eq__(other)

        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass

        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass

        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None

        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass

        def gds_get_node_lineno_(self):
            if (
                hasattr(self, "gds_elementtree_node_")
                and self.gds_elementtree_node_ is not None
            ):
                return " near line {}".format(self.gds_elementtree_node_.sourceline)
            else:
                return ""

    def getSubclassFromModule_(module, class_):
        """Get the subclass of a class from a specific module."""
        name = class_.__name__ + "Sub"
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ""
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r"({.*})?(.*)")
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r"{(.*)}(.*)")
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None


#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write("    ")


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ""
    s1 = isinstance(inStr, BaseStrType_) and inStr or "%s" % inStr
    s2 = ""
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos : mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start() : mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace("&", "&amp;")
    s1 = s1.replace("<", "&lt;")
    s1 = s1.replace(">", "&gt;")
    return s1


def quote_attrib(inStr):
    s1 = isinstance(inStr, BaseStrType_) and inStr or "%s" % inStr
    s1 = s1.replace("&", "&amp;")
    s1 = s1.replace("<", "&lt;")
    s1 = s1.replace(">", "&gt;")
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find("\n") == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find("\n") == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ""
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(":")
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == "xml":
            namespace = "http://www.w3.org/XML/1998/namespace"
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get(
                "{%s}%s"
                % (
                    namespace,
                    name,
                )
            )
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = "%s (element %s/line %d)" % (
            msg,
            node.tag,
            node.sourceline,
        )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name, pretty_print=pretty_print
            )

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write("<%s>%s</%s>" % (self.name, self.value, self.name))
        elif (
            self.content_type == MixedContainer.TypeInteger
            or self.content_type == MixedContainer.TypeBoolean
        ):
            outfile.write("<%s>%d</%s>" % (self.name, self.value, self.name))
        elif (
            self.content_type == MixedContainer.TypeFloat
            or self.content_type == MixedContainer.TypeDecimal
        ):
            outfile.write("<%s>%f</%s>" % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write("<%s>%g</%s>" % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write(
                "<%s>%s</%s>" % (self.name, base64.b64encode(self.value), self.name)
            )

    def to_etree(self, element, mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, "%s" % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self, mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (
            self.content_type == MixedContainer.TypeInteger
            or self.content_type == MixedContainer.TypeBoolean
        ):
            text = "%d" % self.value
        elif (
            self.content_type == MixedContainer.TypeFloat
            or self.content_type == MixedContainer.TypeDecimal
        ):
            text = "%f" % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = "%g" % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = "%s" % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value)
            )
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value)
            )
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n'
                % (
                    self.category,
                    self.content_type,
                    self.name,
                )
            )
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(")\n")


class MemberSpec_(object):
    def __init__(
        self,
        name="",
        data_type="",
        container=0,
        optional=0,
        child_attrs=None,
        choice=None,
    ):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional

    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def set_data_type(self, data_type):
        self.data_type = data_type

    def get_data_type_chain(self):
        return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return "xs:string"
        else:
            return self.data_type

    def set_container(self, container):
        self.container = container

    def get_container(self):
        return self.container

    def set_child_attrs(self, child_attrs):
        self.child_attrs = child_attrs

    def get_child_attrs(self):
        return self.child_attrs

    def set_choice(self, choice):
        self.choice = choice

    def get_choice(self):
        return self.choice

    def set_optional(self, optional):
        self.optional = optional

    def get_optional(self):
        return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Data representation classes.
#


class Leveransetype(str, Enum):
    ORDINAER = "ordinaer"
    INGENOPPGAVER = "ingenoppgaver"


class Melding(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, leveranse=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if leveranse is None:
            self.leveranse = []
        else:
            self.leveranse = leveranse
        self.leveranse_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, Melding)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Melding.subclass:
            return Melding.subclass(*args_, **kwargs_)
        else:
            return Melding(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_leveranse(self):
        return self.leveranse

    def set_leveranse(self, leveranse):
        self.leveranse = leveranse

    def add_leveranse(self, value):
        self.leveranse.append(value)

    def insert_leveranse_at(self, index, value):
        self.leveranse.insert(index, value)

    def replace_leveranse_at(self, index, value):
        self.leveranse[index] = value

    def hasContent_(self):
        if self.leveranse:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_='xmlns="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2 gavefrivilligorganisasjon_v2_0.xsd"',
        name_="melding",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("Melding")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "Melding":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="Melding"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="Melding",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="Melding"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Melding",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for leveranse_ in self.leveranse:
            namespaceprefix_ = (
                self.leveranse_nsprefix_ + ":"
                if (UseCapturedNS_ and self.leveranse_nsprefix_)
                else ""
            )
            leveranse_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="leveranse",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "leveranse":
            obj_ = Leveranse.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.leveranse.append(obj_)
            obj_.original_tagname_ = "leveranse"


# end class Melding


class Leveranse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        kildesystem=None,
        oppgavegiver=None,
        inntektsaar=None,
        oppgavegiversLeveranseReferanse=None,
        leveransetype=None,
        oppgave=None,
        oppgaveoppsummering=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.kildesystem = kildesystem
        self.validate_Kildesystem(self.kildesystem)
        self.kildesystem_nsprefix_ = None
        self.oppgavegiver = oppgavegiver
        self.oppgavegiver_nsprefix_ = None
        self.inntektsaar = inntektsaar
        self.validate_Inntektsaar(self.inntektsaar)
        self.inntektsaar_nsprefix_ = None
        self.oppgavegiversLeveranseReferanse = oppgavegiversLeveranseReferanse
        self.validate_LeveranseReferanse(self.oppgavegiversLeveranseReferanse)
        self.oppgavegiversLeveranseReferanse_nsprefix_ = None
        self.leveransetype = leveransetype
        self.validate_Leveransetype(self.leveransetype)
        self.leveransetype_nsprefix_ = None
        if oppgave is None:
            self.oppgave = []
        else:
            self.oppgave = oppgave
        self.oppgave_nsprefix_ = None
        self.oppgaveoppsummering = oppgaveoppsummering
        self.oppgaveoppsummering_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, Leveranse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Leveranse.subclass:
            return Leveranse.subclass(*args_, **kwargs_)
        else:
            return Leveranse(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_kildesystem(self):
        return self.kildesystem

    def set_kildesystem(self, kildesystem):
        self.kildesystem = kildesystem

    def get_oppgavegiver(self):
        return self.oppgavegiver

    def set_oppgavegiver(self, oppgavegiver):
        self.oppgavegiver = oppgavegiver

    def get_inntektsaar(self):
        return self.inntektsaar

    def set_inntektsaar(self, inntektsaar):
        self.inntektsaar = inntektsaar

    def get_oppgavegiversLeveranseReferanse(self):
        return self.oppgavegiversLeveranseReferanse

    def set_oppgavegiversLeveranseReferanse(self, oppgavegiversLeveranseReferanse):
        self.oppgavegiversLeveranseReferanse = oppgavegiversLeveranseReferanse

    def get_leveransetype(self):
        return self.leveransetype

    def set_leveransetype(self, leveransetype):
        self.leveransetype = leveransetype

    def get_oppgave(self):
        return self.oppgave

    def set_oppgave(self, oppgave):
        self.oppgave = oppgave

    def add_oppgave(self, value):
        self.oppgave.append(value)

    def insert_oppgave_at(self, index, value):
        self.oppgave.insert(index, value)

    def replace_oppgave_at(self, index, value):
        self.oppgave[index] = value

    def get_oppgaveoppsummering(self):
        return self.oppgaveoppsummering

    def set_oppgaveoppsummering(self, oppgaveoppsummering):
        self.oppgaveoppsummering = oppgaveoppsummering

    def validate_Kildesystem(self, value):
        result = True
        # Validate type Kildesystem, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Kildesystem'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_Inntektsaar(self, value):
        result = True
        # Validate type Inntektsaar, a restriction on xsd:integer.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Inntektsaar'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_LeveranseReferanse(self, value):
        result = True
        # Validate type LeveranseReferanse, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on LeveranseReferanse'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_Leveransetype(self, value):
        result = True
        # Validate type Leveransetype, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["ordinaer", "ingenoppgaver"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Leveransetype'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.kildesystem is not None
            or self.oppgavegiver is not None
            or self.inntektsaar is not None
            or self.oppgavegiversLeveranseReferanse is not None
            or self.leveransetype is not None
            or self.oppgave
            or self.oppgaveoppsummering is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Leveranse",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("Leveranse")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "Leveranse":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="Leveranse"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="Leveranse",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="Leveranse"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Leveranse",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.kildesystem is not None:
            namespaceprefix_ = (
                self.kildesystem_nsprefix_ + ":"
                if (UseCapturedNS_ and self.kildesystem_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%skildesystem>%s</%skildesystem>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.kildesystem), input_name="kildesystem"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.oppgavegiver is not None:
            namespaceprefix_ = (
                self.oppgavegiver_nsprefix_ + ":"
                if (UseCapturedNS_ and self.oppgavegiver_nsprefix_)
                else ""
            )
            self.oppgavegiver.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="oppgavegiver",
                pretty_print=pretty_print,
            )
        if self.inntektsaar is not None:
            namespaceprefix_ = (
                self.inntektsaar_nsprefix_ + ":"
                if (UseCapturedNS_ and self.inntektsaar_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sinntektsaar>%s</%sinntektsaar>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.inntektsaar, input_name="inntektsaar"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.oppgavegiversLeveranseReferanse is not None:
            namespaceprefix_ = (
                self.oppgavegiversLeveranseReferanse_nsprefix_ + ":"
                if (UseCapturedNS_ and self.oppgavegiversLeveranseReferanse_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%soppgavegiversLeveranseReferanse>%s</%soppgavegiversLeveranseReferanse>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.oppgavegiversLeveranseReferanse),
                            input_name="oppgavegiversLeveranseReferanse",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.leveransetype is not None:
            namespaceprefix_ = (
                self.leveransetype_nsprefix_ + ":"
                if (UseCapturedNS_ and self.leveransetype_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sleveransetype>%s</%sleveransetype>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.leveransetype), input_name="leveransetype"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for oppgave_ in self.oppgave:
            namespaceprefix_ = (
                self.oppgave_nsprefix_ + ":"
                if (UseCapturedNS_ and self.oppgave_nsprefix_)
                else ""
            )
            oppgave_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="oppgave",
                pretty_print=pretty_print,
            )
        if self.oppgaveoppsummering is not None:
            namespaceprefix_ = (
                self.oppgaveoppsummering_nsprefix_ + ":"
                if (UseCapturedNS_ and self.oppgaveoppsummering_nsprefix_)
                else ""
            )
            self.oppgaveoppsummering.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="oppgaveoppsummering",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "kildesystem":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "kildesystem")
            value_ = self.gds_validate_string(value_, node, "kildesystem")
            self.kildesystem = value_
            self.kildesystem_nsprefix_ = child_.prefix
            # validate type Kildesystem
            self.validate_Kildesystem(self.kildesystem)
        elif nodeName_ == "oppgavegiver":
            obj_ = Oppgavegiver.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.oppgavegiver = obj_
            obj_.original_tagname_ = "oppgavegiver"
        elif nodeName_ == "inntektsaar" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "inntektsaar")
            ival_ = self.gds_validate_integer(ival_, node, "inntektsaar")
            self.inntektsaar = ival_
            self.inntektsaar_nsprefix_ = child_.prefix
            # validate type Inntektsaar
            self.validate_Inntektsaar(self.inntektsaar)
        elif nodeName_ == "oppgavegiversLeveranseReferanse":
            value_ = child_.text
            value_ = self.gds_parse_string(
                value_, node, "oppgavegiversLeveranseReferanse"
            )
            value_ = self.gds_validate_string(
                value_, node, "oppgavegiversLeveranseReferanse"
            )
            self.oppgavegiversLeveranseReferanse = value_
            self.oppgavegiversLeveranseReferanse_nsprefix_ = child_.prefix
            # validate type LeveranseReferanse
            self.validate_LeveranseReferanse(self.oppgavegiversLeveranseReferanse)
        elif nodeName_ == "leveransetype":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "leveransetype")
            value_ = self.gds_validate_string(value_, node, "leveransetype")
            self.leveransetype = value_
            self.leveransetype_nsprefix_ = child_.prefix
            # validate type Leveransetype
            self.validate_Leveransetype(self.leveransetype)
        elif nodeName_ == "oppgave":
            obj_ = OppgaveGave.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.oppgave.append(obj_)
            obj_.original_tagname_ = "oppgave"
        elif nodeName_ == "oppgaveoppsummering":
            obj_ = Oppgaveoppsummering.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.oppgaveoppsummering = obj_
            obj_.original_tagname_ = "oppgaveoppsummering"


# end class Leveranse


class Oppgavegiver(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        organisasjonsnummer=None,
        organisasjonsnavn=None,
        kontaktinformasjon=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.organisasjonsnummer = organisasjonsnummer
        self.validate_Organisasjonsnummer(self.organisasjonsnummer)
        self.organisasjonsnummer_nsprefix_ = None
        self.organisasjonsnavn = organisasjonsnavn
        self.validate_Organisasjonsnavn(self.organisasjonsnavn)
        self.organisasjonsnavn_nsprefix_ = None
        self.kontaktinformasjon = kontaktinformasjon
        self.kontaktinformasjon_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, Oppgavegiver)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Oppgavegiver.subclass:
            return Oppgavegiver.subclass(*args_, **kwargs_)
        else:
            return Oppgavegiver(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_organisasjonsnummer(self):
        return self.organisasjonsnummer

    def set_organisasjonsnummer(self, organisasjonsnummer):
        self.organisasjonsnummer = organisasjonsnummer

    def get_organisasjonsnavn(self):
        return self.organisasjonsnavn

    def set_organisasjonsnavn(self, organisasjonsnavn):
        self.organisasjonsnavn = organisasjonsnavn

    def get_kontaktinformasjon(self):
        return self.kontaktinformasjon

    def set_kontaktinformasjon(self, kontaktinformasjon):
        self.kontaktinformasjon = kontaktinformasjon

    def validate_Organisasjonsnummer(self, value):
        result = True
        # Validate type Organisasjonsnummer, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on Organisasjonsnummer'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if not self.gds_validate_simple_patterns(
                self.validate_Organisasjonsnummer_patterns_, value
            ):
                self.gds_collector_.add_message(
                    'Value "%s" does not match xsd pattern restrictions: %s'
                    % (
                        encode_str_2_3(value),
                        self.validate_Organisasjonsnummer_patterns_,
                    )
                )
                result = False
        return result

    validate_Organisasjonsnummer_patterns_ = [["^([0-9]+)$"]]

    def validate_Organisasjonsnavn(self, value):
        result = True
        # Validate type Organisasjonsnavn, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Organisasjonsnavn'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.organisasjonsnummer is not None
            or self.organisasjonsnavn is not None
            or self.kontaktinformasjon is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Oppgavegiver",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("Oppgavegiver")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "Oppgavegiver":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="Oppgavegiver"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="Oppgavegiver",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="Oppgavegiver",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Oppgavegiver",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.organisasjonsnummer is not None:
            namespaceprefix_ = (
                self.organisasjonsnummer_nsprefix_ + ":"
                if (UseCapturedNS_ and self.organisasjonsnummer_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sorganisasjonsnummer>%s</%sorganisasjonsnummer>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.organisasjonsnummer),
                            input_name="organisasjonsnummer",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.organisasjonsnavn is not None:
            namespaceprefix_ = (
                self.organisasjonsnavn_nsprefix_ + ":"
                if (UseCapturedNS_ and self.organisasjonsnavn_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sorganisasjonsnavn>%s</%sorganisasjonsnavn>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.organisasjonsnavn),
                            input_name="organisasjonsnavn",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.kontaktinformasjon is not None:
            namespaceprefix_ = (
                self.kontaktinformasjon_nsprefix_ + ":"
                if (UseCapturedNS_ and self.kontaktinformasjon_nsprefix_)
                else ""
            )
            self.kontaktinformasjon.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="kontaktinformasjon",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "organisasjonsnummer":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "organisasjonsnummer")
            value_ = self.gds_validate_string(value_, node, "organisasjonsnummer")
            self.organisasjonsnummer = value_
            self.organisasjonsnummer_nsprefix_ = child_.prefix
            # validate type Organisasjonsnummer
            self.validate_Organisasjonsnummer(self.organisasjonsnummer)
        elif nodeName_ == "organisasjonsnavn":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "organisasjonsnavn")
            value_ = self.gds_validate_string(value_, node, "organisasjonsnavn")
            self.organisasjonsnavn = value_
            self.organisasjonsnavn_nsprefix_ = child_.prefix
            # validate type Organisasjonsnavn
            self.validate_Organisasjonsnavn(self.organisasjonsnavn)
        elif nodeName_ == "kontaktinformasjon":
            obj_ = Kontaktinformasjon.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.kontaktinformasjon = obj_
            obj_.original_tagname_ = "kontaktinformasjon"


# end class Oppgavegiver


class Kontaktinformasjon(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        navn=None,
        telefonnummer=None,
        varselEpostadresse=None,
        varselSmsMobilnummer=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.navn = navn
        self.validate_Navn(self.navn)
        self.navn_nsprefix_ = None
        self.telefonnummer = telefonnummer
        self.validate_Telefonnummer(self.telefonnummer)
        self.telefonnummer_nsprefix_ = None
        self.varselEpostadresse = varselEpostadresse
        self.validate_Epostadresse(self.varselEpostadresse)
        self.varselEpostadresse_nsprefix_ = None
        self.varselSmsMobilnummer = varselSmsMobilnummer
        self.validate_Telefonnummer(self.varselSmsMobilnummer)
        self.varselSmsMobilnummer_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Kontaktinformasjon
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Kontaktinformasjon.subclass:
            return Kontaktinformasjon.subclass(*args_, **kwargs_)
        else:
            return Kontaktinformasjon(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_navn(self):
        return self.navn

    def set_navn(self, navn):
        self.navn = navn

    def get_telefonnummer(self):
        return self.telefonnummer

    def set_telefonnummer(self, telefonnummer):
        self.telefonnummer = telefonnummer

    def get_varselEpostadresse(self):
        return self.varselEpostadresse

    def set_varselEpostadresse(self, varselEpostadresse):
        self.varselEpostadresse = varselEpostadresse

    def get_varselSmsMobilnummer(self):
        return self.varselSmsMobilnummer

    def set_varselSmsMobilnummer(self, varselSmsMobilnummer):
        self.varselSmsMobilnummer = varselSmsMobilnummer

    def validate_Navn(self, value):
        result = True
        # Validate type Navn, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Navn'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Navn'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_Telefonnummer(self, value):
        result = True
        # Validate type Telefonnummer, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Telefonnummer'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_Epostadresse(self, value):
        result = True
        # Validate type Epostadresse, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 254:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Epostadresse'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.navn is not None
            or self.telefonnummer is not None
            or self.varselEpostadresse is not None
            or self.varselSmsMobilnummer is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Kontaktinformasjon",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("Kontaktinformasjon")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "Kontaktinformasjon":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="Kontaktinformasjon",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="Kontaktinformasjon",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="Kontaktinformasjon",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Kontaktinformasjon",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.navn is not None:
            namespaceprefix_ = (
                self.navn_nsprefix_ + ":"
                if (UseCapturedNS_ and self.navn_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%snavn>%s</%snavn>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.navn), input_name="navn")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.telefonnummer is not None:
            namespaceprefix_ = (
                self.telefonnummer_nsprefix_ + ":"
                if (UseCapturedNS_ and self.telefonnummer_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%stelefonnummer>%s</%stelefonnummer>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.telefonnummer), input_name="telefonnummer"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.varselEpostadresse is not None:
            namespaceprefix_ = (
                self.varselEpostadresse_nsprefix_ + ":"
                if (UseCapturedNS_ and self.varselEpostadresse_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%svarselEpostadresse>%s</%svarselEpostadresse>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.varselEpostadresse),
                            input_name="varselEpostadresse",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.varselSmsMobilnummer is not None:
            namespaceprefix_ = (
                self.varselSmsMobilnummer_nsprefix_ + ":"
                if (UseCapturedNS_ and self.varselSmsMobilnummer_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%svarselSmsMobilnummer>%s</%svarselSmsMobilnummer>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.varselSmsMobilnummer),
                            input_name="varselSmsMobilnummer",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "navn":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "navn")
            value_ = self.gds_validate_string(value_, node, "navn")
            self.navn = value_
            self.navn_nsprefix_ = child_.prefix
            # validate type Navn
            self.validate_Navn(self.navn)
        elif nodeName_ == "telefonnummer":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "telefonnummer")
            value_ = self.gds_validate_string(value_, node, "telefonnummer")
            self.telefonnummer = value_
            self.telefonnummer_nsprefix_ = child_.prefix
            # validate type Telefonnummer
            self.validate_Telefonnummer(self.telefonnummer)
        elif nodeName_ == "varselEpostadresse":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "varselEpostadresse")
            value_ = self.gds_validate_string(value_, node, "varselEpostadresse")
            self.varselEpostadresse = value_
            self.varselEpostadresse_nsprefix_ = child_.prefix
            # validate type Epostadresse
            self.validate_Epostadresse(self.varselEpostadresse)
        elif nodeName_ == "varselSmsMobilnummer":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "varselSmsMobilnummer")
            value_ = self.gds_validate_string(value_, node, "varselSmsMobilnummer")
            self.varselSmsMobilnummer = value_
            self.varselSmsMobilnummer_nsprefix_ = child_.prefix
            # validate type Telefonnummer
            self.validate_Telefonnummer(self.varselSmsMobilnummer)


# end class Kontaktinformasjon


class OppgaveGave(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, oppgaveeier=None, beloep=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.oppgaveeier = oppgaveeier
        self.oppgaveeier_nsprefix_ = None
        self.beloep = beloep
        self.validate_Beloep(self.beloep)
        self.beloep_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, OppgaveGave)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OppgaveGave.subclass:
            return OppgaveGave.subclass(*args_, **kwargs_)
        else:
            return OppgaveGave(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_oppgaveeier(self):
        return self.oppgaveeier

    def set_oppgaveeier(self, oppgaveeier):
        self.oppgaveeier = oppgaveeier

    def get_beloep(self):
        return self.beloep

    def set_beloep(self, beloep):
        self.beloep = beloep

    def validate_Beloep(self, value):
        result = True
        # Validate type Beloep, a restriction on xsd:integer.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
        return result

    def hasContent_(self):
        if self.oppgaveeier is not None or self.beloep is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="OppgaveGave",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("OppgaveGave")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "OppgaveGave":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="OppgaveGave"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="OppgaveGave",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="OppgaveGave",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="OppgaveGave",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.oppgaveeier is not None:
            namespaceprefix_ = (
                self.oppgaveeier_nsprefix_ + ":"
                if (UseCapturedNS_ and self.oppgaveeier_nsprefix_)
                else ""
            )
            self.oppgaveeier.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="oppgaveeier",
                pretty_print=pretty_print,
            )
        if self.beloep is not None:
            namespaceprefix_ = (
                self.beloep_nsprefix_ + ":"
                if (UseCapturedNS_ and self.beloep_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sbeloep>%s</%sbeloep>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.beloep, input_name="beloep"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "oppgaveeier":
            obj_ = Oppgaveeier.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.oppgaveeier = obj_
            obj_.original_tagname_ = "oppgaveeier"
        elif nodeName_ == "beloep" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "beloep")
            ival_ = self.gds_validate_integer(ival_, node, "beloep")
            self.beloep = ival_
            self.beloep_nsprefix_ = child_.prefix
            # validate type Beloep
            self.validate_Beloep(self.beloep)


# end class OppgaveGave


class Oppgaveeier(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        foedselsnummer=None,
        organisasjonsnummer=None,
        navn=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.foedselsnummer = foedselsnummer
        self.validate_Foedselsnummer(self.foedselsnummer)
        self.foedselsnummer_nsprefix_ = None
        self.organisasjonsnummer = organisasjonsnummer
        self.validate_Organisasjonsnummer(self.organisasjonsnummer)
        self.organisasjonsnummer_nsprefix_ = None
        self.navn = navn
        self.validate_Navn(self.navn)
        self.navn_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, Oppgaveeier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Oppgaveeier.subclass:
            return Oppgaveeier.subclass(*args_, **kwargs_)
        else:
            return Oppgaveeier(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_foedselsnummer(self):
        return self.foedselsnummer

    def set_foedselsnummer(self, foedselsnummer):
        self.foedselsnummer = foedselsnummer

    def get_organisasjonsnummer(self):
        return self.organisasjonsnummer

    def set_organisasjonsnummer(self, organisasjonsnummer):
        self.organisasjonsnummer = organisasjonsnummer

    def get_navn(self):
        return self.navn

    def set_navn(self, navn):
        self.navn = navn

    def validate_Foedselsnummer(self, value):
        result = True
        # Validate type Foedselsnummer, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on Foedselsnummer'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if not self.gds_validate_simple_patterns(
                self.validate_Foedselsnummer_patterns_, value
            ):
                self.gds_collector_.add_message(
                    'Value "%s" does not match xsd pattern restrictions: %s'
                    % (
                        encode_str_2_3(value),
                        self.validate_Foedselsnummer_patterns_,
                    )
                )
                result = False
        return result

    validate_Foedselsnummer_patterns_ = [["^([0-9]+)$"]]

    def validate_Organisasjonsnummer(self, value):
        result = True
        # Validate type Organisasjonsnummer, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on Organisasjonsnummer'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if not self.gds_validate_simple_patterns(
                self.validate_Organisasjonsnummer_patterns_, value
            ):
                self.gds_collector_.add_message(
                    'Value "%s" does not match xsd pattern restrictions: %s'
                    % (
                        encode_str_2_3(value),
                        self.validate_Organisasjonsnummer_patterns_,
                    )
                )
                result = False
        return result

    validate_Organisasjonsnummer_patterns_ = [["^([0-9]+)$"]]

    def validate_Navn(self, value):
        result = True
        # Validate type Navn, a restriction on xsd:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Navn'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Navn'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.foedselsnummer is not None
            or self.organisasjonsnummer is not None
            or self.navn is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Oppgaveeier",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("Oppgaveeier")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "Oppgaveeier":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="Oppgaveeier"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="Oppgaveeier",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="Oppgaveeier",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Oppgaveeier",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.foedselsnummer is not None:
            namespaceprefix_ = (
                self.foedselsnummer_nsprefix_ + ":"
                if (UseCapturedNS_ and self.foedselsnummer_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sfoedselsnummer>%s</%sfoedselsnummer>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.foedselsnummer), input_name="foedselsnummer"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.organisasjonsnummer is not None:
            namespaceprefix_ = (
                self.organisasjonsnummer_nsprefix_ + ":"
                if (UseCapturedNS_ and self.organisasjonsnummer_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sorganisasjonsnummer>%s</%sorganisasjonsnummer>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.organisasjonsnummer),
                            input_name="organisasjonsnummer",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.navn is not None:
            namespaceprefix_ = (
                self.navn_nsprefix_ + ":"
                if (UseCapturedNS_ and self.navn_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%snavn>%s</%snavn>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.navn), input_name="navn")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "foedselsnummer":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "foedselsnummer")
            value_ = self.gds_validate_string(value_, node, "foedselsnummer")
            self.foedselsnummer = value_
            self.foedselsnummer_nsprefix_ = child_.prefix
            # validate type Foedselsnummer
            self.validate_Foedselsnummer(self.foedselsnummer)
        elif nodeName_ == "organisasjonsnummer":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "organisasjonsnummer")
            value_ = self.gds_validate_string(value_, node, "organisasjonsnummer")
            self.organisasjonsnummer = value_
            self.organisasjonsnummer_nsprefix_ = child_.prefix
            # validate type Organisasjonsnummer
            self.validate_Organisasjonsnummer(self.organisasjonsnummer)
        elif nodeName_ == "navn":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "navn")
            value_ = self.gds_validate_string(value_, node, "navn")
            self.navn = value_
            self.navn_nsprefix_ = child_.prefix
            # validate type Navn
            self.validate_Navn(self.navn)


# end class Oppgaveeier


class Oppgaveoppsummering(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self, antallOppgaver=None, sumBeloep=None, gds_collector_=None, **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.antallOppgaver = antallOppgaver
        self.validate_Antall(self.antallOppgaver)
        self.antallOppgaver_nsprefix_ = None
        self.sumBeloep = sumBeloep
        self.validate_Beloep(self.sumBeloep)
        self.sumBeloep_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Oppgaveoppsummering
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Oppgaveoppsummering.subclass:
            return Oppgaveoppsummering.subclass(*args_, **kwargs_)
        else:
            return Oppgaveoppsummering(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_antallOppgaver(self):
        return self.antallOppgaver

    def set_antallOppgaver(self, antallOppgaver):
        self.antallOppgaver = antallOppgaver

    def get_sumBeloep(self):
        return self.sumBeloep

    def set_sumBeloep(self, sumBeloep):
        self.sumBeloep = sumBeloep

    def validate_Antall(self, value):
        result = True
        # Validate type Antall, a restriction on xsd:integer.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
        return result

    def validate_Beloep(self, value):
        result = True
        # Validate type Beloep, a restriction on xsd:integer.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
        return result

    def hasContent_(self):
        if self.antallOppgaver is not None or self.sumBeloep is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Oppgaveoppsummering",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("Oppgaveoppsummering")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "Oppgaveoppsummering":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="Oppgaveoppsummering",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="Oppgaveoppsummering",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="Oppgaveoppsummering",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2" ',
        name_="Oppgaveoppsummering",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.antallOppgaver is not None:
            namespaceprefix_ = (
                self.antallOppgaver_nsprefix_ + ":"
                if (UseCapturedNS_ and self.antallOppgaver_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%santallOppgaver>%s</%santallOppgaver>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.antallOppgaver, input_name="antallOppgaver"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.sumBeloep is not None:
            namespaceprefix_ = (
                self.sumBeloep_nsprefix_ + ":"
                if (UseCapturedNS_ and self.sumBeloep_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%ssumBeloep>%s</%ssumBeloep>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.sumBeloep, input_name="sumBeloep"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "antallOppgaver" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "antallOppgaver")
            ival_ = self.gds_validate_integer(ival_, node, "antallOppgaver")
            self.antallOppgaver = ival_
            self.antallOppgaver_nsprefix_ = child_.prefix
            # validate type Antall
            self.validate_Antall(self.antallOppgaver)
        elif nodeName_ == "sumBeloep" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "sumBeloep")
            ival_ = self.gds_validate_integer(ival_, node, "sumBeloep")
            self.sumBeloep = ival_
            self.sumBeloep_nsprefix_ = child_.prefix
            # validate type Beloep
            self.validate_Beloep(self.sumBeloep)


# end class Oppgaveoppsummering


GDSClassesMapping = {}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    """Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    """
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = " ".join(
        ['xmlns:{}="{}"'.format(prefix, uri) for prefix, uri in nsmap.items()]
    )
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "Melding"
        rootClass = Melding
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag, namespacedef_=namespacedefs, pretty_print=True
        )
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(
    inFileName, silence=False, print_warnings=True, mapping=None, nsmap=None
):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "Melding"
        rootClass = Melding
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if mapping is None:
        mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping, nsmap_=nsmap)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True, xml_declaration=True, encoding="utf-8"
        )
        sys.stdout.write(str(content))
        sys.stdout.write("\n")
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    """Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    """
    parser = None
    rootNode = parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "Melding"
        rootClass = Melding
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(sys.stdout, 0, name_=rootTag, namespacedef_="")
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "Melding"
        rootClass = Melding
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write("#from fradrag import *\n\n")
        sys.stdout.write("import fradrag as model_\n\n")
        sys.stdout.write("rootObj = model_.rootClass(\n")
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(")\n")
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == "__main__":
    # import pdb; pdb.set_trace()
    main()

RenameMappings_ = {}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {
    "urn:ske:fastsetting:innsamling:gavefrivilligorganisasjon:v2": [
        ("Antall", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Beloep", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Epostadresse", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Foedselsnummer", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Inntektsaar", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("LeveranseReferanse", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Leveransetype", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Navn", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Organisasjonsnavn", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Organisasjonsnummer", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Telefonnummer", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Kildesystem", "gavefrivilligorganisasjon_v2_0.xsd", "ST"),
        ("Melding", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
        ("Leveranse", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
        ("Oppgavegiver", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
        ("Kontaktinformasjon", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
        ("OppgaveGave", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
        ("Oppgaveeier", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
        ("Oppgaveoppsummering", "gavefrivilligorganisasjon_v2_0.xsd", "CT"),
    ]
}

__all__ = [
    "Kontaktinformasjon",
    "Leveranse",
    "Melding",
    "OppgaveGave",
    "Oppgaveeier",
    "Oppgavegiver",
    "Oppgaveoppsummering",
]
