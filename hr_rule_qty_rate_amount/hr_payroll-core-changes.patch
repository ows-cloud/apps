From 97fdeef09223338c5e3cf5c93149b7ca17219b62 Mon Sep 17 00:00:00 2001
From: Henrik Norlin <henrik.norl@gmail.com>
Date: Thu, 21 Jan 2021 18:22:47 +0100
Subject: [PATCH] [IMP] hr_payroll with one payslip-line per analytic account
 per rule (for hr_rule_qty_rate_amount)

---
 addons/hr_payroll/__manifest__.py          |  1 +
 addons/hr_payroll/models/hr_payslip.py     | 20 ++++++++++++-------
 addons/hr_payroll/models/hr_salary_rule.py | 23 ++++++++++++++++------
 3 files changed, 31 insertions(+), 13 deletions(-)

diff --git a/addons/hr_payroll/__manifest__.py b/addons/hr_payroll/__manifest__.py
index 73bb35e4a6646..1bb51c36d7753 100644
--- a/addons/hr_payroll/__manifest__.py
+++ b/addons/hr_payroll/__manifest__.py
@@ -11,6 +11,7 @@
         'hr_contract',
         'hr_holidays',
         'decimal_precision',
+        'analytic',
     ],
     'data': [
         'security/hr_payroll_security.xml',
diff --git a/addons/hr_payroll/models/hr_payslip.py b/addons/hr_payroll/models/hr_payslip.py
index 5ad41dac0036a..3d51b0d365046 100644
--- a/addons/hr_payroll/models/hr_payslip.py
+++ b/addons/hr_payroll/models/hr_payslip.py
@@ -346,26 +346,32 @@ def sum(self, code, from_date, to_date=None):
             employee = contract.employee_id
             localdict = dict(baselocaldict, employee=employee, contract=contract)
             for rule in sorted_rules:
-                key = rule.code + '-' + str(contract.id)
-                localdict['result'] = None
+                localdict['result'] = None #amount
                 localdict['result_qty'] = 1.0
                 localdict['result_rate'] = 100
+                localdict['result_analytic'] = None
+                localdict['result_list'] = None
                 #check if the rule can be applied
                 if rule._satisfy_condition(localdict) and rule.id not in blacklist:
-                    #compute the amount of the rule
-                    amount, qty, rate = rule._compute_rule(localdict)
+                  #compute the amount etc. of the rule
+                  payslip_lines = rule._compute_rule(localdict)
+                  for payslip_line in payslip_lines:
+                    amount, qty, rate, analytic_account_id = payslip_line
+                    key = rule.code + '-' + str(contract.id) + '-' + str(analytic_account_id)
+                    code_analytic = rule.code + '-' + str(analytic_account_id)
                     #check if there is already a rule computed with that code
-                    previous_amount = rule.code in localdict and localdict[rule.code] or 0.0
+                    previous_amount = code_analytic in localdict and localdict[code_analytic] or 0.0
                     #set/overwrite the amount computed for this rule in the localdict
                     tot_rule = amount * qty * rate / 100.0
-                    localdict[rule.code] = tot_rule
-                    rules_dict[rule.code] = rule
+                    localdict[code_analytic] = tot_rule
+                    rules_dict[code_analytic] = rule
                     #sum the amount for its salary category
                     localdict = _sum_salary_rule_category(localdict, rule.category_id, tot_rule - previous_amount)
                     #create/overwrite the rule in the temporary results
                     result_dict[key] = {
                         'salary_rule_id': rule.id,
                         'contract_id': contract.id,
+                        'analytic_account_id': analytic_account_id,
                         'name': rule.name,
                         'code': rule.code,
                         'category_id': rule.category_id.id,
diff --git a/addons/hr_payroll/models/hr_salary_rule.py b/addons/hr_payroll/models/hr_salary_rule.py
index 44dff7ee4bfa6..f6f9bf9b1f7ac 100644
--- a/addons/hr_payroll/models/hr_salary_rule.py
+++ b/addons/hr_payroll/models/hr_salary_rule.py
@@ -172,6 +172,7 @@ class HrSalaryRule(models.Model):
         help="Eventual third party involved in the salary payment of the employees.")
     input_ids = fields.One2many('hr.rule.input', 'input_id', string='Inputs', copy=True)
     note = fields.Text(string='Description')
+    analytic_account_id = fields.Many2one('account.analytic.account', 'Analytic Account')

     @api.constrains('parent_rule_id')
     def _check_parent_rule_id(self):
@@ -194,25 +195,34 @@ def _compute_rule(self, localdict):
         """
         :param localdict: dictionary containing the environement in which to compute the rule
         :return: returns a tuple build as the base/amount computed, the quantity and the rate
-        :rtype: (float, float, float)
+        :rtype: [(amount float, quantity float, rate float, analytic_account_id integer/False)]
         """
         self.ensure_one()
         if self.amount_select == 'fix':
             try:
-                return self.amount_fix, float(safe_eval(self.quantity, localdict)), 100.0
+                return [(self.amount_fix, float(safe_eval(self.quantity, localdict)), 100.0, False)]
             except:
                 raise UserError(_('Wrong quantity defined for salary rule %s (%s).') % (self.name, self.code))
         elif self.amount_select == 'percentage':
             try:
-                return (float(safe_eval(self.amount_percentage_base, localdict)),
-                        float(safe_eval(self.quantity, localdict)),
-                        self.amount_percentage)
+                return [(float(safe_eval(self.amount_percentage_base, localdict)),
+                         float(safe_eval(self.quantity, localdict)),
+                         self.amount_percentage,
+                         False)]
             except:
                 raise UserError(_('Wrong percentage base or quantity defined for salary rule %s (%s).') % (self.name, self.code))
         else:
             try:
+                localdict['rule'] = self
                 safe_eval(self.amount_python_compute, localdict, mode='exec', nocopy=True)
-                return float(localdict['result']), 'result_qty' in localdict and localdict['result_qty'] or 1.0, 'result_rate' in localdict and localdict['result_rate'] or 100.0
+                if localdict['result_list']:
+                    return localdict['result_list']
+                else:
+                    return [(float(localdict['result']), \
+                        'result_qty' in localdict and localdict['result_qty'] or 1.0, \
+                        'result_rate' in localdict and localdict['result_rate'] or 100.0, \
+                        'result_analytic' in localdict and localdict['result_analytic'] or False
+                    )]
             except:
                 raise UserError(_('Wrong python code defined for salary rule %s (%s).') % (self.name, self.code))

@@ -234,6 +244,7 @@ def _satisfy_condition(self, localdict):
                 raise UserError(_('Wrong range condition defined for salary rule %s (%s).') % (self.name, self.code))
         else:  # python code
             try:
+                localdict['rule'] = self
                 safe_eval(self.condition_python, localdict, mode='exec', nocopy=True)
                 return 'result' in localdict and localdict['result'] or False
             except:
