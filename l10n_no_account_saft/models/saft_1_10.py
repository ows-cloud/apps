#!/usr/bin/env python

#
# Generated Thu Feb 11 20:47:41 2021 by generateDS.py version 2.37.15.
# Python 3.6.9 (default, Oct  8 2020, 12:12:24)  [GCC 8.4.0]
#
# Command line options:
#   ('-o', 'saft_1_10.py')
#
# Command line arguments:
#   norway.xsd
#
# Command line:
#   /home/ag/o/sfit/saft/.venv/bin/generateDS.py -o "saft_1_10.py" norway.xsd
#
# Current working directory (os.getcwd()):
#   sfit
#

import sys

try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
import base64
import datetime as datetime_
import decimal as decimal_
import os
import re as re_

from six.moves import zip_longest

try:
    from lxml import etree as etree_
except ModulenotfoundExp_:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc


def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element


#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import (
        GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_,
    )
except ModulenotfoundExp_:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_:

    class GdsCollector_(object):
        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_:

    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r"(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$")

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=""):
            return input_data

        def gds_parse_string(self, input_data, node=None, input_name=""):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=""):
            if not input_data:
                return ""
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=""):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_integer(self, input_data, input_name=""):
            return "%d" % input_data

        def gds_parse_integer(self, input_data, node=None, input_name=""):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, "Requires integer value: %s" % exp)
            return ival

        def gds_validate_integer(self, input_data, node=None, input_name=""):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires integer value")
            return value

        def gds_format_integer_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_integer_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, "Requires sequence of integer values")
            return values

        def gds_format_float(self, input_data, input_name=""):
            return ("%.15f" % input_data).rstrip("0")

        def gds_parse_float(self, input_data, node=None, input_name=""):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, "Requires float or double value: %s" % exp)
            return fval_

        def gds_validate_float(self, input_data, node=None, input_name=""):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires float value")
            return value

        def gds_format_float_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_float_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, "Requires sequence of float values")
            return values

        def gds_format_decimal(self, input_data, input_name=""):
            return_value = "%s" % input_data
            if "." in return_value:
                return_value = return_value.rstrip("0")
                if return_value.endswith("."):
                    return_value = return_value.rstrip(".")
            return return_value

        def gds_parse_decimal(self, input_data, node=None, input_name=""):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires decimal value")
            return decimal_value

        def gds_validate_decimal(self, input_data, node=None, input_name=""):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires decimal value")
            return value

        def gds_format_decimal_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return " ".join([self.gds_format_decimal(item) for item in input_data])

        def gds_validate_decimal_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, "Requires sequence of decimal values")
            return values

        def gds_format_double(self, input_data, input_name=""):
            return "%s" % input_data

        def gds_parse_double(self, input_data, node=None, input_name=""):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, "Requires double or float value: %s" % exp)
            return fval_

        def gds_validate_double(self, input_data, node=None, input_name=""):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, "Requires double or float value")
            return value

        def gds_format_double_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_double_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, "Requires sequence of double or float values"
                    )
            return values

        def gds_format_boolean(self, input_data, input_name=""):
            return ("%s" % input_data).lower()

        def gds_parse_boolean(self, input_data, node=None, input_name=""):
            if input_data in ("true", "1"):
                bval = True
            elif input_data in ("false", "0"):
                bval = False
            else:
                raise_parse_error(node, "Requires boolean value")
            return bval

        def gds_validate_boolean(self, input_data, node=None, input_name=""):
            if input_data not in (
                True,
                1,
                False,
                0,
            ):
                raise_parse_error(
                    node, "Requires boolean value " "(one of True, 1, False, 0)"
                )
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=""):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return "%s" % " ".join(input_data)

        def gds_validate_boolean_list(self, input_data, node=None, input_name=""):
            values = input_data.split()
            for value in values:
                if value not in (
                    True,
                    1,
                    False,
                    0,
                ):
                    raise_parse_error(
                        node,
                        "Requires sequence of boolean values "
                        "(one of True, 1, False, 0)",
                    )
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_datetime(self, input_data, input_name=""):
            if input_data.microsecond == 0:
                _svalue = "%04d-%02d-%02dT%02d:%02d:%02d" % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = "%04d-%02d-%02dT%02d:%02d:%02d.%s" % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ("%f" % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += "Z"
                    else:
                        if total_seconds < 0:
                            _svalue += "-"
                            total_seconds *= -1
                        else:
                            _svalue += "+"
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += "{:02d}:{:02d}".format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == "Z":
                tz = GeneratedsSuper._FixedOffsetTZ(0, "UTC")
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(":")
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == "-":
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split(".")
            if len(time_parts) > 1:
                micro_seconds = int(float("0." + time_parts[1]) * 1000000)
                input_data = "%s.%s" % (
                    time_parts[0],
                    "{}".format(micro_seconds).rjust(6, "0"),
                )
                dt = datetime_.datetime.strptime(input_data, "%Y-%m-%dT%H:%M:%S.%f")
            else:
                dt = datetime_.datetime.strptime(input_data, "%Y-%m-%dT%H:%M:%S")
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_date(self, input_data, input_name=""):
            _svalue = "%04d-%02d-%02d" % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += "Z"
                        else:
                            if total_seconds < 0:
                                _svalue += "-"
                                total_seconds *= -1
                            else:
                                _svalue += "+"
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += "{:02d}:{:02d}".format(hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == "Z":
                tz = GeneratedsSuper._FixedOffsetTZ(0, "UTC")
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(":")
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == "-":
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, "%Y-%m-%d")
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=""):
            return input_data

        def gds_format_time(self, input_data, input_name=""):
            if input_data.microsecond == 0:
                _svalue = "%02d:%02d:%02d" % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = "%02d:%02d:%02d.%s" % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ("%f" % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += "Z"
                    else:
                        if total_seconds < 0:
                            _svalue += "-"
                            total_seconds *= -1
                        else:
                            _svalue += "+"
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += "{:02d}:{:02d}".format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == "Z":
                tz = GeneratedsSuper._FixedOffsetTZ(0, "UTC")
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(":")
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == "-":
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split(".")) > 1:
                dt = datetime_.datetime.strptime(input_data, "%H:%M:%S.%f")
            else:
                dt = datetime_.datetime.strptime(input_data, "%H:%M:%S")
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_check_cardinality_(
            self, value, input_name, min_occurs=0, max_occurs=1, required=None
        ):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None:
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()
                        )
                    )
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(), min_occurs, length
                    )
                )
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(), max_occurs, length
                    )
                )

        def gds_validate_builtin_ST_(
            self,
            validator,
            value,
            input_name,
            min_occurs=None,
            max_occurs=None,
            required=None,
        ):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))

        def gds_validate_defined_ST_(
            self,
            validator,
            value,
            input_name,
            min_occurs=None,
            max_occurs=None,
            required=None,
        ):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = "/".join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r"\{.*\}")

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub("", node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if "xsi" in node.nsmap:
                classname = node.get("{%s}type" % node.nsmap["xsi"])
                if classname is not None:
                    names = classname.split(":")
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return {v: k for k, v in mapping.items()}

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = "utf-8"
                return instring.encode(encoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode("utf8")
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            def excl_select_objs_(obj):
                return obj[0] != "parent_object_" and obj[0] != "gds_collector_"

            if type(self) != type(other):
                return False
            return all(
                x == y
                for x, y in zip_longest(
                    filter(excl_select_objs_, self.__dict__.items()),
                    filter(excl_select_objs_, other.__dict__.items()),
                )
            )

        def __ne__(self, other):
            return not self.__eq__(other)

        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass

        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass

        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None

        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass

        def gds_get_node_lineno_(self):
            if (
                hasattr(self, "gds_elementtree_node_")
                and self.gds_elementtree_node_ is not None
            ):
                return " near line {}".format(self.gds_elementtree_node_.sourceline)
            else:
                return ""

    def getSubclassFromModule_(module, class_):
        """Get the subclass of a class from a specific module."""
        name = class_.__name__ + "Sub"
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ""
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r"({.*})?(.*)")
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r"{(.*)}(.*)")
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write("    ")


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ""
    s1 = isinstance(inStr, BaseStrType_) and inStr or "%s" % inStr
    s2 = ""
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos : mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start() : mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace("&", "&amp;")
    s1 = s1.replace("<", "&lt;")
    s1 = s1.replace(">", "&gt;")
    return s1


def quote_attrib(inStr):
    s1 = isinstance(inStr, BaseStrType_) and inStr or "%s" % inStr
    s1 = s1.replace("&", "&amp;")
    s1 = s1.replace("<", "&lt;")
    s1 = s1.replace(">", "&gt;")
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find("\n") == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find("\n") == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ""
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(":")
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == "xml":
            namespace = "http://www.w3.org/XML/1998/namespace"
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get(
                "{%s}%s"
                % (
                    namespace,
                    name,
                )
            )
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = "%s (element %s/line %d)" % (
            msg,
            node.tag,
            node.sourceline,
        )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name, pretty_print=pretty_print
            )

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write("<%s>%s</%s>" % (self.name, self.value, self.name))
        elif (
            self.content_type == MixedContainer.TypeInteger
            or self.content_type == MixedContainer.TypeBoolean
        ):
            outfile.write("<%s>%d</%s>" % (self.name, self.value, self.name))
        elif (
            self.content_type == MixedContainer.TypeFloat
            or self.content_type == MixedContainer.TypeDecimal
        ):
            outfile.write("<%s>%f</%s>" % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write("<%s>%g</%s>" % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write(
                "<%s>%s</%s>" % (self.name, base64.b64encode(self.value), self.name)
            )

    def to_etree(self, element, mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, "%s" % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self, mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (
            self.content_type == MixedContainer.TypeInteger
            or self.content_type == MixedContainer.TypeBoolean
        ):
            text = "%d" % self.value
        elif (
            self.content_type == MixedContainer.TypeFloat
            or self.content_type == MixedContainer.TypeDecimal
        ):
            text = "%f" % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = "%g" % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = "%s" % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value)
            )
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value)
            )
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n'
                % (
                    self.category,
                    self.content_type,
                    self.name,
                )
            )
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(")\n")


class MemberSpec_(object):
    def __init__(
        self,
        name="",
        data_type="",
        container=0,
        optional=0,
        child_attrs=None,
        choice=None,
    ):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional

    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def set_data_type(self, data_type):
        self.data_type = data_type

    def get_data_type_chain(self):
        return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return "xs:string"
        else:
            return self.data_type

    def set_container(self, container):
        self.container = container

    def get_container(self):
        return self.container

    def set_child_attrs(self, child_attrs):
        self.child_attrs = child_attrs

    def get_child_attrs(self):
        return self.child_attrs

    def set_choice(self, choice):
        self.choice = choice

    def get_choice(self):
        return self.choice

    def set_optional(self, optional):
        self.optional = optional

    def get_optional(self):
        return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Data representation classes.
#


class AccountTypeType(str, Enum):
    """Type of account. Set standard account in the StandardAccountID element.
    The only valid value is “GL” (General Ledger)."""

    GL = "GL"


class AddressTypeType(str, Enum):
    """Field to differentiate between multiple addresses and to indicate the
    type of address.
    Choose from the predefined enumerations:
    StreetAddress, PostalAddress, BillingAddress, ShipToAddress,
    ShipFromAddress."""

    STREET_ADDRESS = "StreetAddress"
    POSTAL_ADDRESS = "PostalAddress"
    BILLING_ADDRESS = "BillingAddress"
    SHIP_TO_ADDRESS = "ShipToAddress"
    SHIP_FROM_ADDRESS = "ShipFromAddress"


class DebitCreditIndicatorType(str, Enum):
    """Indicates whether the amounts on line-level are debit or credit amounts.
    Entry must correspond to entry reflected in General Ledger Entry.
    Signing of lineamounts is relative to this indicator. E.g. a return can
    lead to a negative amount."""

    D = "D"
    C = "C"


class DebitCreditIndicatorType8(str, Enum):
    """Indicates whether the amounts on line-level are debit or credit amounts.
    Entry must correspond to entry reflected in General Ledger Entry.
    Signing of lineamounts is relative to this indicator. E.g. a return can
    lead to a negative amount."""

    D = "D"
    C = "C"


class DescriptionType(str, Enum):
    """Description of the Tax Type. “Merverdiavgift” is the only valid
    value."""

    MERVERDIAVGIFT = "Merverdiavgift"


class StatusType(str, Enum):
    """Status of the analysis entry. Choose from the predefined enumerations:
    Active, Closed, Observation, Passive."""

    ACTIVE = "Active"
    CLOSED = "Closed"
    OBSERVATION = "Observation"
    PASSIVE = "Passive"


class StatusType11(str, Enum):
    """Type of account.
    Enumerated: Active, Observation, Passive."""

    ACTIVE = "Active"
    OBSERVATION = "Observation"
    PASSIVE = "Passive"


class TaxAccountingBasisType(str, Enum):
    """Type of data in the audit file. The only valid value is “A”
    (Accounting)."""

    A = "A"


class TaxAuthorityType(str, Enum):
    """Identification of the Revenue Body to which this TaxType refers.
    The only valid value is “Skatteetaten ”."""

    SKATTEETATEN = "Skatteetaten"


class TaxTypeType(str, Enum):
    """Tax type for look-up in tables. “MVA” is the only valid value."""

    MVA = "MVA"


class TaxTypeType12(str, Enum):
    """Tax type for look-up in tables.
    If used, then the only valid value is "MVA"."""

    MVA = "MVA"


class TypeType(str, Enum):
    """Type of party.
    Enumerated: Private, Company, Government"""

    PRIVATE = "Private"
    COMPANY = "Company"
    GOVERNMENT = "Government"


class AuditFile(GeneratedsSuper):
    """Root element of the Norwegian SAF-T file."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        Header=None,
        MasterFiles=None,
        GeneralLedgerEntries=None,
        SourceDocuments=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.MasterFiles = MasterFiles
        self.MasterFiles_nsprefix_ = None
        self.GeneralLedgerEntries = GeneralLedgerEntries
        self.GeneralLedgerEntries_nsprefix_ = None
        self.SourceDocuments = SourceDocuments
        self.SourceDocuments_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AuditFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuditFile.subclass:
            return AuditFile.subclass(*args_, **kwargs_)
        else:
            return AuditFile(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Header(self):
        return self.Header

    def set_Header(self, Header):
        self.Header = Header

    def get_MasterFiles(self):
        return self.MasterFiles

    def set_MasterFiles(self, MasterFiles):
        self.MasterFiles = MasterFiles

    def get_GeneralLedgerEntries(self):
        return self.GeneralLedgerEntries

    def set_GeneralLedgerEntries(self, GeneralLedgerEntries):
        self.GeneralLedgerEntries = GeneralLedgerEntries

    def get_SourceDocuments(self):
        return self.SourceDocuments

    def set_SourceDocuments(self, SourceDocuments):
        self.SourceDocuments = SourceDocuments

    def hasContent_(self):
        if (
            self.Header is not None
            or self.MasterFiles is not None
            or self.GeneralLedgerEntries is not None
            or self.SourceDocuments is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns="urn:StandardAuditFile-Taxation-Financial:NO" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:StandardAuditFile-Taxation-Financial:NO Norwegian_SAF-T_Financial_Schema_v_1.10.xsd" ',
        name_="AuditFile",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AuditFile")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AuditFile":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="AuditFile"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AuditFile",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="AuditFile"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AuditFile",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        if self.Header is not None:
            namespaceprefix_ = (
                self.Header_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Header_nsprefix_)
                else ""
            )
            self.Header.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Header",
                pretty_print=pretty_print,
            )
        if self.MasterFiles is not None:
            namespaceprefix_ = (
                self.MasterFiles_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MasterFiles_nsprefix_)
                else ""
            )
            self.MasterFiles.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="MasterFiles",
                pretty_print=pretty_print,
            )
        if self.GeneralLedgerEntries is not None:
            namespaceprefix_ = (
                self.GeneralLedgerEntries_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GeneralLedgerEntries_nsprefix_)
                else ""
            )
            self.GeneralLedgerEntries.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="GeneralLedgerEntries",
                pretty_print=pretty_print,
            )
        if self.SourceDocuments is not None:
            namespaceprefix_ = (
                self.SourceDocuments_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceDocuments_nsprefix_)
                else ""
            )
            self.SourceDocuments.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="SourceDocuments",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Header":
            obj_ = HeaderType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = "Header"
        elif nodeName_ == "MasterFiles":
            obj_ = MasterFilesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MasterFiles = obj_
            obj_.original_tagname_ = "MasterFiles"
        elif nodeName_ == "GeneralLedgerEntries":
            obj_ = GeneralLedgerEntriesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GeneralLedgerEntries = obj_
            obj_.original_tagname_ = "GeneralLedgerEntries"
        elif nodeName_ == "SourceDocuments":
            obj_ = SourceDocumentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SourceDocuments = obj_
            obj_.original_tagname_ = "SourceDocuments"


# end class AuditFile


class InvoiceStructure(GeneratedsSuper):
    """Containing all information about sales invoices and suppliers
    invoices."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        InvoiceNo=None,
        CustomerInfo=None,
        SupplierInfo=None,
        AccountID=None,
        BranchStoreNumber=None,
        Period=None,
        PeriodYear=None,
        InvoiceDate=None,
        InvoiceType=None,
        ShipTo=None,
        ShipFrom=None,
        PaymentTerms=None,
        SelfBillingIndicator=None,
        SourceID=None,
        GLPostingDate=None,
        BatchID=None,
        SystemID=None,
        TransactionID=None,
        ReceiptNumbers=None,
        Line=None,
        Settlement=None,
        DocumentTotals=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.InvoiceNo = InvoiceNo
        self.validate_SAFmiddle2textType(self.InvoiceNo)
        self.InvoiceNo_nsprefix_ = None
        self.CustomerInfo = CustomerInfo
        self.CustomerInfo_nsprefix_ = None
        self.SupplierInfo = SupplierInfo
        self.SupplierInfo_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        self.BranchStoreNumber = BranchStoreNumber
        self.validate_SAFmiddle1textType(self.BranchStoreNumber)
        self.BranchStoreNumber_nsprefix_ = None
        self.Period = Period
        self.Period_nsprefix_ = None
        self.PeriodYear = PeriodYear
        self.validate_PeriodYearType6(self.PeriodYear)
        self.PeriodYear_nsprefix_ = None
        if isinstance(InvoiceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InvoiceDate, "%Y-%m-%d").date()
        else:
            initvalue_ = InvoiceDate
        self.InvoiceDate = initvalue_
        self.InvoiceDate_nsprefix_ = None
        self.InvoiceType = InvoiceType
        self.validate_SAFcodeType(self.InvoiceType)
        self.InvoiceType_nsprefix_ = None
        self.ShipTo = ShipTo
        self.ShipTo_nsprefix_ = None
        self.ShipFrom = ShipFrom
        self.ShipFrom_nsprefix_ = None
        self.PaymentTerms = PaymentTerms
        self.validate_SAFmiddle2textType(self.PaymentTerms)
        self.PaymentTerms_nsprefix_ = None
        self.SelfBillingIndicator = SelfBillingIndicator
        self.validate_SAFcodeType(self.SelfBillingIndicator)
        self.SelfBillingIndicator_nsprefix_ = None
        self.SourceID = SourceID
        self.validate_SAFmiddle1textType(self.SourceID)
        self.SourceID_nsprefix_ = None
        if isinstance(GLPostingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GLPostingDate, "%Y-%m-%d").date()
        else:
            initvalue_ = GLPostingDate
        self.GLPostingDate = initvalue_
        self.GLPostingDate_nsprefix_ = None
        self.BatchID = BatchID
        self.validate_SAFmiddle1textType(self.BatchID)
        self.BatchID_nsprefix_ = None
        self.SystemID = SystemID
        self.validate_SAFmiddle1textType(self.SystemID)
        self.SystemID_nsprefix_ = None
        self.TransactionID = TransactionID
        self.validate_SAFmiddle2textType(self.TransactionID)
        self.TransactionID_nsprefix_ = None
        self.ReceiptNumbers = ReceiptNumbers
        self.validate_SAFlongtextType(self.ReceiptNumbers)
        self.ReceiptNumbers_nsprefix_ = None
        if Line is None:
            self.Line = []
        else:
            self.Line = Line
        self.Line_nsprefix_ = None
        self.Settlement = Settlement
        self.Settlement_nsprefix_ = None
        self.DocumentTotals = DocumentTotals
        self.DocumentTotals_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, InvoiceStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvoiceStructure.subclass:
            return InvoiceStructure.subclass(*args_, **kwargs_)
        else:
            return InvoiceStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_InvoiceNo(self):
        return self.InvoiceNo

    def set_InvoiceNo(self, InvoiceNo):
        self.InvoiceNo = InvoiceNo

    def get_CustomerInfo(self):
        return self.CustomerInfo

    def set_CustomerInfo(self, CustomerInfo):
        self.CustomerInfo = CustomerInfo

    def get_SupplierInfo(self):
        return self.SupplierInfo

    def set_SupplierInfo(self, SupplierInfo):
        self.SupplierInfo = SupplierInfo

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_BranchStoreNumber(self):
        return self.BranchStoreNumber

    def set_BranchStoreNumber(self, BranchStoreNumber):
        self.BranchStoreNumber = BranchStoreNumber

    def get_Period(self):
        return self.Period

    def set_Period(self, Period):
        self.Period = Period

    def get_PeriodYear(self):
        return self.PeriodYear

    def set_PeriodYear(self, PeriodYear):
        self.PeriodYear = PeriodYear

    def get_InvoiceDate(self):
        return self.InvoiceDate

    def set_InvoiceDate(self, InvoiceDate):
        self.InvoiceDate = InvoiceDate

    def get_InvoiceType(self):
        return self.InvoiceType

    def set_InvoiceType(self, InvoiceType):
        self.InvoiceType = InvoiceType

    def get_ShipTo(self):
        return self.ShipTo

    def set_ShipTo(self, ShipTo):
        self.ShipTo = ShipTo

    def get_ShipFrom(self):
        return self.ShipFrom

    def set_ShipFrom(self, ShipFrom):
        self.ShipFrom = ShipFrom

    def get_PaymentTerms(self):
        return self.PaymentTerms

    def set_PaymentTerms(self, PaymentTerms):
        self.PaymentTerms = PaymentTerms

    def get_SelfBillingIndicator(self):
        return self.SelfBillingIndicator

    def set_SelfBillingIndicator(self, SelfBillingIndicator):
        self.SelfBillingIndicator = SelfBillingIndicator

    def get_SourceID(self):
        return self.SourceID

    def set_SourceID(self, SourceID):
        self.SourceID = SourceID

    def get_GLPostingDate(self):
        return self.GLPostingDate

    def set_GLPostingDate(self, GLPostingDate):
        self.GLPostingDate = GLPostingDate

    def get_BatchID(self):
        return self.BatchID

    def set_BatchID(self, BatchID):
        self.BatchID = BatchID

    def get_SystemID(self):
        return self.SystemID

    def set_SystemID(self, SystemID):
        self.SystemID = SystemID

    def get_TransactionID(self):
        return self.TransactionID

    def set_TransactionID(self, TransactionID):
        self.TransactionID = TransactionID

    def get_ReceiptNumbers(self):
        return self.ReceiptNumbers

    def set_ReceiptNumbers(self, ReceiptNumbers):
        self.ReceiptNumbers = ReceiptNumbers

    def get_Line(self):
        return self.Line

    def set_Line(self, Line):
        self.Line = Line

    def add_Line(self, value):
        self.Line.append(value)

    def insert_Line_at(self, index, value):
        self.Line.insert(index, value)

    def replace_Line_at(self, index, value):
        self.Line[index] = value

    def get_Settlement(self):
        return self.Settlement

    def set_Settlement(self, Settlement):
        self.Settlement = Settlement

    def get_DocumentTotals(self):
        return self.DocumentTotals

    def set_DocumentTotals(self, DocumentTotals):
        self.DocumentTotals = DocumentTotals

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_PeriodYearType6(self, value):
        result = True
        # Validate type PeriodYearType6, a restriction on xs:nonNegativeInteger.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 1970:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PeriodYearType6'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 2100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on PeriodYearType6'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.InvoiceNo is not None
            or self.CustomerInfo is not None
            or self.SupplierInfo is not None
            or self.AccountID is not None
            or self.BranchStoreNumber is not None
            or self.Period is not None
            or self.PeriodYear is not None
            or self.InvoiceDate is not None
            or self.InvoiceType is not None
            or self.ShipTo is not None
            or self.ShipFrom is not None
            or self.PaymentTerms is not None
            or self.SelfBillingIndicator is not None
            or self.SourceID is not None
            or self.GLPostingDate is not None
            or self.BatchID is not None
            or self.SystemID is not None
            or self.TransactionID is not None
            or self.ReceiptNumbers is not None
            or self.Line
            or self.Settlement is not None
            or self.DocumentTotals is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="InvoiceStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("InvoiceStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "InvoiceStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="InvoiceStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="InvoiceStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="InvoiceStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="InvoiceStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.InvoiceNo is not None:
            namespaceprefix_ = (
                self.InvoiceNo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.InvoiceNo_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sInvoiceNo>%s</%sInvoiceNo>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.InvoiceNo), input_name="InvoiceNo"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CustomerInfo is not None:
            namespaceprefix_ = (
                self.CustomerInfo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerInfo_nsprefix_)
                else ""
            )
            self.CustomerInfo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="CustomerInfo",
                pretty_print=pretty_print,
            )
        if self.SupplierInfo is not None:
            namespaceprefix_ = (
                self.SupplierInfo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierInfo_nsprefix_)
                else ""
            )
            self.SupplierInfo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="SupplierInfo",
                pretty_print=pretty_print,
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BranchStoreNumber is not None:
            namespaceprefix_ = (
                self.BranchStoreNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BranchStoreNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBranchStoreNumber>%s</%sBranchStoreNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BranchStoreNumber),
                            input_name="BranchStoreNumber",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Period is not None:
            namespaceprefix_ = (
                self.Period_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Period_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriod>%s</%sPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.Period, input_name="Period"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodYear is not None:
            namespaceprefix_ = (
                self.PeriodYear_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodYear_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodYear>%s</%sPeriodYear>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.PeriodYear, input_name="PeriodYear"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.InvoiceDate is not None:
            namespaceprefix_ = (
                self.InvoiceDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.InvoiceDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sInvoiceDate>%s</%sInvoiceDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.InvoiceDate, input_name="InvoiceDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.InvoiceType is not None:
            namespaceprefix_ = (
                self.InvoiceType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.InvoiceType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sInvoiceType>%s</%sInvoiceType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.InvoiceType), input_name="InvoiceType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ShipTo is not None:
            namespaceprefix_ = (
                self.ShipTo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShipTo_nsprefix_)
                else ""
            )
            self.ShipTo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShipTo",
                pretty_print=pretty_print,
            )
        if self.ShipFrom is not None:
            namespaceprefix_ = (
                self.ShipFrom_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShipFrom_nsprefix_)
                else ""
            )
            self.ShipFrom.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShipFrom",
                pretty_print=pretty_print,
            )
        if self.PaymentTerms is not None:
            namespaceprefix_ = (
                self.PaymentTerms_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentTerms_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPaymentTerms>%s</%sPaymentTerms>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.PaymentTerms), input_name="PaymentTerms"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SelfBillingIndicator is not None:
            namespaceprefix_ = (
                self.SelfBillingIndicator_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SelfBillingIndicator_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSelfBillingIndicator>%s</%sSelfBillingIndicator>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SelfBillingIndicator),
                            input_name="SelfBillingIndicator",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SourceID is not None:
            namespaceprefix_ = (
                self.SourceID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSourceID>%s</%sSourceID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SourceID), input_name="SourceID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GLPostingDate is not None:
            namespaceprefix_ = (
                self.GLPostingDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GLPostingDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGLPostingDate>%s</%sGLPostingDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.GLPostingDate, input_name="GLPostingDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BatchID is not None:
            namespaceprefix_ = (
                self.BatchID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BatchID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBatchID>%s</%sBatchID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BatchID), input_name="BatchID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SystemID is not None:
            namespaceprefix_ = (
                self.SystemID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SystemID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSystemID>%s</%sSystemID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SystemID), input_name="SystemID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TransactionID is not None:
            namespaceprefix_ = (
                self.TransactionID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionID>%s</%sTransactionID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TransactionID), input_name="TransactionID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ReceiptNumbers is not None:
            namespaceprefix_ = (
                self.ReceiptNumbers_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ReceiptNumbers_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sReceiptNumbers>%s</%sReceiptNumbers>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ReceiptNumbers), input_name="ReceiptNumbers"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Line_ in self.Line:
            namespaceprefix_ = (
                self.Line_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Line_nsprefix_)
                else ""
            )
            Line_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Line",
                pretty_print=pretty_print,
            )
        if self.Settlement is not None:
            namespaceprefix_ = (
                self.Settlement_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Settlement_nsprefix_)
                else ""
            )
            self.Settlement.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Settlement",
                pretty_print=pretty_print,
            )
        if self.DocumentTotals is not None:
            namespaceprefix_ = (
                self.DocumentTotals_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentTotals_nsprefix_)
                else ""
            )
            self.DocumentTotals.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="DocumentTotals",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "InvoiceNo":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "InvoiceNo")
            value_ = self.gds_validate_string(value_, node, "InvoiceNo")
            self.InvoiceNo = value_
            self.InvoiceNo_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.InvoiceNo)
        elif nodeName_ == "CustomerInfo":
            obj_ = CustomerInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerInfo = obj_
            obj_.original_tagname_ = "CustomerInfo"
        elif nodeName_ == "SupplierInfo":
            obj_ = SupplierInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplierInfo = obj_
            obj_.original_tagname_ = "SupplierInfo"
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "BranchStoreNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BranchStoreNumber")
            value_ = self.gds_validate_string(value_, node, "BranchStoreNumber")
            self.BranchStoreNumber = value_
            self.BranchStoreNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.BranchStoreNumber)
        elif nodeName_ == "Period" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "Period")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "Period")
            self.Period = ival_
            self.Period_nsprefix_ = child_.prefix
        elif nodeName_ == "PeriodYear" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodYear")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodYear")
            self.PeriodYear = ival_
            self.PeriodYear_nsprefix_ = child_.prefix
            # validate type PeriodYearType6
            self.validate_PeriodYearType6(self.PeriodYear)
        elif nodeName_ == "InvoiceDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.InvoiceDate = dval_
            self.InvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == "InvoiceType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "InvoiceType")
            value_ = self.gds_validate_string(value_, node, "InvoiceType")
            self.InvoiceType = value_
            self.InvoiceType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.InvoiceType)
        elif nodeName_ == "ShipTo":
            obj_ = ShippingPointStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipTo = obj_
            obj_.original_tagname_ = "ShipTo"
        elif nodeName_ == "ShipFrom":
            obj_ = ShippingPointStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = "ShipFrom"
        elif nodeName_ == "PaymentTerms":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "PaymentTerms")
            value_ = self.gds_validate_string(value_, node, "PaymentTerms")
            self.PaymentTerms = value_
            self.PaymentTerms_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.PaymentTerms)
        elif nodeName_ == "SelfBillingIndicator":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SelfBillingIndicator")
            value_ = self.gds_validate_string(value_, node, "SelfBillingIndicator")
            self.SelfBillingIndicator = value_
            self.SelfBillingIndicator_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.SelfBillingIndicator)
        elif nodeName_ == "SourceID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SourceID")
            value_ = self.gds_validate_string(value_, node, "SourceID")
            self.SourceID = value_
            self.SourceID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SourceID)
        elif nodeName_ == "GLPostingDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GLPostingDate = dval_
            self.GLPostingDate_nsprefix_ = child_.prefix
        elif nodeName_ == "BatchID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BatchID")
            value_ = self.gds_validate_string(value_, node, "BatchID")
            self.BatchID = value_
            self.BatchID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.BatchID)
        elif nodeName_ == "SystemID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SystemID")
            value_ = self.gds_validate_string(value_, node, "SystemID")
            self.SystemID = value_
            self.SystemID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SystemID)
        elif nodeName_ == "TransactionID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TransactionID")
            value_ = self.gds_validate_string(value_, node, "TransactionID")
            self.TransactionID = value_
            self.TransactionID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TransactionID)
        elif nodeName_ == "ReceiptNumbers":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ReceiptNumbers")
            value_ = self.gds_validate_string(value_, node, "ReceiptNumbers")
            self.ReceiptNumbers = value_
            self.ReceiptNumbers_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.ReceiptNumbers)
        elif nodeName_ == "Line":
            obj_ = LineType7.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Line.append(obj_)
            obj_.original_tagname_ = "Line"
        elif nodeName_ == "Settlement":
            obj_ = SettlementType9.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Settlement = obj_
            obj_.original_tagname_ = "Settlement"
        elif nodeName_ == "DocumentTotals":
            obj_ = DocumentTotalsType10.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentTotals = obj_
            obj_.original_tagname_ = "DocumentTotals"


# end class InvoiceStructure


class ShippingPointStructure(GeneratedsSuper):
    """A structure that holds all shipping point information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        DeliveryID=None,
        DeliveryDate=None,
        WarehouseID=None,
        LocationID=None,
        UCR=None,
        Address=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.DeliveryID = DeliveryID
        self.validate_SAFmiddle1textType(self.DeliveryID)
        self.DeliveryID_nsprefix_ = None
        if isinstance(DeliveryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryDate, "%Y-%m-%d").date()
        else:
            initvalue_ = DeliveryDate
        self.DeliveryDate = initvalue_
        self.DeliveryDate_nsprefix_ = None
        self.WarehouseID = WarehouseID
        self.validate_SAFmiddle1textType(self.WarehouseID)
        self.WarehouseID_nsprefix_ = None
        self.LocationID = LocationID
        self.validate_SAFshorttextType(self.LocationID)
        self.LocationID_nsprefix_ = None
        self.UCR = UCR
        self.validate_SAFmiddle1textType(self.UCR)
        self.UCR_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingPointStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingPointStructure.subclass:
            return ShippingPointStructure.subclass(*args_, **kwargs_)
        else:
            return ShippingPointStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_DeliveryID(self):
        return self.DeliveryID

    def set_DeliveryID(self, DeliveryID):
        self.DeliveryID = DeliveryID

    def get_DeliveryDate(self):
        return self.DeliveryDate

    def set_DeliveryDate(self, DeliveryDate):
        self.DeliveryDate = DeliveryDate

    def get_WarehouseID(self):
        return self.WarehouseID

    def set_WarehouseID(self, WarehouseID):
        self.WarehouseID = WarehouseID

    def get_LocationID(self):
        return self.LocationID

    def set_LocationID(self, LocationID):
        self.LocationID = LocationID

    def get_UCR(self):
        return self.UCR

    def set_UCR(self, UCR):
        self.UCR = UCR

    def get_Address(self):
        return self.Address

    def set_Address(self, Address):
        self.Address = Address

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.DeliveryID is not None
            or self.DeliveryDate is not None
            or self.WarehouseID is not None
            or self.LocationID is not None
            or self.UCR is not None
            or self.Address is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ShippingPointStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ShippingPointStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ShippingPointStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="ShippingPointStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ShippingPointStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ShippingPointStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ShippingPointStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.DeliveryID is not None:
            namespaceprefix_ = (
                self.DeliveryID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DeliveryID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDeliveryID>%s</%sDeliveryID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DeliveryID), input_name="DeliveryID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DeliveryDate is not None:
            namespaceprefix_ = (
                self.DeliveryDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DeliveryDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDeliveryDate>%s</%sDeliveryDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.DeliveryDate, input_name="DeliveryDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.WarehouseID is not None:
            namespaceprefix_ = (
                self.WarehouseID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.WarehouseID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sWarehouseID>%s</%sWarehouseID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.WarehouseID), input_name="WarehouseID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.LocationID is not None:
            namespaceprefix_ = (
                self.LocationID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LocationID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLocationID>%s</%sLocationID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LocationID), input_name="LocationID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UCR is not None:
            namespaceprefix_ = (
                self.UCR_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UCR_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUCR>%s</%sUCR>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.UCR), input_name="UCR")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Address is not None:
            namespaceprefix_ = (
                self.Address_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Address_nsprefix_)
                else ""
            )
            self.Address.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Address",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "DeliveryID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DeliveryID")
            value_ = self.gds_validate_string(value_, node, "DeliveryID")
            self.DeliveryID = value_
            self.DeliveryID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.DeliveryID)
        elif nodeName_ == "DeliveryDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DeliveryDate = dval_
            self.DeliveryDate_nsprefix_ = child_.prefix
        elif nodeName_ == "WarehouseID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "WarehouseID")
            value_ = self.gds_validate_string(value_, node, "WarehouseID")
            self.WarehouseID = value_
            self.WarehouseID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.WarehouseID)
        elif nodeName_ == "LocationID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LocationID")
            value_ = self.gds_validate_string(value_, node, "LocationID")
            self.LocationID = value_
            self.LocationID_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.LocationID)
        elif nodeName_ == "UCR":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UCR")
            value_ = self.gds_validate_string(value_, node, "UCR")
            self.UCR = value_
            self.UCR_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.UCR)
        elif nodeName_ == "Address":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = "Address"


# end class ShippingPointStructure


class AddressStructure(GeneratedsSuper):
    """A common structure used wherever an address is required."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        StreetName=None,
        Number=None,
        AdditionalAddressDetail=None,
        Building=None,
        City=None,
        PostalCode=None,
        Region=None,
        Country=None,
        AddressType=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.StreetName = StreetName
        self.validate_SAFmiddle2textType(self.StreetName)
        self.StreetName_nsprefix_ = None
        self.Number = Number
        self.validate_SAFshorttextType(self.Number)
        self.Number_nsprefix_ = None
        self.AdditionalAddressDetail = AdditionalAddressDetail
        self.validate_SAFmiddle2textType(self.AdditionalAddressDetail)
        self.AdditionalAddressDetail_nsprefix_ = None
        self.Building = Building
        self.validate_SAFmiddle1textType(self.Building)
        self.Building_nsprefix_ = None
        self.City = City
        self.validate_SAFmiddle1textType(self.City)
        self.City_nsprefix_ = None
        self.PostalCode = PostalCode
        self.validate_SAFshorttextType(self.PostalCode)
        self.PostalCode_nsprefix_ = None
        self.Region = Region
        self.validate_SAFmiddle1textType(self.Region)
        self.Region_nsprefix_ = None
        self.Country = Country
        self.validate_ISOCountryCode(self.Country)
        self.Country_nsprefix_ = None
        self.AddressType = AddressType
        self.validate_AddressTypeType(self.AddressType)
        self.AddressType_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AddressStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressStructure.subclass:
            return AddressStructure.subclass(*args_, **kwargs_)
        else:
            return AddressStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_StreetName(self):
        return self.StreetName

    def set_StreetName(self, StreetName):
        self.StreetName = StreetName

    def get_Number(self):
        return self.Number

    def set_Number(self, Number):
        self.Number = Number

    def get_AdditionalAddressDetail(self):
        return self.AdditionalAddressDetail

    def set_AdditionalAddressDetail(self, AdditionalAddressDetail):
        self.AdditionalAddressDetail = AdditionalAddressDetail

    def get_Building(self):
        return self.Building

    def set_Building(self, Building):
        self.Building = Building

    def get_City(self):
        return self.City

    def set_City(self, City):
        self.City = City

    def get_PostalCode(self):
        return self.PostalCode

    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode

    def get_Region(self):
        return self.Region

    def set_Region(self, Region):
        self.Region = Region

    def get_Country(self):
        return self.Country

    def set_Country(self, Country):
        self.Country = Country

    def get_AddressType(self):
        return self.AddressType

    def set_AddressType(self, AddressType):
        self.AddressType = AddressType

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCountryCode(self, value):
        result = True
        # Validate type ISOCountryCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCountryCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_AddressTypeType(self, value):
        result = True
        # Validate type AddressTypeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = [
                "StreetAddress",
                "PostalAddress",
                "BillingAddress",
                "ShipToAddress",
                "ShipFromAddress",
            ]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AddressTypeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.StreetName is not None
            or self.Number is not None
            or self.AdditionalAddressDetail is not None
            or self.Building is not None
            or self.City is not None
            or self.PostalCode is not None
            or self.Region is not None
            or self.Country is not None
            or self.AddressType is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AddressStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AddressStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AddressStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AddressStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AddressStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AddressStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AddressStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.StreetName is not None:
            namespaceprefix_ = (
                self.StreetName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StreetName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStreetName>%s</%sStreetName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.StreetName), input_name="StreetName"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Number is not None:
            namespaceprefix_ = (
                self.Number_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Number_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumber>%s</%sNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Number), input_name="Number"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AdditionalAddressDetail is not None:
            namespaceprefix_ = (
                self.AdditionalAddressDetail_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AdditionalAddressDetail_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAdditionalAddressDetail>%s</%sAdditionalAddressDetail>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AdditionalAddressDetail),
                            input_name="AdditionalAddressDetail",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Building is not None:
            namespaceprefix_ = (
                self.Building_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Building_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBuilding>%s</%sBuilding>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Building), input_name="Building"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.City is not None:
            namespaceprefix_ = (
                self.City_nsprefix_ + ":"
                if (UseCapturedNS_ and self.City_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCity>%s</%sCity>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.City), input_name="City")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PostalCode is not None:
            namespaceprefix_ = (
                self.PostalCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PostalCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPostalCode>%s</%sPostalCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.PostalCode), input_name="PostalCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Region is not None:
            namespaceprefix_ = (
                self.Region_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Region_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sRegion>%s</%sRegion>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Region), input_name="Region"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Country is not None:
            namespaceprefix_ = (
                self.Country_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Country_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCountry>%s</%sCountry>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Country), input_name="Country"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AddressType is not None:
            namespaceprefix_ = (
                self.AddressType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AddressType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAddressType>%s</%sAddressType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AddressType), input_name="AddressType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "StreetName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StreetName")
            value_ = self.gds_validate_string(value_, node, "StreetName")
            self.StreetName = value_
            self.StreetName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.StreetName)
        elif nodeName_ == "Number":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Number")
            value_ = self.gds_validate_string(value_, node, "Number")
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Number)
        elif nodeName_ == "AdditionalAddressDetail":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AdditionalAddressDetail")
            value_ = self.gds_validate_string(value_, node, "AdditionalAddressDetail")
            self.AdditionalAddressDetail = value_
            self.AdditionalAddressDetail_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AdditionalAddressDetail)
        elif nodeName_ == "Building":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Building")
            value_ = self.gds_validate_string(value_, node, "Building")
            self.Building = value_
            self.Building_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.Building)
        elif nodeName_ == "City":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "City")
            value_ = self.gds_validate_string(value_, node, "City")
            self.City = value_
            self.City_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.City)
        elif nodeName_ == "PostalCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "PostalCode")
            value_ = self.gds_validate_string(value_, node, "PostalCode")
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.PostalCode)
        elif nodeName_ == "Region":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Region")
            value_ = self.gds_validate_string(value_, node, "Region")
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.Region)
        elif nodeName_ == "Country":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Country")
            value_ = self.gds_validate_string(value_, node, "Country")
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type ISOCountryCode
            self.validate_ISOCountryCode(self.Country)
        elif nodeName_ == "AddressType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AddressType")
            value_ = self.gds_validate_string(value_, node, "AddressType")
            self.AddressType = value_
            self.AddressType_nsprefix_ = child_.prefix
            # validate type AddressTypeType
            self.validate_AddressTypeType(self.AddressType)


# end class AddressStructure


class AmountStructure(GeneratedsSuper):
    """A common structure used wherever an amount is required. Monetary amount
    with optional foreign currency exchange rate information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        Amount=None,
        CurrencyCode=None,
        CurrencyAmount=None,
        ExchangeRate=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.Amount = Amount
        self.validate_SAFmonetaryType(self.Amount)
        self.Amount_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.validate_ISOCurrencyCode(self.CurrencyCode)
        self.CurrencyCode_nsprefix_ = None
        self.CurrencyAmount = CurrencyAmount
        self.validate_SAFmonetaryType(self.CurrencyAmount)
        self.CurrencyAmount_nsprefix_ = None
        self.ExchangeRate = ExchangeRate
        self.validate_SAFexchangerateType(self.ExchangeRate)
        self.ExchangeRate_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AmountStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountStructure.subclass:
            return AmountStructure.subclass(*args_, **kwargs_)
        else:
            return AmountStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Amount(self):
        return self.Amount

    def set_Amount(self, Amount):
        self.Amount = Amount

    def get_CurrencyCode(self):
        return self.CurrencyCode

    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode

    def get_CurrencyAmount(self):
        return self.CurrencyAmount

    def set_CurrencyAmount(self, CurrencyAmount):
        self.CurrencyAmount = CurrencyAmount

    def get_ExchangeRate(self):
        return self.ExchangeRate

    def set_ExchangeRate(self, ExchangeRate):
        self.ExchangeRate = ExchangeRate

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCurrencyCode(self, value):
        result = True
        # Validate type ISOCurrencyCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCurrencyCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFexchangerateType(self, value):
        result = True
        # Validate type SAFexchangerateType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFexchangerateType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.Amount is not None
            or self.CurrencyCode is not None
            or self.CurrencyAmount is not None
            or self.ExchangeRate is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AmountStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AmountStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AmountStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="AmountStructure"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AmountStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AmountStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AmountStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.Amount is not None:
            namespaceprefix_ = (
                self.Amount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Amount_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAmount>%s</%sAmount>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.Amount, input_name="Amount"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CurrencyCode is not None:
            namespaceprefix_ = (
                self.CurrencyCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CurrencyCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCurrencyCode>%s</%sCurrencyCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CurrencyCode), input_name="CurrencyCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CurrencyAmount is not None:
            namespaceprefix_ = (
                self.CurrencyAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CurrencyAmount_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCurrencyAmount>%s</%sCurrencyAmount>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.CurrencyAmount, input_name="CurrencyAmount"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ExchangeRate is not None:
            namespaceprefix_ = (
                self.ExchangeRate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ExchangeRate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sExchangeRate>%s</%sExchangeRate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ExchangeRate, input_name="ExchangeRate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Amount" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "Amount")
            fval_ = self.gds_validate_decimal(fval_, node, "Amount")
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.Amount)
        elif nodeName_ == "CurrencyCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CurrencyCode")
            value_ = self.gds_validate_string(value_, node, "CurrencyCode")
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
            # validate type ISOCurrencyCode
            self.validate_ISOCurrencyCode(self.CurrencyCode)
        elif nodeName_ == "CurrencyAmount" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "CurrencyAmount")
            fval_ = self.gds_validate_decimal(fval_, node, "CurrencyAmount")
            self.CurrencyAmount = fval_
            self.CurrencyAmount_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.CurrencyAmount)
        elif nodeName_ == "ExchangeRate" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ExchangeRate")
            fval_ = self.gds_validate_decimal(fval_, node, "ExchangeRate")
            self.ExchangeRate = fval_
            self.ExchangeRate_nsprefix_ = child_.prefix
            # validate type SAFexchangerateType
            self.validate_SAFexchangerateType(self.ExchangeRate)


# end class AmountStructure


class AnalysisStructure(GeneratedsSuper):
    """General Ledger analysis codes."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AnalysisType=None,
        AnalysisID=None,
        AnalysisAmount=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AnalysisType = AnalysisType
        self.validate_SAFcodeType(self.AnalysisType)
        self.AnalysisType_nsprefix_ = None
        self.AnalysisID = AnalysisID
        self.validate_SAFlongtextType(self.AnalysisID)
        self.AnalysisID_nsprefix_ = None
        self.AnalysisAmount = AnalysisAmount
        self.AnalysisAmount_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AnalysisStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalysisStructure.subclass:
            return AnalysisStructure.subclass(*args_, **kwargs_)
        else:
            return AnalysisStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AnalysisType(self):
        return self.AnalysisType

    def set_AnalysisType(self, AnalysisType):
        self.AnalysisType = AnalysisType

    def get_AnalysisID(self):
        return self.AnalysisID

    def set_AnalysisID(self, AnalysisID):
        self.AnalysisID = AnalysisID

    def get_AnalysisAmount(self):
        return self.AnalysisAmount

    def set_AnalysisAmount(self, AnalysisAmount):
        self.AnalysisAmount = AnalysisAmount

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AnalysisType is not None
            or self.AnalysisID is not None
            or self.AnalysisAmount is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AnalysisStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AnalysisStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AnalysisStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AnalysisStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AnalysisStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AnalysisType is not None:
            namespaceprefix_ = (
                self.AnalysisType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisType>%s</%sAnalysisType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisType), input_name="AnalysisType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AnalysisID is not None:
            namespaceprefix_ = (
                self.AnalysisID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisID>%s</%sAnalysisID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisID), input_name="AnalysisID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AnalysisAmount is not None:
            namespaceprefix_ = (
                self.AnalysisAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisAmount_nsprefix_)
                else ""
            )
            self.AnalysisAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AnalysisAmount",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AnalysisType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisType")
            value_ = self.gds_validate_string(value_, node, "AnalysisType")
            self.AnalysisType = value_
            self.AnalysisType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.AnalysisType)
        elif nodeName_ == "AnalysisID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisID")
            value_ = self.gds_validate_string(value_, node, "AnalysisID")
            self.AnalysisID = value_
            self.AnalysisID_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.AnalysisID)
        elif nodeName_ == "AnalysisAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AnalysisAmount = obj_
            obj_.original_tagname_ = "AnalysisAmount"


# end class AnalysisStructure


class AnalysisPartyInfoStructure(AnalysisStructure):
    """Analysis structure (restricted) for use in PartyInfoStructure."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = AnalysisStructure

    def __init__(
        self,
        AnalysisType=None,
        AnalysisID=None,
        AnalysisAmount=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("AnalysisPartyInfoStructure"), self).__init__(
            AnalysisType, AnalysisID, AnalysisAmount, **kwargs_
        )
        self.AnalysisType = AnalysisType
        self.validate_SAFcodeType(self.AnalysisType)
        self.AnalysisType_nsprefix_ = None
        self.AnalysisID = AnalysisID
        self.validate_SAFlongtextType(self.AnalysisID)
        self.AnalysisID_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalysisPartyInfoStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalysisPartyInfoStructure.subclass:
            return AnalysisPartyInfoStructure.subclass(*args_, **kwargs_)
        else:
            return AnalysisPartyInfoStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AnalysisType(self):
        return self.AnalysisType

    def set_AnalysisType(self, AnalysisType):
        self.AnalysisType = AnalysisType

    def get_AnalysisID(self):
        return self.AnalysisID

    def set_AnalysisID(self, AnalysisID):
        self.AnalysisID = AnalysisID

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AnalysisType is not None
            or self.AnalysisID is not None
            or super(AnalysisPartyInfoStructure, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisPartyInfoStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AnalysisPartyInfoStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AnalysisPartyInfoStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AnalysisPartyInfoStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AnalysisPartyInfoStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AnalysisPartyInfoStructure",
    ):
        super(AnalysisPartyInfoStructure, self).exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AnalysisPartyInfoStructure",
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisPartyInfoStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AnalysisType is not None:
            namespaceprefix_ = (
                self.AnalysisType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisType>%s</%sAnalysisType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisType), input_name="AnalysisType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AnalysisID is not None:
            namespaceprefix_ = (
                self.AnalysisID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisID>%s</%sAnalysisID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisID), input_name="AnalysisID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(AnalysisPartyInfoStructure, self).buildAttributes(
            node, attrs, already_processed
        )

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AnalysisType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisType")
            value_ = self.gds_validate_string(value_, node, "AnalysisType")
            self.AnalysisType = value_
            self.AnalysisType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.AnalysisType)
        elif nodeName_ == "AnalysisID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisID")
            value_ = self.gds_validate_string(value_, node, "AnalysisID")
            self.AnalysisID = value_
            self.AnalysisID_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.AnalysisID)


# end class AnalysisPartyInfoStructure


class BankAccountStructure(GeneratedsSuper):
    """Bank account number information. IBAN number, or account number with
    optional information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        IBANNumber=None,
        BankAccountNumber=None,
        BankAccountName=None,
        SortCode=None,
        BIC=None,
        CurrencyCode=None,
        GeneralLedgerAccountID=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.IBANNumber = IBANNumber
        self.validate_SAFmiddle1textType(self.IBANNumber)
        self.IBANNumber_nsprefix_ = None
        self.BankAccountNumber = BankAccountNumber
        self.validate_SAFmiddle1textType(self.BankAccountNumber)
        self.BankAccountNumber_nsprefix_ = None
        self.BankAccountName = BankAccountName
        self.validate_SAFmiddle2textType(self.BankAccountName)
        self.BankAccountName_nsprefix_ = None
        self.SortCode = SortCode
        self.validate_SAFshorttextType(self.SortCode)
        self.SortCode_nsprefix_ = None
        self.BIC = BIC
        self.validate_SAFshorttextType(self.BIC)
        self.BIC_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.validate_ISOCurrencyCode(self.CurrencyCode)
        self.CurrencyCode_nsprefix_ = None
        self.GeneralLedgerAccountID = GeneralLedgerAccountID
        self.validate_SAFmiddle2textType(self.GeneralLedgerAccountID)
        self.GeneralLedgerAccountID_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BankAccountStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BankAccountStructure.subclass:
            return BankAccountStructure.subclass(*args_, **kwargs_)
        else:
            return BankAccountStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_IBANNumber(self):
        return self.IBANNumber

    def set_IBANNumber(self, IBANNumber):
        self.IBANNumber = IBANNumber

    def get_BankAccountNumber(self):
        return self.BankAccountNumber

    def set_BankAccountNumber(self, BankAccountNumber):
        self.BankAccountNumber = BankAccountNumber

    def get_BankAccountName(self):
        return self.BankAccountName

    def set_BankAccountName(self, BankAccountName):
        self.BankAccountName = BankAccountName

    def get_SortCode(self):
        return self.SortCode

    def set_SortCode(self, SortCode):
        self.SortCode = SortCode

    def get_BIC(self):
        return self.BIC

    def set_BIC(self, BIC):
        self.BIC = BIC

    def get_CurrencyCode(self):
        return self.CurrencyCode

    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode

    def get_GeneralLedgerAccountID(self):
        return self.GeneralLedgerAccountID

    def set_GeneralLedgerAccountID(self, GeneralLedgerAccountID):
        self.GeneralLedgerAccountID = GeneralLedgerAccountID

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCurrencyCode(self, value):
        result = True
        # Validate type ISOCurrencyCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCurrencyCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.IBANNumber is not None
            or self.BankAccountNumber is not None
            or self.BankAccountName is not None
            or self.SortCode is not None
            or self.BIC is not None
            or self.CurrencyCode is not None
            or self.GeneralLedgerAccountID is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="BankAccountStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("BankAccountStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "BankAccountStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="BankAccountStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="BankAccountStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="BankAccountStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="BankAccountStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.IBANNumber is not None:
            namespaceprefix_ = (
                self.IBANNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.IBANNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sIBANNumber>%s</%sIBANNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.IBANNumber), input_name="IBANNumber"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BankAccountNumber is not None:
            namespaceprefix_ = (
                self.BankAccountNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BankAccountNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBankAccountNumber>%s</%sBankAccountNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BankAccountNumber),
                            input_name="BankAccountNumber",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BankAccountName is not None:
            namespaceprefix_ = (
                self.BankAccountName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BankAccountName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBankAccountName>%s</%sBankAccountName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BankAccountName),
                            input_name="BankAccountName",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SortCode is not None:
            namespaceprefix_ = (
                self.SortCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SortCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSortCode>%s</%sSortCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SortCode), input_name="SortCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BIC is not None:
            namespaceprefix_ = (
                self.BIC_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BIC_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBIC>%s</%sBIC>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.BIC), input_name="BIC")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CurrencyCode is not None:
            namespaceprefix_ = (
                self.CurrencyCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CurrencyCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCurrencyCode>%s</%sCurrencyCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CurrencyCode), input_name="CurrencyCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GeneralLedgerAccountID is not None:
            namespaceprefix_ = (
                self.GeneralLedgerAccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GeneralLedgerAccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGeneralLedgerAccountID>%s</%sGeneralLedgerAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.GeneralLedgerAccountID),
                            input_name="GeneralLedgerAccountID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "IBANNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "IBANNumber")
            value_ = self.gds_validate_string(value_, node, "IBANNumber")
            self.IBANNumber = value_
            self.IBANNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.IBANNumber)
        elif nodeName_ == "BankAccountNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BankAccountNumber")
            value_ = self.gds_validate_string(value_, node, "BankAccountNumber")
            self.BankAccountNumber = value_
            self.BankAccountNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.BankAccountNumber)
        elif nodeName_ == "BankAccountName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BankAccountName")
            value_ = self.gds_validate_string(value_, node, "BankAccountName")
            self.BankAccountName = value_
            self.BankAccountName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.BankAccountName)
        elif nodeName_ == "SortCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SortCode")
            value_ = self.gds_validate_string(value_, node, "SortCode")
            self.SortCode = value_
            self.SortCode_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.SortCode)
        elif nodeName_ == "BIC":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BIC")
            value_ = self.gds_validate_string(value_, node, "BIC")
            self.BIC = value_
            self.BIC_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.BIC)
        elif nodeName_ == "CurrencyCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CurrencyCode")
            value_ = self.gds_validate_string(value_, node, "CurrencyCode")
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
            # validate type ISOCurrencyCode
            self.validate_ISOCurrencyCode(self.CurrencyCode)
        elif nodeName_ == "GeneralLedgerAccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "GeneralLedgerAccountID")
            value_ = self.gds_validate_string(value_, node, "GeneralLedgerAccountID")
            self.GeneralLedgerAccountID = value_
            self.GeneralLedgerAccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.GeneralLedgerAccountID)


# end class BankAccountStructure


class CompanyStructure(GeneratedsSuper):
    """Name, address, contact and identification information of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        RegistrationNumber=None,
        Name=None,
        Address=None,
        Contact=None,
        TaxRegistration=None,
        BankAccount=None,
        extensiontype_=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.RegistrationNumber = RegistrationNumber
        self.validate_SAFmiddle1textType(self.RegistrationNumber)
        self.RegistrationNumber_nsprefix_ = None
        self.Name = Name
        self.validate_SAFmiddle2textType(self.Name)
        self.Name_nsprefix_ = None
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Address_nsprefix_ = None
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        self.Contact_nsprefix_ = None
        if TaxRegistration is None:
            self.TaxRegistration = []
        else:
            self.TaxRegistration = TaxRegistration
        self.TaxRegistration_nsprefix_ = None
        if BankAccount is None:
            self.BankAccount = []
        else:
            self.BankAccount = BankAccount
        self.BankAccount_nsprefix_ = None
        self.extensiontype_ = extensiontype_

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, CompanyStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompanyStructure.subclass:
            return CompanyStructure.subclass(*args_, **kwargs_)
        else:
            return CompanyStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_RegistrationNumber(self):
        return self.RegistrationNumber

    def set_RegistrationNumber(self, RegistrationNumber):
        self.RegistrationNumber = RegistrationNumber

    def get_Name(self):
        return self.Name

    def set_Name(self, Name):
        self.Name = Name

    def get_Address(self):
        return self.Address

    def set_Address(self, Address):
        self.Address = Address

    def add_Address(self, value):
        self.Address.append(value)

    def insert_Address_at(self, index, value):
        self.Address.insert(index, value)

    def replace_Address_at(self, index, value):
        self.Address[index] = value

    def get_Contact(self):
        return self.Contact

    def set_Contact(self, Contact):
        self.Contact = Contact

    def add_Contact(self, value):
        self.Contact.append(value)

    def insert_Contact_at(self, index, value):
        self.Contact.insert(index, value)

    def replace_Contact_at(self, index, value):
        self.Contact[index] = value

    def get_TaxRegistration(self):
        return self.TaxRegistration

    def set_TaxRegistration(self, TaxRegistration):
        self.TaxRegistration = TaxRegistration

    def add_TaxRegistration(self, value):
        self.TaxRegistration.append(value)

    def insert_TaxRegistration_at(self, index, value):
        self.TaxRegistration.insert(index, value)

    def replace_TaxRegistration_at(self, index, value):
        self.TaxRegistration[index] = value

    def get_BankAccount(self):
        return self.BankAccount

    def set_BankAccount(self, BankAccount):
        self.BankAccount = BankAccount

    def add_BankAccount(self, value):
        self.BankAccount.append(value)

    def insert_BankAccount_at(self, index, value):
        self.BankAccount.insert(index, value)

    def replace_BankAccount_at(self, index, value):
        self.BankAccount[index] = value

    def get_extensiontype_(self):
        return self.extensiontype_

    def set_extensiontype_(self, extensiontype_):
        self.extensiontype_ = extensiontype_

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.RegistrationNumber is not None
            or self.Name is not None
            or self.Address
            or self.Contact
            or self.TaxRegistration
            or self.BankAccount
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CompanyStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("CompanyStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "CompanyStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="CompanyStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="CompanyStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="CompanyStructure",
    ):
        if self.extensiontype_ is not None and "xsi:type" not in already_processed:
            already_processed.add("xsi:type")
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(
                    self.extensiontype_, ""
                )
                outfile.write(
                    ' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_)
                )
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CompanyStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.RegistrationNumber is not None:
            namespaceprefix_ = (
                self.RegistrationNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.RegistrationNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sRegistrationNumber>%s</%sRegistrationNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.RegistrationNumber),
                            input_name="RegistrationNumber",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Name is not None:
            namespaceprefix_ = (
                self.Name_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Name_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sName>%s</%sName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Name), input_name="Name")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Address_ in self.Address:
            namespaceprefix_ = (
                self.Address_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Address_nsprefix_)
                else ""
            )
            Address_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Address",
                pretty_print=pretty_print,
            )
        for Contact_ in self.Contact:
            namespaceprefix_ = (
                self.Contact_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Contact_nsprefix_)
                else ""
            )
            Contact_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Contact",
                pretty_print=pretty_print,
            )
        for TaxRegistration_ in self.TaxRegistration:
            namespaceprefix_ = (
                self.TaxRegistration_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxRegistration_nsprefix_)
                else ""
            )
            TaxRegistration_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxRegistration",
                pretty_print=pretty_print,
            )
        for BankAccount_ in self.BankAccount:
            namespaceprefix_ = (
                self.BankAccount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BankAccount_nsprefix_)
                else ""
            )
            BankAccount_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="BankAccount",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_("xsi:type", node)
        if value is not None and "xsi:type" not in already_processed:
            already_processed.add("xsi:type")
            self.extensiontype_ = value

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "RegistrationNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "RegistrationNumber")
            value_ = self.gds_validate_string(value_, node, "RegistrationNumber")
            self.RegistrationNumber = value_
            self.RegistrationNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.RegistrationNumber)
        elif nodeName_ == "Name":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Name")
            value_ = self.gds_validate_string(value_, node, "Name")
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.Name)
        elif nodeName_ == "Address":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address.append(obj_)
            obj_.original_tagname_ = "Address"
        elif nodeName_ == "Contact":
            obj_ = ContactInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = "Contact"
        elif nodeName_ == "TaxRegistration":
            obj_ = TaxIDStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxRegistration.append(obj_)
            obj_.original_tagname_ = "TaxRegistration"
        elif nodeName_ == "BankAccount":
            obj_ = BankAccountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankAccount.append(obj_)
            obj_.original_tagname_ = "BankAccount"


# end class CompanyStructure


class ContactInformationStructure(GeneratedsSuper):
    """Contact information of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        ContactPerson=None,
        Telephone=None,
        Fax=None,
        Email=None,
        Website=None,
        MobilePhone=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.ContactPerson = ContactPerson
        self.ContactPerson_nsprefix_ = None
        self.Telephone = Telephone
        self.validate_SAFshorttextType(self.Telephone)
        self.Telephone_nsprefix_ = None
        self.Fax = Fax
        self.validate_SAFshorttextType(self.Fax)
        self.Fax_nsprefix_ = None
        self.Email = Email
        self.validate_SAFmiddle2textType(self.Email)
        self.Email_nsprefix_ = None
        self.Website = Website
        self.Website_nsprefix_ = None
        self.MobilePhone = MobilePhone
        self.validate_SAFshorttextType(self.MobilePhone)
        self.MobilePhone_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactInformationStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactInformationStructure.subclass:
            return ContactInformationStructure.subclass(*args_, **kwargs_)
        else:
            return ContactInformationStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_ContactPerson(self):
        return self.ContactPerson

    def set_ContactPerson(self, ContactPerson):
        self.ContactPerson = ContactPerson

    def get_Telephone(self):
        return self.Telephone

    def set_Telephone(self, Telephone):
        self.Telephone = Telephone

    def get_Fax(self):
        return self.Fax

    def set_Fax(self, Fax):
        self.Fax = Fax

    def get_Email(self):
        return self.Email

    def set_Email(self, Email):
        self.Email = Email

    def get_Website(self):
        return self.Website

    def set_Website(self, Website):
        self.Website = Website

    def get_MobilePhone(self):
        return self.MobilePhone

    def set_MobilePhone(self, MobilePhone):
        self.MobilePhone = MobilePhone

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.ContactPerson is not None
            or self.Telephone is not None
            or self.Fax is not None
            or self.Email is not None
            or self.Website is not None
            or self.MobilePhone is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ContactInformationStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ContactInformationStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if (
            self.original_tagname_ is not None
            and name_ == "ContactInformationStructure"
        ):
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="ContactInformationStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ContactInformationStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ContactInformationStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ContactInformationStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.ContactPerson is not None:
            namespaceprefix_ = (
                self.ContactPerson_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ContactPerson_nsprefix_)
                else ""
            )
            self.ContactPerson.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ContactPerson",
                pretty_print=pretty_print,
            )
        if self.Telephone is not None:
            namespaceprefix_ = (
                self.Telephone_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Telephone_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTelephone>%s</%sTelephone>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Telephone), input_name="Telephone"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Fax is not None:
            namespaceprefix_ = (
                self.Fax_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Fax_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sFax>%s</%sFax>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Fax), input_name="Fax")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Email is not None:
            namespaceprefix_ = (
                self.Email_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Email_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sEmail>%s</%sEmail>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Email), input_name="Email"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Website is not None:
            namespaceprefix_ = (
                self.Website_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Website_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sWebsite>%s</%sWebsite>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Website), input_name="Website"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MobilePhone is not None:
            namespaceprefix_ = (
                self.MobilePhone_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MobilePhone_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMobilePhone>%s</%sMobilePhone>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MobilePhone), input_name="MobilePhone"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "ContactPerson":
            obj_ = PersonNameStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContactPerson = obj_
            obj_.original_tagname_ = "ContactPerson"
        elif nodeName_ == "Telephone":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Telephone")
            value_ = self.gds_validate_string(value_, node, "Telephone")
            self.Telephone = value_
            self.Telephone_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Telephone)
        elif nodeName_ == "Fax":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Fax")
            value_ = self.gds_validate_string(value_, node, "Fax")
            self.Fax = value_
            self.Fax_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Fax)
        elif nodeName_ == "Email":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Email")
            value_ = self.gds_validate_string(value_, node, "Email")
            self.Email = value_
            self.Email_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.Email)
        elif nodeName_ == "Website":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Website")
            value_ = self.gds_validate_string(value_, node, "Website")
            self.Website = value_
            self.Website_nsprefix_ = child_.prefix
        elif nodeName_ == "MobilePhone":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MobilePhone")
            value_ = self.gds_validate_string(value_, node, "MobilePhone")
            self.MobilePhone = value_
            self.MobilePhone_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.MobilePhone)


# end class ContactInformationStructure


class HeaderStructure(GeneratedsSuper):
    """Overall information about this Standard Auditfile."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AuditFileVersion=None,
        AuditFileCountry=None,
        AuditFileRegion=None,
        AuditFileDateCreated=None,
        SoftwareCompanyName=None,
        SoftwareID=None,
        SoftwareVersion=None,
        Company=None,
        DefaultCurrencyCode=None,
        SelectionCriteria=None,
        HeaderComment=None,
        extensiontype_=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AuditFileVersion = AuditFileVersion
        self.validate_SAFcodeType(self.AuditFileVersion)
        self.AuditFileVersion_nsprefix_ = None
        self.AuditFileCountry = AuditFileCountry
        self.validate_ISOCountryCode(self.AuditFileCountry)
        self.AuditFileCountry_nsprefix_ = None
        self.AuditFileRegion = AuditFileRegion
        self.validate_SAFcodeType(self.AuditFileRegion)
        self.AuditFileRegion_nsprefix_ = None
        if isinstance(AuditFileDateCreated, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                AuditFileDateCreated, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = AuditFileDateCreated
        self.AuditFileDateCreated = initvalue_
        self.AuditFileDateCreated_nsprefix_ = None
        self.SoftwareCompanyName = SoftwareCompanyName
        self.validate_SAFmiddle2textType(self.SoftwareCompanyName)
        self.SoftwareCompanyName_nsprefix_ = None
        self.SoftwareID = SoftwareID
        self.validate_SAFlongtextType(self.SoftwareID)
        self.SoftwareID_nsprefix_ = None
        self.SoftwareVersion = SoftwareVersion
        self.validate_SAFshorttextType(self.SoftwareVersion)
        self.SoftwareVersion_nsprefix_ = None
        self.Company = Company
        self.Company_nsprefix_ = None
        self.DefaultCurrencyCode = DefaultCurrencyCode
        self.validate_ISOCurrencyCode(self.DefaultCurrencyCode)
        self.DefaultCurrencyCode_nsprefix_ = None
        self.SelectionCriteria = SelectionCriteria
        self.SelectionCriteria_nsprefix_ = None
        self.HeaderComment = HeaderComment
        self.validate_SAFlongtextType(self.HeaderComment)
        self.HeaderComment_nsprefix_ = None
        self.extensiontype_ = extensiontype_

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, HeaderStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderStructure.subclass:
            return HeaderStructure.subclass(*args_, **kwargs_)
        else:
            return HeaderStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AuditFileVersion(self):
        return self.AuditFileVersion

    def set_AuditFileVersion(self, AuditFileVersion):
        self.AuditFileVersion = AuditFileVersion

    def get_AuditFileCountry(self):
        return self.AuditFileCountry

    def set_AuditFileCountry(self, AuditFileCountry):
        self.AuditFileCountry = AuditFileCountry

    def get_AuditFileRegion(self):
        return self.AuditFileRegion

    def set_AuditFileRegion(self, AuditFileRegion):
        self.AuditFileRegion = AuditFileRegion

    def get_AuditFileDateCreated(self):
        return self.AuditFileDateCreated

    def set_AuditFileDateCreated(self, AuditFileDateCreated):
        self.AuditFileDateCreated = AuditFileDateCreated

    def get_SoftwareCompanyName(self):
        return self.SoftwareCompanyName

    def set_SoftwareCompanyName(self, SoftwareCompanyName):
        self.SoftwareCompanyName = SoftwareCompanyName

    def get_SoftwareID(self):
        return self.SoftwareID

    def set_SoftwareID(self, SoftwareID):
        self.SoftwareID = SoftwareID

    def get_SoftwareVersion(self):
        return self.SoftwareVersion

    def set_SoftwareVersion(self, SoftwareVersion):
        self.SoftwareVersion = SoftwareVersion

    def get_Company(self):
        return self.Company

    def set_Company(self, Company):
        self.Company = Company

    def get_DefaultCurrencyCode(self):
        return self.DefaultCurrencyCode

    def set_DefaultCurrencyCode(self, DefaultCurrencyCode):
        self.DefaultCurrencyCode = DefaultCurrencyCode

    def get_SelectionCriteria(self):
        return self.SelectionCriteria

    def set_SelectionCriteria(self, SelectionCriteria):
        self.SelectionCriteria = SelectionCriteria

    def get_HeaderComment(self):
        return self.HeaderComment

    def set_HeaderComment(self, HeaderComment):
        self.HeaderComment = HeaderComment

    def get_extensiontype_(self):
        return self.extensiontype_

    def set_extensiontype_(self, extensiontype_):
        self.extensiontype_ = extensiontype_

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCountryCode(self, value):
        result = True
        # Validate type ISOCountryCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCountryCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCurrencyCode(self, value):
        result = True
        # Validate type ISOCurrencyCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCurrencyCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AuditFileVersion is not None
            or self.AuditFileCountry is not None
            or self.AuditFileRegion is not None
            or self.AuditFileDateCreated is not None
            or self.SoftwareCompanyName is not None
            or self.SoftwareID is not None
            or self.SoftwareVersion is not None
            or self.Company is not None
            or self.DefaultCurrencyCode is not None
            or self.SelectionCriteria is not None
            or self.HeaderComment is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="HeaderStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("HeaderStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "HeaderStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="HeaderStructure"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="HeaderStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="HeaderStructure",
    ):
        if self.extensiontype_ is not None and "xsi:type" not in already_processed:
            already_processed.add("xsi:type")
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(
                    self.extensiontype_, ""
                )
                outfile.write(
                    ' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_)
                )
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="HeaderStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AuditFileVersion is not None:
            namespaceprefix_ = (
                self.AuditFileVersion_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AuditFileVersion_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAuditFileVersion>%s</%sAuditFileVersion>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AuditFileVersion),
                            input_name="AuditFileVersion",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AuditFileCountry is not None:
            namespaceprefix_ = (
                self.AuditFileCountry_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AuditFileCountry_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAuditFileCountry>%s</%sAuditFileCountry>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AuditFileCountry),
                            input_name="AuditFileCountry",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AuditFileRegion is not None:
            namespaceprefix_ = (
                self.AuditFileRegion_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AuditFileRegion_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAuditFileRegion>%s</%sAuditFileRegion>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AuditFileRegion),
                            input_name="AuditFileRegion",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AuditFileDateCreated is not None:
            namespaceprefix_ = (
                self.AuditFileDateCreated_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AuditFileDateCreated_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAuditFileDateCreated>%s</%sAuditFileDateCreated>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.AuditFileDateCreated, input_name="AuditFileDateCreated"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SoftwareCompanyName is not None:
            namespaceprefix_ = (
                self.SoftwareCompanyName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SoftwareCompanyName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSoftwareCompanyName>%s</%sSoftwareCompanyName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SoftwareCompanyName),
                            input_name="SoftwareCompanyName",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SoftwareID is not None:
            namespaceprefix_ = (
                self.SoftwareID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SoftwareID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSoftwareID>%s</%sSoftwareID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SoftwareID), input_name="SoftwareID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SoftwareVersion is not None:
            namespaceprefix_ = (
                self.SoftwareVersion_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SoftwareVersion_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSoftwareVersion>%s</%sSoftwareVersion>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SoftwareVersion),
                            input_name="SoftwareVersion",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Company is not None:
            namespaceprefix_ = (
                self.Company_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Company_nsprefix_)
                else ""
            )
            self.Company.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Company",
                pretty_print=pretty_print,
            )
        if self.DefaultCurrencyCode is not None:
            namespaceprefix_ = (
                self.DefaultCurrencyCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DefaultCurrencyCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDefaultCurrencyCode>%s</%sDefaultCurrencyCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DefaultCurrencyCode),
                            input_name="DefaultCurrencyCode",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SelectionCriteria is not None:
            namespaceprefix_ = (
                self.SelectionCriteria_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SelectionCriteria_nsprefix_)
                else ""
            )
            self.SelectionCriteria.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="SelectionCriteria",
                pretty_print=pretty_print,
            )
        if self.HeaderComment is not None:
            namespaceprefix_ = (
                self.HeaderComment_nsprefix_ + ":"
                if (UseCapturedNS_ and self.HeaderComment_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sHeaderComment>%s</%sHeaderComment>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.HeaderComment), input_name="HeaderComment"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_("xsi:type", node)
        if value is not None and "xsi:type" not in already_processed:
            already_processed.add("xsi:type")
            self.extensiontype_ = value

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AuditFileVersion":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AuditFileVersion")
            value_ = self.gds_validate_string(value_, node, "AuditFileVersion")
            self.AuditFileVersion = value_
            self.AuditFileVersion_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.AuditFileVersion)
        elif nodeName_ == "AuditFileCountry":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AuditFileCountry")
            value_ = self.gds_validate_string(value_, node, "AuditFileCountry")
            self.AuditFileCountry = value_
            self.AuditFileCountry_nsprefix_ = child_.prefix
            # validate type ISOCountryCode
            self.validate_ISOCountryCode(self.AuditFileCountry)
        elif nodeName_ == "AuditFileRegion":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AuditFileRegion")
            value_ = self.gds_validate_string(value_, node, "AuditFileRegion")
            self.AuditFileRegion = value_
            self.AuditFileRegion_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.AuditFileRegion)
        elif nodeName_ == "AuditFileDateCreated":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AuditFileDateCreated = dval_
            self.AuditFileDateCreated_nsprefix_ = child_.prefix
        elif nodeName_ == "SoftwareCompanyName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SoftwareCompanyName")
            value_ = self.gds_validate_string(value_, node, "SoftwareCompanyName")
            self.SoftwareCompanyName = value_
            self.SoftwareCompanyName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.SoftwareCompanyName)
        elif nodeName_ == "SoftwareID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SoftwareID")
            value_ = self.gds_validate_string(value_, node, "SoftwareID")
            self.SoftwareID = value_
            self.SoftwareID_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.SoftwareID)
        elif nodeName_ == "SoftwareVersion":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SoftwareVersion")
            value_ = self.gds_validate_string(value_, node, "SoftwareVersion")
            self.SoftwareVersion = value_
            self.SoftwareVersion_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.SoftwareVersion)
        elif nodeName_ == "Company":
            obj_ = CompanyHeaderStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Company = obj_
            obj_.original_tagname_ = "Company"
        elif nodeName_ == "DefaultCurrencyCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DefaultCurrencyCode")
            value_ = self.gds_validate_string(value_, node, "DefaultCurrencyCode")
            self.DefaultCurrencyCode = value_
            self.DefaultCurrencyCode_nsprefix_ = child_.prefix
            # validate type ISOCurrencyCode
            self.validate_ISOCurrencyCode(self.DefaultCurrencyCode)
        elif nodeName_ == "SelectionCriteria":
            obj_ = SelectionCriteriaStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SelectionCriteria = obj_
            obj_.original_tagname_ = "SelectionCriteria"
        elif nodeName_ == "HeaderComment":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "HeaderComment")
            value_ = self.gds_validate_string(value_, node, "HeaderComment")
            self.HeaderComment = value_
            self.HeaderComment_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.HeaderComment)


# end class HeaderStructure


class PartyInfoStructure(GeneratedsSuper):
    """Additional party information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        PaymentTerms=None,
        NaceCode=None,
        CurrencyCode=None,
        Type=None,
        Status=None,
        Analysis=None,
        Notes=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.PaymentTerms = PaymentTerms
        self.PaymentTerms_nsprefix_ = None
        self.NaceCode = NaceCode
        self.validate_SAFshorttextType(self.NaceCode)
        self.NaceCode_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.validate_ISOCurrencyCode(self.CurrencyCode)
        self.CurrencyCode_nsprefix_ = None
        self.Type = Type
        self.validate_TypeType(self.Type)
        self.Type_nsprefix_ = None
        self.Status = Status
        self.validate_StatusType11(self.Status)
        self.Status_nsprefix_ = None
        if Analysis is None:
            self.Analysis = []
        else:
            self.Analysis = Analysis
        self.Analysis_nsprefix_ = None
        self.Notes = Notes
        self.Notes_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PartyInfoStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PartyInfoStructure.subclass:
            return PartyInfoStructure.subclass(*args_, **kwargs_)
        else:
            return PartyInfoStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_PaymentTerms(self):
        return self.PaymentTerms

    def set_PaymentTerms(self, PaymentTerms):
        self.PaymentTerms = PaymentTerms

    def get_NaceCode(self):
        return self.NaceCode

    def set_NaceCode(self, NaceCode):
        self.NaceCode = NaceCode

    def get_CurrencyCode(self):
        return self.CurrencyCode

    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode

    def get_Type(self):
        return self.Type

    def set_Type(self, Type):
        self.Type = Type

    def get_Status(self):
        return self.Status

    def set_Status(self, Status):
        self.Status = Status

    def get_Analysis(self):
        return self.Analysis

    def set_Analysis(self, Analysis):
        self.Analysis = Analysis

    def add_Analysis(self, value):
        self.Analysis.append(value)

    def insert_Analysis_at(self, index, value):
        self.Analysis.insert(index, value)

    def replace_Analysis_at(self, index, value):
        self.Analysis[index] = value

    def get_Notes(self):
        return self.Notes

    def set_Notes(self, Notes):
        self.Notes = Notes

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCurrencyCode(self, value):
        result = True
        # Validate type ISOCurrencyCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCurrencyCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_TypeType(self, value):
        result = True
        # Validate type TypeType, a restriction on SAFmiddle1textType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["Private", "Company", "Government"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TypeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TypeType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_StatusType11(self, value):
        result = True
        # Validate type StatusType11, a restriction on SAFmiddle1textType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["Active", "Observation", "Passive"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StatusType11'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on StatusType11'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.PaymentTerms is not None
            or self.NaceCode is not None
            or self.CurrencyCode is not None
            or self.Type is not None
            or self.Status is not None
            or self.Analysis
            or self.Notes is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PartyInfoStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PartyInfoStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PartyInfoStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="PartyInfoStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PartyInfoStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PartyInfoStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PartyInfoStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.PaymentTerms is not None:
            namespaceprefix_ = (
                self.PaymentTerms_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentTerms_nsprefix_)
                else ""
            )
            self.PaymentTerms.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PaymentTerms",
                pretty_print=pretty_print,
            )
        if self.NaceCode is not None:
            namespaceprefix_ = (
                self.NaceCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NaceCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNaceCode>%s</%sNaceCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.NaceCode), input_name="NaceCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CurrencyCode is not None:
            namespaceprefix_ = (
                self.CurrencyCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CurrencyCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCurrencyCode>%s</%sCurrencyCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CurrencyCode), input_name="CurrencyCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Type is not None:
            namespaceprefix_ = (
                self.Type_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Type_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sType>%s</%sType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Type), input_name="Type")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Status is not None:
            namespaceprefix_ = (
                self.Status_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Status_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStatus>%s</%sStatus>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Status), input_name="Status"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Analysis_ in self.Analysis:
            namespaceprefix_ = (
                self.Analysis_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Analysis_nsprefix_)
                else ""
            )
            Analysis_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Analysis",
                pretty_print=pretty_print,
            )
        if self.Notes is not None:
            namespaceprefix_ = (
                self.Notes_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Notes_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNotes>%s</%sNotes>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Notes), input_name="Notes"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "PaymentTerms":
            obj_ = PaymentTermsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentTerms = obj_
            obj_.original_tagname_ = "PaymentTerms"
        elif nodeName_ == "NaceCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "NaceCode")
            value_ = self.gds_validate_string(value_, node, "NaceCode")
            self.NaceCode = value_
            self.NaceCode_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.NaceCode)
        elif nodeName_ == "CurrencyCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CurrencyCode")
            value_ = self.gds_validate_string(value_, node, "CurrencyCode")
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
            # validate type ISOCurrencyCode
            self.validate_ISOCurrencyCode(self.CurrencyCode)
        elif nodeName_ == "Type":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Type")
            value_ = self.gds_validate_string(value_, node, "Type")
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TypeType
            self.validate_TypeType(self.Type)
        elif nodeName_ == "Status":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Status")
            value_ = self.gds_validate_string(value_, node, "Status")
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
            # validate type StatusType11
            self.validate_StatusType11(self.Status)
        elif nodeName_ == "Analysis":
            obj_ = AnalysisPartyInfoStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Analysis.append(obj_)
            obj_.original_tagname_ = "Analysis"
        elif nodeName_ == "Notes":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Notes")
            value_ = self.gds_validate_string(value_, node, "Notes")
            self.Notes = value_
            self.Notes_nsprefix_ = child_.prefix


# end class PartyInfoStructure


class PersonNameStructure(GeneratedsSuper):
    """All information about the name of a natural person."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        Title=None,
        FirstName=None,
        Initials=None,
        LastNamePrefix=None,
        LastName=None,
        BirthName=None,
        Salutation=None,
        OtherTitles=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.Title = Title
        self.validate_SAFcodeType(self.Title)
        self.Title_nsprefix_ = None
        self.FirstName = FirstName
        self.validate_SAFmiddle1textType(self.FirstName)
        self.FirstName_nsprefix_ = None
        self.Initials = Initials
        self.validate_SAFshorttextType(self.Initials)
        self.Initials_nsprefix_ = None
        self.LastNamePrefix = LastNamePrefix
        self.validate_SAFshorttextType(self.LastNamePrefix)
        self.LastNamePrefix_nsprefix_ = None
        self.LastName = LastName
        self.validate_SAFmiddle2textType(self.LastName)
        self.LastName_nsprefix_ = None
        self.BirthName = BirthName
        self.validate_SAFmiddle2textType(self.BirthName)
        self.BirthName_nsprefix_ = None
        self.Salutation = Salutation
        self.validate_SAFshorttextType(self.Salutation)
        self.Salutation_nsprefix_ = None
        if OtherTitles is None:
            self.OtherTitles = []
        else:
            self.OtherTitles = OtherTitles
        self.OtherTitles_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PersonNameStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PersonNameStructure.subclass:
            return PersonNameStructure.subclass(*args_, **kwargs_)
        else:
            return PersonNameStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Title(self):
        return self.Title

    def set_Title(self, Title):
        self.Title = Title

    def get_FirstName(self):
        return self.FirstName

    def set_FirstName(self, FirstName):
        self.FirstName = FirstName

    def get_Initials(self):
        return self.Initials

    def set_Initials(self, Initials):
        self.Initials = Initials

    def get_LastNamePrefix(self):
        return self.LastNamePrefix

    def set_LastNamePrefix(self, LastNamePrefix):
        self.LastNamePrefix = LastNamePrefix

    def get_LastName(self):
        return self.LastName

    def set_LastName(self, LastName):
        self.LastName = LastName

    def get_BirthName(self):
        return self.BirthName

    def set_BirthName(self, BirthName):
        self.BirthName = BirthName

    def get_Salutation(self):
        return self.Salutation

    def set_Salutation(self, Salutation):
        self.Salutation = Salutation

    def get_OtherTitles(self):
        return self.OtherTitles

    def set_OtherTitles(self, OtherTitles):
        self.OtherTitles = OtherTitles

    def add_OtherTitles(self, value):
        self.OtherTitles.append(value)

    def insert_OtherTitles_at(self, index, value):
        self.OtherTitles.insert(index, value)

    def replace_OtherTitles_at(self, index, value):
        self.OtherTitles[index] = value

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.Title is not None
            or self.FirstName is not None
            or self.Initials is not None
            or self.LastNamePrefix is not None
            or self.LastName is not None
            or self.BirthName is not None
            or self.Salutation is not None
            or self.OtherTitles
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PersonNameStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PersonNameStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PersonNameStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="PersonNameStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PersonNameStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PersonNameStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PersonNameStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.Title is not None:
            namespaceprefix_ = (
                self.Title_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Title_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTitle>%s</%sTitle>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Title), input_name="Title"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.FirstName is not None:
            namespaceprefix_ = (
                self.FirstName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.FirstName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sFirstName>%s</%sFirstName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.FirstName), input_name="FirstName"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Initials is not None:
            namespaceprefix_ = (
                self.Initials_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Initials_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sInitials>%s</%sInitials>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Initials), input_name="Initials"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.LastNamePrefix is not None:
            namespaceprefix_ = (
                self.LastNamePrefix_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LastNamePrefix_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLastNamePrefix>%s</%sLastNamePrefix>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LastNamePrefix), input_name="LastNamePrefix"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.LastName is not None:
            namespaceprefix_ = (
                self.LastName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LastName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLastName>%s</%sLastName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LastName), input_name="LastName"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BirthName is not None:
            namespaceprefix_ = (
                self.BirthName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BirthName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBirthName>%s</%sBirthName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BirthName), input_name="BirthName"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Salutation is not None:
            namespaceprefix_ = (
                self.Salutation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Salutation_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSalutation>%s</%sSalutation>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Salutation), input_name="Salutation"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for OtherTitles_ in self.OtherTitles:
            namespaceprefix_ = (
                self.OtherTitles_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OtherTitles_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOtherTitles>%s</%sOtherTitles>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(OtherTitles_), input_name="OtherTitles"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Title":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Title")
            value_ = self.gds_validate_string(value_, node, "Title")
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.Title)
        elif nodeName_ == "FirstName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "FirstName")
            value_ = self.gds_validate_string(value_, node, "FirstName")
            self.FirstName = value_
            self.FirstName_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.FirstName)
        elif nodeName_ == "Initials":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Initials")
            value_ = self.gds_validate_string(value_, node, "Initials")
            self.Initials = value_
            self.Initials_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Initials)
        elif nodeName_ == "LastNamePrefix":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LastNamePrefix")
            value_ = self.gds_validate_string(value_, node, "LastNamePrefix")
            self.LastNamePrefix = value_
            self.LastNamePrefix_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.LastNamePrefix)
        elif nodeName_ == "LastName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LastName")
            value_ = self.gds_validate_string(value_, node, "LastName")
            self.LastName = value_
            self.LastName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.LastName)
        elif nodeName_ == "BirthName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BirthName")
            value_ = self.gds_validate_string(value_, node, "BirthName")
            self.BirthName = value_
            self.BirthName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.BirthName)
        elif nodeName_ == "Salutation":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Salutation")
            value_ = self.gds_validate_string(value_, node, "Salutation")
            self.Salutation = value_
            self.Salutation_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Salutation)
        elif nodeName_ == "OtherTitles":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "OtherTitles")
            value_ = self.gds_validate_string(value_, node, "OtherTitles")
            self.OtherTitles.append(value_)
            self.OtherTitles_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.OtherTitles[-1])


# end class PersonNameStructure


class SelectionCriteriaStructure(GeneratedsSuper):
    """The selection criteria used to generate this Standard Auditfile.Allows
    for a choice between selection on calendar dates and periods according
    to the accounting system, e.g. 1 to 12 for a 12-months accounting
    system."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxReportingJurisdiction=None,
        CompanyEntity=None,
        SelectionStartDate=None,
        SelectionEndDate=None,
        PeriodStart=None,
        PeriodStartYear=None,
        PeriodEnd=None,
        PeriodEndYear=None,
        DocumentType=None,
        OtherCriteria=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxReportingJurisdiction = TaxReportingJurisdiction
        self.validate_SAFmiddle1textType(self.TaxReportingJurisdiction)
        self.TaxReportingJurisdiction_nsprefix_ = None
        self.CompanyEntity = CompanyEntity
        self.validate_SAFmiddle2textType(self.CompanyEntity)
        self.CompanyEntity_nsprefix_ = None
        if isinstance(SelectionStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                SelectionStartDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = SelectionStartDate
        self.SelectionStartDate = initvalue_
        self.SelectionStartDate_nsprefix_ = None
        if isinstance(SelectionEndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                SelectionEndDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = SelectionEndDate
        self.SelectionEndDate = initvalue_
        self.SelectionEndDate_nsprefix_ = None
        self.PeriodStart = PeriodStart
        self.PeriodStart_nsprefix_ = None
        self.PeriodStartYear = PeriodStartYear
        self.validate_PeriodStartYearType(self.PeriodStartYear)
        self.PeriodStartYear_nsprefix_ = None
        self.PeriodEnd = PeriodEnd
        self.PeriodEnd_nsprefix_ = None
        self.PeriodEndYear = PeriodEndYear
        self.validate_PeriodEndYearType(self.PeriodEndYear)
        self.PeriodEndYear_nsprefix_ = None
        self.DocumentType = DocumentType
        self.validate_SAFlongtextType(self.DocumentType)
        self.DocumentType_nsprefix_ = None
        if OtherCriteria is None:
            self.OtherCriteria = []
        else:
            self.OtherCriteria = OtherCriteria
        self.OtherCriteria_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SelectionCriteriaStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SelectionCriteriaStructure.subclass:
            return SelectionCriteriaStructure.subclass(*args_, **kwargs_)
        else:
            return SelectionCriteriaStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxReportingJurisdiction(self):
        return self.TaxReportingJurisdiction

    def set_TaxReportingJurisdiction(self, TaxReportingJurisdiction):
        self.TaxReportingJurisdiction = TaxReportingJurisdiction

    def get_CompanyEntity(self):
        return self.CompanyEntity

    def set_CompanyEntity(self, CompanyEntity):
        self.CompanyEntity = CompanyEntity

    def get_SelectionStartDate(self):
        return self.SelectionStartDate

    def set_SelectionStartDate(self, SelectionStartDate):
        self.SelectionStartDate = SelectionStartDate

    def get_SelectionEndDate(self):
        return self.SelectionEndDate

    def set_SelectionEndDate(self, SelectionEndDate):
        self.SelectionEndDate = SelectionEndDate

    def get_PeriodStart(self):
        return self.PeriodStart

    def set_PeriodStart(self, PeriodStart):
        self.PeriodStart = PeriodStart

    def get_PeriodStartYear(self):
        return self.PeriodStartYear

    def set_PeriodStartYear(self, PeriodStartYear):
        self.PeriodStartYear = PeriodStartYear

    def get_PeriodEnd(self):
        return self.PeriodEnd

    def set_PeriodEnd(self, PeriodEnd):
        self.PeriodEnd = PeriodEnd

    def get_PeriodEndYear(self):
        return self.PeriodEndYear

    def set_PeriodEndYear(self, PeriodEndYear):
        self.PeriodEndYear = PeriodEndYear

    def get_DocumentType(self):
        return self.DocumentType

    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType

    def get_OtherCriteria(self):
        return self.OtherCriteria

    def set_OtherCriteria(self, OtherCriteria):
        self.OtherCriteria = OtherCriteria

    def add_OtherCriteria(self, value):
        self.OtherCriteria.append(value)

    def insert_OtherCriteria_at(self, index, value):
        self.OtherCriteria.insert(index, value)

    def replace_OtherCriteria_at(self, index, value):
        self.OtherCriteria[index] = value

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_PeriodStartYearType(self, value):
        result = True
        # Validate type PeriodStartYearType, a restriction on xs:nonNegativeInteger.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 1970:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PeriodStartYearType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 2100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on PeriodStartYearType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_PeriodEndYearType(self, value):
        result = True
        # Validate type PeriodEndYearType, a restriction on xs:nonNegativeInteger.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 1970:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PeriodEndYearType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 2100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on PeriodEndYearType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxReportingJurisdiction is not None
            or self.CompanyEntity is not None
            or self.SelectionStartDate is not None
            or self.SelectionEndDate is not None
            or self.PeriodStart is not None
            or self.PeriodStartYear is not None
            or self.PeriodEnd is not None
            or self.PeriodEndYear is not None
            or self.DocumentType is not None
            or self.OtherCriteria
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SelectionCriteriaStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SelectionCriteriaStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SelectionCriteriaStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="SelectionCriteriaStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SelectionCriteriaStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SelectionCriteriaStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SelectionCriteriaStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxReportingJurisdiction is not None:
            namespaceprefix_ = (
                self.TaxReportingJurisdiction_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxReportingJurisdiction_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxReportingJurisdiction>%s</%sTaxReportingJurisdiction>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxReportingJurisdiction),
                            input_name="TaxReportingJurisdiction",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CompanyEntity is not None:
            namespaceprefix_ = (
                self.CompanyEntity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CompanyEntity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCompanyEntity>%s</%sCompanyEntity>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CompanyEntity), input_name="CompanyEntity"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SelectionStartDate is not None:
            namespaceprefix_ = (
                self.SelectionStartDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SelectionStartDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSelectionStartDate>%s</%sSelectionStartDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.SelectionStartDate, input_name="SelectionStartDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SelectionEndDate is not None:
            namespaceprefix_ = (
                self.SelectionEndDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SelectionEndDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSelectionEndDate>%s</%sSelectionEndDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.SelectionEndDate, input_name="SelectionEndDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodStart is not None:
            namespaceprefix_ = (
                self.PeriodStart_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodStart_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodStart>%s</%sPeriodStart>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.PeriodStart, input_name="PeriodStart"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodStartYear is not None:
            namespaceprefix_ = (
                self.PeriodStartYear_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodStartYear_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodStartYear>%s</%sPeriodStartYear>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.PeriodStartYear, input_name="PeriodStartYear"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodEnd is not None:
            namespaceprefix_ = (
                self.PeriodEnd_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodEnd_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodEnd>%s</%sPeriodEnd>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.PeriodEnd, input_name="PeriodEnd"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodEndYear is not None:
            namespaceprefix_ = (
                self.PeriodEndYear_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodEndYear_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodEndYear>%s</%sPeriodEndYear>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.PeriodEndYear, input_name="PeriodEndYear"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DocumentType is not None:
            namespaceprefix_ = (
                self.DocumentType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDocumentType>%s</%sDocumentType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DocumentType), input_name="DocumentType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for OtherCriteria_ in self.OtherCriteria:
            namespaceprefix_ = (
                self.OtherCriteria_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OtherCriteria_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOtherCriteria>%s</%sOtherCriteria>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(OtherCriteria_), input_name="OtherCriteria"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxReportingJurisdiction":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxReportingJurisdiction")
            value_ = self.gds_validate_string(value_, node, "TaxReportingJurisdiction")
            self.TaxReportingJurisdiction = value_
            self.TaxReportingJurisdiction_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.TaxReportingJurisdiction)
        elif nodeName_ == "CompanyEntity":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CompanyEntity")
            value_ = self.gds_validate_string(value_, node, "CompanyEntity")
            self.CompanyEntity = value_
            self.CompanyEntity_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.CompanyEntity)
        elif nodeName_ == "SelectionStartDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SelectionStartDate = dval_
            self.SelectionStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == "SelectionEndDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SelectionEndDate = dval_
            self.SelectionEndDate_nsprefix_ = child_.prefix
        elif nodeName_ == "PeriodStart" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodStart")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodStart")
            self.PeriodStart = ival_
            self.PeriodStart_nsprefix_ = child_.prefix
        elif nodeName_ == "PeriodStartYear" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodStartYear")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodStartYear")
            self.PeriodStartYear = ival_
            self.PeriodStartYear_nsprefix_ = child_.prefix
            # validate type PeriodStartYearType
            self.validate_PeriodStartYearType(self.PeriodStartYear)
        elif nodeName_ == "PeriodEnd" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodEnd")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodEnd")
            self.PeriodEnd = ival_
            self.PeriodEnd_nsprefix_ = child_.prefix
        elif nodeName_ == "PeriodEndYear" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodEndYear")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodEndYear")
            self.PeriodEndYear = ival_
            self.PeriodEndYear_nsprefix_ = child_.prefix
            # validate type PeriodEndYearType
            self.validate_PeriodEndYearType(self.PeriodEndYear)
        elif nodeName_ == "DocumentType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DocumentType")
            value_ = self.gds_validate_string(value_, node, "DocumentType")
            self.DocumentType = value_
            self.DocumentType_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.DocumentType)
        elif nodeName_ == "OtherCriteria":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "OtherCriteria")
            value_ = self.gds_validate_string(value_, node, "OtherCriteria")
            self.OtherCriteria.append(value_)
            self.OtherCriteria_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.OtherCriteria[-1])


# end class SelectionCriteriaStructure


class TaxIDStructure(GeneratedsSuper):
    """Tax information of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxRegistrationNumber=None,
        TaxType=None,
        TaxNumber=None,
        TaxAuthority=None,
        TaxVerificationDate=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxRegistrationNumber = TaxRegistrationNumber
        self.validate_SAFmiddle1textType(self.TaxRegistrationNumber)
        self.TaxRegistrationNumber_nsprefix_ = None
        self.TaxType = TaxType
        self.validate_SAFcodeType(self.TaxType)
        self.TaxType_nsprefix_ = None
        self.TaxNumber = TaxNumber
        self.validate_SAFmiddle1textType(self.TaxNumber)
        self.TaxNumber_nsprefix_ = None
        self.TaxAuthority = TaxAuthority
        self.validate_TaxAuthorityType(self.TaxAuthority)
        self.TaxAuthority_nsprefix_ = None
        if isinstance(TaxVerificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                TaxVerificationDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = TaxVerificationDate
        self.TaxVerificationDate = initvalue_
        self.TaxVerificationDate_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TaxIDStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDStructure.subclass:
            return TaxIDStructure.subclass(*args_, **kwargs_)
        else:
            return TaxIDStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxRegistrationNumber(self):
        return self.TaxRegistrationNumber

    def set_TaxRegistrationNumber(self, TaxRegistrationNumber):
        self.TaxRegistrationNumber = TaxRegistrationNumber

    def get_TaxType(self):
        return self.TaxType

    def set_TaxType(self, TaxType):
        self.TaxType = TaxType

    def get_TaxNumber(self):
        return self.TaxNumber

    def set_TaxNumber(self, TaxNumber):
        self.TaxNumber = TaxNumber

    def get_TaxAuthority(self):
        return self.TaxAuthority

    def set_TaxAuthority(self, TaxAuthority):
        self.TaxAuthority = TaxAuthority

    def get_TaxVerificationDate(self):
        return self.TaxVerificationDate

    def set_TaxVerificationDate(self, TaxVerificationDate):
        self.TaxVerificationDate = TaxVerificationDate

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_TaxAuthorityType(self, value):
        result = True
        # Validate type TaxAuthorityType, a restriction on SAFmiddle1textType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["Skatteetaten"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxAuthorityType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TaxAuthorityType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxRegistrationNumber is not None
            or self.TaxType is not None
            or self.TaxNumber is not None
            or self.TaxAuthority is not None
            or self.TaxVerificationDate is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxIDStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxIDStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxIDStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="TaxIDStructure"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxIDStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxIDStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxIDStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxRegistrationNumber is not None:
            namespaceprefix_ = (
                self.TaxRegistrationNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxRegistrationNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxRegistrationNumber>%s</%sTaxRegistrationNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxRegistrationNumber),
                            input_name="TaxRegistrationNumber",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxType is not None:
            namespaceprefix_ = (
                self.TaxType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxType>%s</%sTaxType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxType), input_name="TaxType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxNumber is not None:
            namespaceprefix_ = (
                self.TaxNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxNumber>%s</%sTaxNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxNumber), input_name="TaxNumber"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxAuthority is not None:
            namespaceprefix_ = (
                self.TaxAuthority_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxAuthority_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxAuthority>%s</%sTaxAuthority>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxAuthority), input_name="TaxAuthority"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxVerificationDate is not None:
            namespaceprefix_ = (
                self.TaxVerificationDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxVerificationDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxVerificationDate>%s</%sTaxVerificationDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.TaxVerificationDate, input_name="TaxVerificationDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxRegistrationNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxRegistrationNumber")
            value_ = self.gds_validate_string(value_, node, "TaxRegistrationNumber")
            self.TaxRegistrationNumber = value_
            self.TaxRegistrationNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.TaxRegistrationNumber)
        elif nodeName_ == "TaxType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxType")
            value_ = self.gds_validate_string(value_, node, "TaxType")
            self.TaxType = value_
            self.TaxType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.TaxType)
        elif nodeName_ == "TaxNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxNumber")
            value_ = self.gds_validate_string(value_, node, "TaxNumber")
            self.TaxNumber = value_
            self.TaxNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.TaxNumber)
        elif nodeName_ == "TaxAuthority":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxAuthority")
            value_ = self.gds_validate_string(value_, node, "TaxAuthority")
            self.TaxAuthority = value_
            self.TaxAuthority_nsprefix_ = child_.prefix
            # validate type TaxAuthorityType
            self.validate_TaxAuthorityType(self.TaxAuthority)
        elif nodeName_ == "TaxVerificationDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TaxVerificationDate = dval_
            self.TaxVerificationDate_nsprefix_ = child_.prefix


# end class TaxIDStructure


class TaxInformationStructure(GeneratedsSuper):
    """Tax Amount information structure."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxType=None,
        TaxCode=None,
        TaxPercentage=None,
        TaxBase=None,
        TaxBaseDescription=None,
        TaxAmount=None,
        TaxExemptionReason=None,
        TaxDeclarationPeriod=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxType = TaxType
        self.validate_TaxTypeType12(self.TaxType)
        self.TaxType_nsprefix_ = None
        self.TaxCode = TaxCode
        self.validate_SAFcodeType(self.TaxCode)
        self.TaxCode_nsprefix_ = None
        self.TaxPercentage = TaxPercentage
        self.TaxPercentage_nsprefix_ = None
        self.TaxBase = TaxBase
        self.TaxBase_nsprefix_ = None
        self.TaxBaseDescription = TaxBaseDescription
        self.validate_SAFmiddle2textType(self.TaxBaseDescription)
        self.TaxBaseDescription_nsprefix_ = None
        self.TaxAmount = TaxAmount
        self.TaxAmount_nsprefix_ = None
        self.TaxExemptionReason = TaxExemptionReason
        self.validate_SAFmiddle2textType(self.TaxExemptionReason)
        self.TaxExemptionReason_nsprefix_ = None
        self.TaxDeclarationPeriod = TaxDeclarationPeriod
        self.validate_SAFmiddle1textType(self.TaxDeclarationPeriod)
        self.TaxDeclarationPeriod_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxInformationStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxInformationStructure.subclass:
            return TaxInformationStructure.subclass(*args_, **kwargs_)
        else:
            return TaxInformationStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxType(self):
        return self.TaxType

    def set_TaxType(self, TaxType):
        self.TaxType = TaxType

    def get_TaxCode(self):
        return self.TaxCode

    def set_TaxCode(self, TaxCode):
        self.TaxCode = TaxCode

    def get_TaxPercentage(self):
        return self.TaxPercentage

    def set_TaxPercentage(self, TaxPercentage):
        self.TaxPercentage = TaxPercentage

    def get_TaxBase(self):
        return self.TaxBase

    def set_TaxBase(self, TaxBase):
        self.TaxBase = TaxBase

    def get_TaxBaseDescription(self):
        return self.TaxBaseDescription

    def set_TaxBaseDescription(self, TaxBaseDescription):
        self.TaxBaseDescription = TaxBaseDescription

    def get_TaxAmount(self):
        return self.TaxAmount

    def set_TaxAmount(self, TaxAmount):
        self.TaxAmount = TaxAmount

    def get_TaxExemptionReason(self):
        return self.TaxExemptionReason

    def set_TaxExemptionReason(self, TaxExemptionReason):
        self.TaxExemptionReason = TaxExemptionReason

    def get_TaxDeclarationPeriod(self):
        return self.TaxDeclarationPeriod

    def set_TaxDeclarationPeriod(self, TaxDeclarationPeriod):
        self.TaxDeclarationPeriod = TaxDeclarationPeriod

    def validate_TaxTypeType12(self, value):
        result = True
        # Validate type TaxTypeType12, a restriction on SAFcodeType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["MVA"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxTypeType12'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TaxTypeType12'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxType is not None
            or self.TaxCode is not None
            or self.TaxPercentage is not None
            or self.TaxBase is not None
            or self.TaxBaseDescription is not None
            or self.TaxAmount is not None
            or self.TaxExemptionReason is not None
            or self.TaxDeclarationPeriod is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxInformationStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxInformationStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxInformationStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="TaxInformationStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxInformationStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxInformationStructure",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxInformationStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxType is not None:
            namespaceprefix_ = (
                self.TaxType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxType>%s</%sTaxType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxType), input_name="TaxType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxCode is not None:
            namespaceprefix_ = (
                self.TaxCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxCode>%s</%sTaxCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxCode), input_name="TaxCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxPercentage is not None:
            namespaceprefix_ = (
                self.TaxPercentage_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxPercentage_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxPercentage>%s</%sTaxPercentage>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.TaxPercentage, input_name="TaxPercentage"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxBase is not None:
            namespaceprefix_ = (
                self.TaxBase_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxBase_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxBase>%s</%sTaxBase>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TaxBase, input_name="TaxBase"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxBaseDescription is not None:
            namespaceprefix_ = (
                self.TaxBaseDescription_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxBaseDescription_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxBaseDescription>%s</%sTaxBaseDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxBaseDescription),
                            input_name="TaxBaseDescription",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxAmount is not None:
            namespaceprefix_ = (
                self.TaxAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxAmount_nsprefix_)
                else ""
            )
            self.TaxAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxAmount",
                pretty_print=pretty_print,
            )
        if self.TaxExemptionReason is not None:
            namespaceprefix_ = (
                self.TaxExemptionReason_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxExemptionReason_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxExemptionReason>%s</%sTaxExemptionReason>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxExemptionReason),
                            input_name="TaxExemptionReason",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxDeclarationPeriod is not None:
            namespaceprefix_ = (
                self.TaxDeclarationPeriod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxDeclarationPeriod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxDeclarationPeriod>%s</%sTaxDeclarationPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxDeclarationPeriod),
                            input_name="TaxDeclarationPeriod",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxType")
            value_ = self.gds_validate_string(value_, node, "TaxType")
            self.TaxType = value_
            self.TaxType_nsprefix_ = child_.prefix
            # validate type TaxTypeType12
            self.validate_TaxTypeType12(self.TaxType)
        elif nodeName_ == "TaxCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxCode")
            value_ = self.gds_validate_string(value_, node, "TaxCode")
            self.TaxCode = value_
            self.TaxCode_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.TaxCode)
        elif nodeName_ == "TaxPercentage" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TaxPercentage")
            fval_ = self.gds_validate_decimal(fval_, node, "TaxPercentage")
            self.TaxPercentage = fval_
            self.TaxPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == "TaxBase" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TaxBase")
            fval_ = self.gds_validate_decimal(fval_, node, "TaxBase")
            self.TaxBase = fval_
            self.TaxBase_nsprefix_ = child_.prefix
        elif nodeName_ == "TaxBaseDescription":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxBaseDescription")
            value_ = self.gds_validate_string(value_, node, "TaxBaseDescription")
            self.TaxBaseDescription = value_
            self.TaxBaseDescription_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TaxBaseDescription)
        elif nodeName_ == "TaxAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = "TaxAmount"
        elif nodeName_ == "TaxExemptionReason":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxExemptionReason")
            value_ = self.gds_validate_string(value_, node, "TaxExemptionReason")
            self.TaxExemptionReason = value_
            self.TaxExemptionReason_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TaxExemptionReason)
        elif nodeName_ == "TaxDeclarationPeriod":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxDeclarationPeriod")
            value_ = self.gds_validate_string(value_, node, "TaxDeclarationPeriod")
            self.TaxDeclarationPeriod = value_
            self.TaxDeclarationPeriod_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.TaxDeclarationPeriod)


# end class TaxInformationStructure


class HeaderType(HeaderStructure):
    """Overall information about this Standard Audit file."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = HeaderStructure

    def __init__(
        self,
        AuditFileVersion=None,
        AuditFileCountry=None,
        AuditFileRegion=None,
        AuditFileDateCreated=None,
        SoftwareCompanyName=None,
        SoftwareID=None,
        SoftwareVersion=None,
        Company=None,
        DefaultCurrencyCode=None,
        SelectionCriteria=None,
        HeaderComment=None,
        TaxAccountingBasis=None,
        TaxEntity=None,
        UserID=None,
        AuditFileSender=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("HeaderType"), self).__init__(
            AuditFileVersion,
            AuditFileCountry,
            AuditFileRegion,
            AuditFileDateCreated,
            SoftwareCompanyName,
            SoftwareID,
            SoftwareVersion,
            Company,
            DefaultCurrencyCode,
            SelectionCriteria,
            HeaderComment,
            **kwargs_
        )
        self.TaxAccountingBasis = TaxAccountingBasis
        self.validate_TaxAccountingBasisType(self.TaxAccountingBasis)
        self.TaxAccountingBasis_nsprefix_ = None
        self.TaxEntity = TaxEntity
        self.validate_SAFmiddle2textType(self.TaxEntity)
        self.TaxEntity_nsprefix_ = None
        self.UserID = UserID
        self.validate_SAFmiddle1textType(self.UserID)
        self.UserID_nsprefix_ = None
        self.AuditFileSender = AuditFileSender
        self.AuditFileSender_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxAccountingBasis(self):
        return self.TaxAccountingBasis

    def set_TaxAccountingBasis(self, TaxAccountingBasis):
        self.TaxAccountingBasis = TaxAccountingBasis

    def get_TaxEntity(self):
        return self.TaxEntity

    def set_TaxEntity(self, TaxEntity):
        self.TaxEntity = TaxEntity

    def get_UserID(self):
        return self.UserID

    def set_UserID(self, UserID):
        self.UserID = UserID

    def get_AuditFileSender(self):
        return self.AuditFileSender

    def set_AuditFileSender(self, AuditFileSender):
        self.AuditFileSender = AuditFileSender

    def validate_TaxAccountingBasisType(self, value):
        result = True
        # Validate type TaxAccountingBasisType, a restriction on SAFshorttextType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["A"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxAccountingBasisType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TaxAccountingBasisType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxAccountingBasis is not None
            or self.TaxEntity is not None
            or self.UserID is not None
            or self.AuditFileSender is not None
            or super(HeaderType, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="HeaderType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("HeaderType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "HeaderType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="HeaderType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="HeaderType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="HeaderType"
    ):
        super(HeaderType, self).exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="HeaderType"
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="HeaderType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        super(HeaderType, self).exportChildren(
            outfile,
            level,
            namespaceprefix_,
            namespacedef_,
            name_,
            True,
            pretty_print=pretty_print,
        )
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxAccountingBasis is not None:
            namespaceprefix_ = (
                self.TaxAccountingBasis_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxAccountingBasis_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxAccountingBasis>%s</%sTaxAccountingBasis>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxAccountingBasis),
                            input_name="TaxAccountingBasis",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxEntity is not None:
            namespaceprefix_ = (
                self.TaxEntity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxEntity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxEntity>%s</%sTaxEntity>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxEntity), input_name="TaxEntity"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UserID is not None:
            namespaceprefix_ = (
                self.UserID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UserID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUserID>%s</%sUserID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.UserID), input_name="UserID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AuditFileSender is not None:
            namespaceprefix_ = (
                self.AuditFileSender_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AuditFileSender_nsprefix_)
                else ""
            )
            self.AuditFileSender.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AuditFileSender",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(HeaderType, self).buildAttributes(node, attrs, already_processed)

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxAccountingBasis":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxAccountingBasis")
            value_ = self.gds_validate_string(value_, node, "TaxAccountingBasis")
            self.TaxAccountingBasis = value_
            self.TaxAccountingBasis_nsprefix_ = child_.prefix
            # validate type TaxAccountingBasisType
            self.validate_TaxAccountingBasisType(self.TaxAccountingBasis)
        elif nodeName_ == "TaxEntity":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxEntity")
            value_ = self.gds_validate_string(value_, node, "TaxEntity")
            self.TaxEntity = value_
            self.TaxEntity_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TaxEntity)
        elif nodeName_ == "UserID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UserID")
            value_ = self.gds_validate_string(value_, node, "UserID")
            self.UserID = value_
            self.UserID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.UserID)
        elif nodeName_ == "AuditFileSender":
            class_obj_ = self.get_class_obj_(child_, CompanyStructure)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AuditFileSender = obj_
            obj_.original_tagname_ = "AuditFileSender"
        super(HeaderType, self).buildChildren(child_, node, nodeName_, True)


# end class HeaderType


class MasterFilesType(GeneratedsSuper):
    """Holds standing data about general ledger account, suppliers, customers,
    products, etc.. An extension point is provided to allow Revenue Bodies
    to specify additional elements or structures such as tax rate
    tables."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        GeneralLedgerAccounts=None,
        Taxonomies=None,
        Customers=None,
        Suppliers=None,
        TaxTable=None,
        UOMTable=None,
        AnalysisTypeTable=None,
        MovementTypeTable=None,
        Products=None,
        PhysicalStock=None,
        Owners=None,
        Assets=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.GeneralLedgerAccounts = GeneralLedgerAccounts
        self.GeneralLedgerAccounts_nsprefix_ = None
        self.Taxonomies = Taxonomies
        self.Taxonomies_nsprefix_ = None
        self.Customers = Customers
        self.Customers_nsprefix_ = None
        self.Suppliers = Suppliers
        self.Suppliers_nsprefix_ = None
        self.TaxTable = TaxTable
        self.TaxTable_nsprefix_ = None
        self.UOMTable = UOMTable
        self.UOMTable_nsprefix_ = None
        self.AnalysisTypeTable = AnalysisTypeTable
        self.AnalysisTypeTable_nsprefix_ = None
        self.MovementTypeTable = MovementTypeTable
        self.MovementTypeTable_nsprefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
        self.PhysicalStock = PhysicalStock
        self.PhysicalStock_nsprefix_ = None
        self.Owners = Owners
        self.Owners_nsprefix_ = None
        self.Assets = Assets
        self.Assets_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, MasterFilesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterFilesType.subclass:
            return MasterFilesType.subclass(*args_, **kwargs_)
        else:
            return MasterFilesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_GeneralLedgerAccounts(self):
        return self.GeneralLedgerAccounts

    def set_GeneralLedgerAccounts(self, GeneralLedgerAccounts):
        self.GeneralLedgerAccounts = GeneralLedgerAccounts

    def get_Taxonomies(self):
        return self.Taxonomies

    def set_Taxonomies(self, Taxonomies):
        self.Taxonomies = Taxonomies

    def get_Customers(self):
        return self.Customers

    def set_Customers(self, Customers):
        self.Customers = Customers

    def get_Suppliers(self):
        return self.Suppliers

    def set_Suppliers(self, Suppliers):
        self.Suppliers = Suppliers

    def get_TaxTable(self):
        return self.TaxTable

    def set_TaxTable(self, TaxTable):
        self.TaxTable = TaxTable

    def get_UOMTable(self):
        return self.UOMTable

    def set_UOMTable(self, UOMTable):
        self.UOMTable = UOMTable

    def get_AnalysisTypeTable(self):
        return self.AnalysisTypeTable

    def set_AnalysisTypeTable(self, AnalysisTypeTable):
        self.AnalysisTypeTable = AnalysisTypeTable

    def get_MovementTypeTable(self):
        return self.MovementTypeTable

    def set_MovementTypeTable(self, MovementTypeTable):
        self.MovementTypeTable = MovementTypeTable

    def get_Products(self):
        return self.Products

    def set_Products(self, Products):
        self.Products = Products

    def get_PhysicalStock(self):
        return self.PhysicalStock

    def set_PhysicalStock(self, PhysicalStock):
        self.PhysicalStock = PhysicalStock

    def get_Owners(self):
        return self.Owners

    def set_Owners(self, Owners):
        self.Owners = Owners

    def get_Assets(self):
        return self.Assets

    def set_Assets(self, Assets):
        self.Assets = Assets

    def hasContent_(self):
        if (
            self.GeneralLedgerAccounts is not None
            or self.Taxonomies is not None
            or self.Customers is not None
            or self.Suppliers is not None
            or self.TaxTable is not None
            or self.UOMTable is not None
            or self.AnalysisTypeTable is not None
            or self.MovementTypeTable is not None
            or self.Products is not None
            or self.PhysicalStock is not None
            or self.Owners is not None
            or self.Assets is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MasterFilesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("MasterFilesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "MasterFilesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="MasterFilesType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="MasterFilesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="MasterFilesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MasterFilesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        if self.GeneralLedgerAccounts is not None:
            namespaceprefix_ = (
                self.GeneralLedgerAccounts_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GeneralLedgerAccounts_nsprefix_)
                else ""
            )
            self.GeneralLedgerAccounts.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="GeneralLedgerAccounts",
                pretty_print=pretty_print,
            )
        if self.Taxonomies is not None:
            namespaceprefix_ = (
                self.Taxonomies_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Taxonomies_nsprefix_)
                else ""
            )
            self.Taxonomies.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Taxonomies",
                pretty_print=pretty_print,
            )
        if self.Customers is not None:
            namespaceprefix_ = (
                self.Customers_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Customers_nsprefix_)
                else ""
            )
            self.Customers.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Customers",
                pretty_print=pretty_print,
            )
        if self.Suppliers is not None:
            namespaceprefix_ = (
                self.Suppliers_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Suppliers_nsprefix_)
                else ""
            )
            self.Suppliers.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Suppliers",
                pretty_print=pretty_print,
            )
        if self.TaxTable is not None:
            namespaceprefix_ = (
                self.TaxTable_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxTable_nsprefix_)
                else ""
            )
            self.TaxTable.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxTable",
                pretty_print=pretty_print,
            )
        if self.UOMTable is not None:
            namespaceprefix_ = (
                self.UOMTable_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMTable_nsprefix_)
                else ""
            )
            self.UOMTable.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="UOMTable",
                pretty_print=pretty_print,
            )
        if self.AnalysisTypeTable is not None:
            namespaceprefix_ = (
                self.AnalysisTypeTable_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisTypeTable_nsprefix_)
                else ""
            )
            self.AnalysisTypeTable.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AnalysisTypeTable",
                pretty_print=pretty_print,
            )
        if self.MovementTypeTable is not None:
            namespaceprefix_ = (
                self.MovementTypeTable_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementTypeTable_nsprefix_)
                else ""
            )
            self.MovementTypeTable.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="MovementTypeTable",
                pretty_print=pretty_print,
            )
        if self.Products is not None:
            namespaceprefix_ = (
                self.Products_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Products_nsprefix_)
                else ""
            )
            self.Products.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Products",
                pretty_print=pretty_print,
            )
        if self.PhysicalStock is not None:
            namespaceprefix_ = (
                self.PhysicalStock_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PhysicalStock_nsprefix_)
                else ""
            )
            self.PhysicalStock.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PhysicalStock",
                pretty_print=pretty_print,
            )
        if self.Owners is not None:
            namespaceprefix_ = (
                self.Owners_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Owners_nsprefix_)
                else ""
            )
            self.Owners.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Owners",
                pretty_print=pretty_print,
            )
        if self.Assets is not None:
            namespaceprefix_ = (
                self.Assets_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Assets_nsprefix_)
                else ""
            )
            self.Assets.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Assets",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "GeneralLedgerAccounts":
            obj_ = GeneralLedgerAccountsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GeneralLedgerAccounts = obj_
            obj_.original_tagname_ = "GeneralLedgerAccounts"
        elif nodeName_ == "Taxonomies":
            obj_ = TaxonomiesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Taxonomies = obj_
            obj_.original_tagname_ = "Taxonomies"
        elif nodeName_ == "Customers":
            obj_ = CustomersType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Customers = obj_
            obj_.original_tagname_ = "Customers"
        elif nodeName_ == "Suppliers":
            obj_ = SuppliersType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Suppliers = obj_
            obj_.original_tagname_ = "Suppliers"
        elif nodeName_ == "TaxTable":
            obj_ = TaxTableType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxTable = obj_
            obj_.original_tagname_ = "TaxTable"
        elif nodeName_ == "UOMTable":
            obj_ = UOMTableType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UOMTable = obj_
            obj_.original_tagname_ = "UOMTable"
        elif nodeName_ == "AnalysisTypeTable":
            obj_ = AnalysisTypeTableType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AnalysisTypeTable = obj_
            obj_.original_tagname_ = "AnalysisTypeTable"
        elif nodeName_ == "MovementTypeTable":
            obj_ = MovementTypeTableType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MovementTypeTable = obj_
            obj_.original_tagname_ = "MovementTypeTable"
        elif nodeName_ == "Products":
            obj_ = ProductsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = "Products"
        elif nodeName_ == "PhysicalStock":
            obj_ = PhysicalStockType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PhysicalStock = obj_
            obj_.original_tagname_ = "PhysicalStock"
        elif nodeName_ == "Owners":
            obj_ = OwnersType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Owners = obj_
            obj_.original_tagname_ = "Owners"
        elif nodeName_ == "Assets":
            obj_ = AssetsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Assets = obj_
            obj_.original_tagname_ = "Assets"


# end class MasterFilesType


class GeneralLedgerAccountsType(GeneratedsSuper):
    """The general ledger accounts of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Account=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Account is None:
            self.Account = []
        else:
            self.Account = Account
        self.Account_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralLedgerAccountsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralLedgerAccountsType.subclass:
            return GeneralLedgerAccountsType.subclass(*args_, **kwargs_)
        else:
            return GeneralLedgerAccountsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Account(self):
        return self.Account

    def set_Account(self, Account):
        self.Account = Account

    def add_Account(self, value):
        self.Account.append(value)

    def insert_Account_at(self, index, value):
        self.Account.insert(index, value)

    def replace_Account_at(self, index, value):
        self.Account[index] = value

    def hasContent_(self):
        if self.Account:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="GeneralLedgerAccountsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("GeneralLedgerAccountsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "GeneralLedgerAccountsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="GeneralLedgerAccountsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="GeneralLedgerAccountsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="GeneralLedgerAccountsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="GeneralLedgerAccountsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Account_ in self.Account:
            namespaceprefix_ = (
                self.Account_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Account_nsprefix_)
                else ""
            )
            Account_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Account",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Account":
            obj_ = AccountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Account.append(obj_)
            obj_.original_tagname_ = "Account"


# end class GeneralLedgerAccountsType


class AccountType(GeneratedsSuper):
    """General ledger account information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AccountID=None,
        AccountDescription=None,
        StandardAccountID=None,
        GroupingCategory=None,
        GroupingCode=None,
        AccountType_member=None,
        AccountCreationDate=None,
        OpeningDebitBalance=None,
        OpeningCreditBalance=None,
        ClosingDebitBalance=None,
        ClosingCreditBalance=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        self.AccountDescription = AccountDescription
        self.validate_SAFlongtextType(self.AccountDescription)
        self.AccountDescription_nsprefix_ = None
        self.StandardAccountID = StandardAccountID
        self.validate_SAFmiddle1textType(self.StandardAccountID)
        self.StandardAccountID_nsprefix_ = None
        self.GroupingCategory = GroupingCategory
        self.validate_SAFmiddle1textType(self.GroupingCategory)
        self.GroupingCategory_nsprefix_ = None
        self.GroupingCode = GroupingCode
        self.validate_SAFmiddle1textType(self.GroupingCode)
        self.GroupingCode_nsprefix_ = None
        self.AccountType = AccountType_member
        self.validate_AccountTypeType(self.AccountType)
        self.AccountType_nsprefix_ = None
        if isinstance(AccountCreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                AccountCreationDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = AccountCreationDate
        self.AccountCreationDate = initvalue_
        self.AccountCreationDate_nsprefix_ = None
        self.OpeningDebitBalance = OpeningDebitBalance
        self.validate_SAFmonetaryType(self.OpeningDebitBalance)
        self.OpeningDebitBalance_nsprefix_ = None
        self.OpeningCreditBalance = OpeningCreditBalance
        self.validate_SAFmonetaryType(self.OpeningCreditBalance)
        self.OpeningCreditBalance_nsprefix_ = None
        self.ClosingDebitBalance = ClosingDebitBalance
        self.validate_SAFmonetaryType(self.ClosingDebitBalance)
        self.ClosingDebitBalance_nsprefix_ = None
        self.ClosingCreditBalance = ClosingCreditBalance
        self.validate_SAFmonetaryType(self.ClosingCreditBalance)
        self.ClosingCreditBalance_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AccountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountType.subclass:
            return AccountType.subclass(*args_, **kwargs_)
        else:
            return AccountType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_AccountDescription(self):
        return self.AccountDescription

    def set_AccountDescription(self, AccountDescription):
        self.AccountDescription = AccountDescription

    def get_StandardAccountID(self):
        return self.StandardAccountID

    def set_StandardAccountID(self, StandardAccountID):
        self.StandardAccountID = StandardAccountID

    def get_GroupingCategory(self):
        return self.GroupingCategory

    def set_GroupingCategory(self, GroupingCategory):
        self.GroupingCategory = GroupingCategory

    def get_GroupingCode(self):
        return self.GroupingCode

    def set_GroupingCode(self, GroupingCode):
        self.GroupingCode = GroupingCode

    def get_AccountType(self):
        return self.AccountType

    def set_AccountType(self, AccountType):
        self.AccountType = AccountType

    def get_AccountCreationDate(self):
        return self.AccountCreationDate

    def set_AccountCreationDate(self, AccountCreationDate):
        self.AccountCreationDate = AccountCreationDate

    def get_OpeningDebitBalance(self):
        return self.OpeningDebitBalance

    def set_OpeningDebitBalance(self, OpeningDebitBalance):
        self.OpeningDebitBalance = OpeningDebitBalance

    def get_OpeningCreditBalance(self):
        return self.OpeningCreditBalance

    def set_OpeningCreditBalance(self, OpeningCreditBalance):
        self.OpeningCreditBalance = OpeningCreditBalance

    def get_ClosingDebitBalance(self):
        return self.ClosingDebitBalance

    def set_ClosingDebitBalance(self, ClosingDebitBalance):
        self.ClosingDebitBalance = ClosingDebitBalance

    def get_ClosingCreditBalance(self):
        return self.ClosingCreditBalance

    def set_ClosingCreditBalance(self, ClosingCreditBalance):
        self.ClosingCreditBalance = ClosingCreditBalance

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_AccountTypeType(self, value):
        result = True
        # Validate type AccountTypeType, a restriction on SAFshorttextType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["GL"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccountTypeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on AccountTypeType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AccountID is not None
            or self.AccountDescription is not None
            or self.StandardAccountID is not None
            or self.GroupingCategory is not None
            or self.GroupingCode is not None
            or self.AccountType is not None
            or self.AccountCreationDate is not None
            or self.OpeningDebitBalance is not None
            or self.OpeningCreditBalance is not None
            or self.ClosingDebitBalance is not None
            or self.ClosingCreditBalance is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AccountType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AccountType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AccountType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="AccountType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AccountType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AccountType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AccountType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountDescription is not None:
            namespaceprefix_ = (
                self.AccountDescription_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountDescription_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountDescription>%s</%sAccountDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountDescription),
                            input_name="AccountDescription",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StandardAccountID is not None:
            namespaceprefix_ = (
                self.StandardAccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StandardAccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStandardAccountID>%s</%sStandardAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.StandardAccountID),
                            input_name="StandardAccountID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GroupingCategory is not None:
            namespaceprefix_ = (
                self.GroupingCategory_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GroupingCategory_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGroupingCategory>%s</%sGroupingCategory>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.GroupingCategory),
                            input_name="GroupingCategory",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GroupingCode is not None:
            namespaceprefix_ = (
                self.GroupingCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GroupingCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGroupingCode>%s</%sGroupingCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.GroupingCode), input_name="GroupingCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountType is not None:
            namespaceprefix_ = (
                self.AccountType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountType>%s</%sAccountType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountType), input_name="AccountType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountCreationDate is not None:
            namespaceprefix_ = (
                self.AccountCreationDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountCreationDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountCreationDate>%s</%sAccountCreationDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.AccountCreationDate, input_name="AccountCreationDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningDebitBalance is not None:
            namespaceprefix_ = (
                self.OpeningDebitBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningDebitBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningDebitBalance>%s</%sOpeningDebitBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningDebitBalance, input_name="OpeningDebitBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningCreditBalance is not None:
            namespaceprefix_ = (
                self.OpeningCreditBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningCreditBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningCreditBalance>%s</%sOpeningCreditBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningCreditBalance, input_name="OpeningCreditBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingDebitBalance is not None:
            namespaceprefix_ = (
                self.ClosingDebitBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingDebitBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingDebitBalance>%s</%sClosingDebitBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingDebitBalance, input_name="ClosingDebitBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingCreditBalance is not None:
            namespaceprefix_ = (
                self.ClosingCreditBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingCreditBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingCreditBalance>%s</%sClosingCreditBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingCreditBalance, input_name="ClosingCreditBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "AccountDescription":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountDescription")
            value_ = self.gds_validate_string(value_, node, "AccountDescription")
            self.AccountDescription = value_
            self.AccountDescription_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.AccountDescription)
        elif nodeName_ == "StandardAccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StandardAccountID")
            value_ = self.gds_validate_string(value_, node, "StandardAccountID")
            self.StandardAccountID = value_
            self.StandardAccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.StandardAccountID)
        elif nodeName_ == "GroupingCategory":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "GroupingCategory")
            value_ = self.gds_validate_string(value_, node, "GroupingCategory")
            self.GroupingCategory = value_
            self.GroupingCategory_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.GroupingCategory)
        elif nodeName_ == "GroupingCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "GroupingCode")
            value_ = self.gds_validate_string(value_, node, "GroupingCode")
            self.GroupingCode = value_
            self.GroupingCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.GroupingCode)
        elif nodeName_ == "AccountType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountType")
            value_ = self.gds_validate_string(value_, node, "AccountType")
            self.AccountType = value_
            self.AccountType_nsprefix_ = child_.prefix
            # validate type AccountTypeType
            self.validate_AccountTypeType(self.AccountType)
        elif nodeName_ == "AccountCreationDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AccountCreationDate = dval_
            self.AccountCreationDate_nsprefix_ = child_.prefix
        elif nodeName_ == "OpeningDebitBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningDebitBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningDebitBalance")
            self.OpeningDebitBalance = fval_
            self.OpeningDebitBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningDebitBalance)
        elif nodeName_ == "OpeningCreditBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningCreditBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningCreditBalance")
            self.OpeningCreditBalance = fval_
            self.OpeningCreditBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningCreditBalance)
        elif nodeName_ == "ClosingDebitBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingDebitBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingDebitBalance")
            self.ClosingDebitBalance = fval_
            self.ClosingDebitBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingDebitBalance)
        elif nodeName_ == "ClosingCreditBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingCreditBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingCreditBalance")
            self.ClosingCreditBalance = fval_
            self.ClosingCreditBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingCreditBalance)


# end class AccountType


class TaxonomiesType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Taxonomy=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Taxonomy is None:
            self.Taxonomy = []
        else:
            self.Taxonomy = Taxonomy
        self.Taxonomy_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TaxonomiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxonomiesType.subclass:
            return TaxonomiesType.subclass(*args_, **kwargs_)
        else:
            return TaxonomiesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Taxonomy(self):
        return self.Taxonomy

    def set_Taxonomy(self, Taxonomy):
        self.Taxonomy = Taxonomy

    def add_Taxonomy(self, value):
        self.Taxonomy.append(value)

    def insert_Taxonomy_at(self, index, value):
        self.Taxonomy.insert(index, value)

    def replace_Taxonomy_at(self, index, value):
        self.Taxonomy[index] = value

    def hasContent_(self):
        if self.Taxonomy:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxonomiesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxonomiesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxonomiesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="TaxonomiesType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxonomiesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxonomiesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxonomiesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Taxonomy_ in self.Taxonomy:
            namespaceprefix_ = (
                self.Taxonomy_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Taxonomy_nsprefix_)
                else ""
            )
            Taxonomy_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Taxonomy",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Taxonomy":
            obj_ = TaxonomyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Taxonomy.append(obj_)
            obj_.original_tagname_ = "Taxonomy"


# end class TaxonomiesType


class TaxonomyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxonomyReference=None,
        TaxonomyElement=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxonomyReference = TaxonomyReference
        self.validate_SAFlongtextType(self.TaxonomyReference)
        self.TaxonomyReference_nsprefix_ = None
        if TaxonomyElement is None:
            self.TaxonomyElement = []
        else:
            self.TaxonomyElement = TaxonomyElement
        self.TaxonomyElement_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TaxonomyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxonomyType.subclass:
            return TaxonomyType.subclass(*args_, **kwargs_)
        else:
            return TaxonomyType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxonomyReference(self):
        return self.TaxonomyReference

    def set_TaxonomyReference(self, TaxonomyReference):
        self.TaxonomyReference = TaxonomyReference

    def get_TaxonomyElement(self):
        return self.TaxonomyElement

    def set_TaxonomyElement(self, TaxonomyElement):
        self.TaxonomyElement = TaxonomyElement

    def add_TaxonomyElement(self, value):
        self.TaxonomyElement.append(value)

    def insert_TaxonomyElement_at(self, index, value):
        self.TaxonomyElement.insert(index, value)

    def replace_TaxonomyElement_at(self, index, value):
        self.TaxonomyElement[index] = value

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.TaxonomyReference is not None or self.TaxonomyElement:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxonomyType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxonomyType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxonomyType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="TaxonomyType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxonomyType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxonomyType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxonomyType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxonomyReference is not None:
            namespaceprefix_ = (
                self.TaxonomyReference_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxonomyReference_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxonomyReference>%s</%sTaxonomyReference>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxonomyReference),
                            input_name="TaxonomyReference",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for TaxonomyElement_ in self.TaxonomyElement:
            namespaceprefix_ = (
                self.TaxonomyElement_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxonomyElement_nsprefix_)
                else ""
            )
            TaxonomyElement_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxonomyElement",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxonomyReference":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxonomyReference")
            value_ = self.gds_validate_string(value_, node, "TaxonomyReference")
            self.TaxonomyReference = value_
            self.TaxonomyReference_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.TaxonomyReference)
        elif nodeName_ == "TaxonomyElement":
            obj_ = TaxonomyElementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxonomyElement.append(obj_)
            obj_.original_tagname_ = "TaxonomyElement"


# end class TaxonomyType


class TaxonomyElementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxonomyCode=None,
        TaxonomyClusterID=None,
        TaxonomyClusterContextID=None,
        AccountID=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxonomyCode = TaxonomyCode
        self.validate_SAFlongtextType(self.TaxonomyCode)
        self.TaxonomyCode_nsprefix_ = None
        self.TaxonomyClusterID = TaxonomyClusterID
        self.validate_SAFlongtextType(self.TaxonomyClusterID)
        self.TaxonomyClusterID_nsprefix_ = None
        self.TaxonomyClusterContextID = TaxonomyClusterContextID
        self.validate_SAFlongtextType(self.TaxonomyClusterContextID)
        self.TaxonomyClusterContextID_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxonomyElementType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxonomyElementType.subclass:
            return TaxonomyElementType.subclass(*args_, **kwargs_)
        else:
            return TaxonomyElementType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxonomyCode(self):
        return self.TaxonomyCode

    def set_TaxonomyCode(self, TaxonomyCode):
        self.TaxonomyCode = TaxonomyCode

    def get_TaxonomyClusterID(self):
        return self.TaxonomyClusterID

    def set_TaxonomyClusterID(self, TaxonomyClusterID):
        self.TaxonomyClusterID = TaxonomyClusterID

    def get_TaxonomyClusterContextID(self):
        return self.TaxonomyClusterContextID

    def set_TaxonomyClusterContextID(self, TaxonomyClusterContextID):
        self.TaxonomyClusterContextID = TaxonomyClusterContextID

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxonomyCode is not None
            or self.TaxonomyClusterID is not None
            or self.TaxonomyClusterContextID is not None
            or self.AccountID is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxonomyElementType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxonomyElementType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxonomyElementType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="TaxonomyElementType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxonomyElementType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxonomyElementType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxonomyElementType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxonomyCode is not None:
            namespaceprefix_ = (
                self.TaxonomyCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxonomyCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxonomyCode>%s</%sTaxonomyCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxonomyCode), input_name="TaxonomyCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxonomyClusterID is not None:
            namespaceprefix_ = (
                self.TaxonomyClusterID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxonomyClusterID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxonomyClusterID>%s</%sTaxonomyClusterID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxonomyClusterID),
                            input_name="TaxonomyClusterID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxonomyClusterContextID is not None:
            namespaceprefix_ = (
                self.TaxonomyClusterContextID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxonomyClusterContextID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxonomyClusterContextID>%s</%sTaxonomyClusterContextID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxonomyClusterContextID),
                            input_name="TaxonomyClusterContextID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxonomyCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxonomyCode")
            value_ = self.gds_validate_string(value_, node, "TaxonomyCode")
            self.TaxonomyCode = value_
            self.TaxonomyCode_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.TaxonomyCode)
        elif nodeName_ == "TaxonomyClusterID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxonomyClusterID")
            value_ = self.gds_validate_string(value_, node, "TaxonomyClusterID")
            self.TaxonomyClusterID = value_
            self.TaxonomyClusterID_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.TaxonomyClusterID)
        elif nodeName_ == "TaxonomyClusterContextID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxonomyClusterContextID")
            value_ = self.gds_validate_string(value_, node, "TaxonomyClusterContextID")
            self.TaxonomyClusterContextID = value_
            self.TaxonomyClusterContextID_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.TaxonomyClusterContextID)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)


# end class TaxonomyElementType


class CustomersType(GeneratedsSuper):
    """The customers of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Customer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Customer is None:
            self.Customer = []
        else:
            self.Customer = Customer
        self.Customer_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, CustomersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomersType.subclass:
            return CustomersType.subclass(*args_, **kwargs_)
        else:
            return CustomersType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Customer(self):
        return self.Customer

    def set_Customer(self, Customer):
        self.Customer = Customer

    def add_Customer(self, value):
        self.Customer.append(value)

    def insert_Customer_at(self, index, value):
        self.Customer.insert(index, value)

    def replace_Customer_at(self, index, value):
        self.Customer[index] = value

    def hasContent_(self):
        if self.Customer:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CustomersType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("CustomersType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "CustomersType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="CustomersType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="CustomersType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="CustomersType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CustomersType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Customer_ in self.Customer:
            namespaceprefix_ = (
                self.Customer_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Customer_nsprefix_)
                else ""
            )
            Customer_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Customer",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Customer":
            obj_ = CustomerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Customer.append(obj_)
            obj_.original_tagname_ = "Customer"


# end class CustomersType


class CustomerType(CompanyStructure):
    """Customer information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyStructure

    def __init__(
        self,
        RegistrationNumber=None,
        Name=None,
        Address=None,
        Contact=None,
        TaxRegistration=None,
        BankAccount=None,
        CustomerID=None,
        SelfBillingIndicator=None,
        AccountID=None,
        OpeningDebitBalance=None,
        OpeningCreditBalance=None,
        ClosingDebitBalance=None,
        ClosingCreditBalance=None,
        PartyInfo=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("CustomerType"), self).__init__(
            RegistrationNumber,
            Name,
            Address,
            Contact,
            TaxRegistration,
            BankAccount,
            **kwargs_
        )
        self.CustomerID = CustomerID
        self.validate_SAFmiddle1textType(self.CustomerID)
        self.CustomerID_nsprefix_ = None
        self.SelfBillingIndicator = SelfBillingIndicator
        self.validate_SAFcodeType(self.SelfBillingIndicator)
        self.SelfBillingIndicator_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        self.OpeningDebitBalance = OpeningDebitBalance
        self.validate_SAFmonetaryType(self.OpeningDebitBalance)
        self.OpeningDebitBalance_nsprefix_ = None
        self.OpeningCreditBalance = OpeningCreditBalance
        self.validate_SAFmonetaryType(self.OpeningCreditBalance)
        self.OpeningCreditBalance_nsprefix_ = None
        self.ClosingDebitBalance = ClosingDebitBalance
        self.validate_SAFmonetaryType(self.ClosingDebitBalance)
        self.ClosingDebitBalance_nsprefix_ = None
        self.ClosingCreditBalance = ClosingCreditBalance
        self.validate_SAFmonetaryType(self.ClosingCreditBalance)
        self.ClosingCreditBalance_nsprefix_ = None
        self.PartyInfo = PartyInfo
        self.PartyInfo_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, CustomerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerType.subclass:
            return CustomerType.subclass(*args_, **kwargs_)
        else:
            return CustomerType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_CustomerID(self):
        return self.CustomerID

    def set_CustomerID(self, CustomerID):
        self.CustomerID = CustomerID

    def get_SelfBillingIndicator(self):
        return self.SelfBillingIndicator

    def set_SelfBillingIndicator(self, SelfBillingIndicator):
        self.SelfBillingIndicator = SelfBillingIndicator

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_OpeningDebitBalance(self):
        return self.OpeningDebitBalance

    def set_OpeningDebitBalance(self, OpeningDebitBalance):
        self.OpeningDebitBalance = OpeningDebitBalance

    def get_OpeningCreditBalance(self):
        return self.OpeningCreditBalance

    def set_OpeningCreditBalance(self, OpeningCreditBalance):
        self.OpeningCreditBalance = OpeningCreditBalance

    def get_ClosingDebitBalance(self):
        return self.ClosingDebitBalance

    def set_ClosingDebitBalance(self, ClosingDebitBalance):
        self.ClosingDebitBalance = ClosingDebitBalance

    def get_ClosingCreditBalance(self):
        return self.ClosingCreditBalance

    def set_ClosingCreditBalance(self, ClosingCreditBalance):
        self.ClosingCreditBalance = ClosingCreditBalance

    def get_PartyInfo(self):
        return self.PartyInfo

    def set_PartyInfo(self, PartyInfo):
        self.PartyInfo = PartyInfo

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.CustomerID is not None
            or self.SelfBillingIndicator is not None
            or self.AccountID is not None
            or self.OpeningDebitBalance is not None
            or self.OpeningCreditBalance is not None
            or self.ClosingDebitBalance is not None
            or self.ClosingCreditBalance is not None
            or self.PartyInfo is not None
            or super(CustomerType, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CustomerType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("CustomerType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "CustomerType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="CustomerType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="CustomerType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="CustomerType",
    ):
        super(CustomerType, self).exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="CustomerType"
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CustomerType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        super(CustomerType, self).exportChildren(
            outfile,
            level,
            namespaceprefix_,
            namespacedef_,
            name_,
            True,
            pretty_print=pretty_print,
        )
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.CustomerID is not None:
            namespaceprefix_ = (
                self.CustomerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCustomerID>%s</%sCustomerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CustomerID), input_name="CustomerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SelfBillingIndicator is not None:
            namespaceprefix_ = (
                self.SelfBillingIndicator_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SelfBillingIndicator_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSelfBillingIndicator>%s</%sSelfBillingIndicator>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SelfBillingIndicator),
                            input_name="SelfBillingIndicator",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningDebitBalance is not None:
            namespaceprefix_ = (
                self.OpeningDebitBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningDebitBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningDebitBalance>%s</%sOpeningDebitBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningDebitBalance, input_name="OpeningDebitBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningCreditBalance is not None:
            namespaceprefix_ = (
                self.OpeningCreditBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningCreditBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningCreditBalance>%s</%sOpeningCreditBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningCreditBalance, input_name="OpeningCreditBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingDebitBalance is not None:
            namespaceprefix_ = (
                self.ClosingDebitBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingDebitBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingDebitBalance>%s</%sClosingDebitBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingDebitBalance, input_name="ClosingDebitBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingCreditBalance is not None:
            namespaceprefix_ = (
                self.ClosingCreditBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingCreditBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingCreditBalance>%s</%sClosingCreditBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingCreditBalance, input_name="ClosingCreditBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PartyInfo is not None:
            namespaceprefix_ = (
                self.PartyInfo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PartyInfo_nsprefix_)
                else ""
            )
            self.PartyInfo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PartyInfo",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(CustomerType, self).buildAttributes(node, attrs, already_processed)

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "CustomerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CustomerID")
            value_ = self.gds_validate_string(value_, node, "CustomerID")
            self.CustomerID = value_
            self.CustomerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CustomerID)
        elif nodeName_ == "SelfBillingIndicator":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SelfBillingIndicator")
            value_ = self.gds_validate_string(value_, node, "SelfBillingIndicator")
            self.SelfBillingIndicator = value_
            self.SelfBillingIndicator_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.SelfBillingIndicator)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "OpeningDebitBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningDebitBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningDebitBalance")
            self.OpeningDebitBalance = fval_
            self.OpeningDebitBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningDebitBalance)
        elif nodeName_ == "OpeningCreditBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningCreditBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningCreditBalance")
            self.OpeningCreditBalance = fval_
            self.OpeningCreditBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningCreditBalance)
        elif nodeName_ == "ClosingDebitBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingDebitBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingDebitBalance")
            self.ClosingDebitBalance = fval_
            self.ClosingDebitBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingDebitBalance)
        elif nodeName_ == "ClosingCreditBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingCreditBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingCreditBalance")
            self.ClosingCreditBalance = fval_
            self.ClosingCreditBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingCreditBalance)
        elif nodeName_ == "PartyInfo":
            obj_ = PartyInfoStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PartyInfo = obj_
            obj_.original_tagname_ = "PartyInfo"
        super(CustomerType, self).buildChildren(child_, node, nodeName_, True)


# end class CustomerType


class SuppliersType(GeneratedsSuper):
    """The suppliers of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Supplier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Supplier is None:
            self.Supplier = []
        else:
            self.Supplier = Supplier
        self.Supplier_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SuppliersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SuppliersType.subclass:
            return SuppliersType.subclass(*args_, **kwargs_)
        else:
            return SuppliersType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Supplier(self):
        return self.Supplier

    def set_Supplier(self, Supplier):
        self.Supplier = Supplier

    def add_Supplier(self, value):
        self.Supplier.append(value)

    def insert_Supplier_at(self, index, value):
        self.Supplier.insert(index, value)

    def replace_Supplier_at(self, index, value):
        self.Supplier[index] = value

    def hasContent_(self):
        if self.Supplier:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SuppliersType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SuppliersType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SuppliersType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SuppliersType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SuppliersType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SuppliersType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SuppliersType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Supplier_ in self.Supplier:
            namespaceprefix_ = (
                self.Supplier_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Supplier_nsprefix_)
                else ""
            )
            Supplier_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Supplier",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Supplier":
            obj_ = SupplierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier.append(obj_)
            obj_.original_tagname_ = "Supplier"


# end class SuppliersType


class SupplierType(CompanyStructure):
    """Supplier information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyStructure

    def __init__(
        self,
        RegistrationNumber=None,
        Name=None,
        Address=None,
        Contact=None,
        TaxRegistration=None,
        BankAccount=None,
        SupplierID=None,
        SelfBillingIndicator=None,
        AccountID=None,
        OpeningDebitBalance=None,
        OpeningCreditBalance=None,
        ClosingDebitBalance=None,
        ClosingCreditBalance=None,
        PartyInfo=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("SupplierType"), self).__init__(
            RegistrationNumber,
            Name,
            Address,
            Contact,
            TaxRegistration,
            BankAccount,
            **kwargs_
        )
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.SelfBillingIndicator = SelfBillingIndicator
        self.validate_SAFcodeType(self.SelfBillingIndicator)
        self.SelfBillingIndicator_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        self.OpeningDebitBalance = OpeningDebitBalance
        self.validate_SAFmonetaryType(self.OpeningDebitBalance)
        self.OpeningDebitBalance_nsprefix_ = None
        self.OpeningCreditBalance = OpeningCreditBalance
        self.validate_SAFmonetaryType(self.OpeningCreditBalance)
        self.OpeningCreditBalance_nsprefix_ = None
        self.ClosingDebitBalance = ClosingDebitBalance
        self.validate_SAFmonetaryType(self.ClosingDebitBalance)
        self.ClosingDebitBalance_nsprefix_ = None
        self.ClosingCreditBalance = ClosingCreditBalance
        self.validate_SAFmonetaryType(self.ClosingCreditBalance)
        self.ClosingCreditBalance_nsprefix_ = None
        self.PartyInfo = PartyInfo
        self.PartyInfo_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SupplierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplierType.subclass:
            return SupplierType.subclass(*args_, **kwargs_)
        else:
            return SupplierType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_SelfBillingIndicator(self):
        return self.SelfBillingIndicator

    def set_SelfBillingIndicator(self, SelfBillingIndicator):
        self.SelfBillingIndicator = SelfBillingIndicator

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_OpeningDebitBalance(self):
        return self.OpeningDebitBalance

    def set_OpeningDebitBalance(self, OpeningDebitBalance):
        self.OpeningDebitBalance = OpeningDebitBalance

    def get_OpeningCreditBalance(self):
        return self.OpeningCreditBalance

    def set_OpeningCreditBalance(self, OpeningCreditBalance):
        self.OpeningCreditBalance = OpeningCreditBalance

    def get_ClosingDebitBalance(self):
        return self.ClosingDebitBalance

    def set_ClosingDebitBalance(self, ClosingDebitBalance):
        self.ClosingDebitBalance = ClosingDebitBalance

    def get_ClosingCreditBalance(self):
        return self.ClosingCreditBalance

    def set_ClosingCreditBalance(self, ClosingCreditBalance):
        self.ClosingCreditBalance = ClosingCreditBalance

    def get_PartyInfo(self):
        return self.PartyInfo

    def set_PartyInfo(self, PartyInfo):
        self.PartyInfo = PartyInfo

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.SupplierID is not None
            or self.SelfBillingIndicator is not None
            or self.AccountID is not None
            or self.OpeningDebitBalance is not None
            or self.OpeningCreditBalance is not None
            or self.ClosingDebitBalance is not None
            or self.ClosingCreditBalance is not None
            or self.PartyInfo is not None
            or super(SupplierType, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SupplierType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SupplierType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SupplierType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SupplierType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SupplierType",
    ):
        super(SupplierType, self).exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SupplierType"
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        super(SupplierType, self).exportChildren(
            outfile,
            level,
            namespaceprefix_,
            namespacedef_,
            name_,
            True,
            pretty_print=pretty_print,
        )
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SelfBillingIndicator is not None:
            namespaceprefix_ = (
                self.SelfBillingIndicator_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SelfBillingIndicator_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSelfBillingIndicator>%s</%sSelfBillingIndicator>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SelfBillingIndicator),
                            input_name="SelfBillingIndicator",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningDebitBalance is not None:
            namespaceprefix_ = (
                self.OpeningDebitBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningDebitBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningDebitBalance>%s</%sOpeningDebitBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningDebitBalance, input_name="OpeningDebitBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningCreditBalance is not None:
            namespaceprefix_ = (
                self.OpeningCreditBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningCreditBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningCreditBalance>%s</%sOpeningCreditBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningCreditBalance, input_name="OpeningCreditBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingDebitBalance is not None:
            namespaceprefix_ = (
                self.ClosingDebitBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingDebitBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingDebitBalance>%s</%sClosingDebitBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingDebitBalance, input_name="ClosingDebitBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingCreditBalance is not None:
            namespaceprefix_ = (
                self.ClosingCreditBalance_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingCreditBalance_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingCreditBalance>%s</%sClosingCreditBalance>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingCreditBalance, input_name="ClosingCreditBalance"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PartyInfo is not None:
            namespaceprefix_ = (
                self.PartyInfo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PartyInfo_nsprefix_)
                else ""
            )
            self.PartyInfo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PartyInfo",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(SupplierType, self).buildAttributes(node, attrs, already_processed)

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "SelfBillingIndicator":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SelfBillingIndicator")
            value_ = self.gds_validate_string(value_, node, "SelfBillingIndicator")
            self.SelfBillingIndicator = value_
            self.SelfBillingIndicator_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.SelfBillingIndicator)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "OpeningDebitBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningDebitBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningDebitBalance")
            self.OpeningDebitBalance = fval_
            self.OpeningDebitBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningDebitBalance)
        elif nodeName_ == "OpeningCreditBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningCreditBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningCreditBalance")
            self.OpeningCreditBalance = fval_
            self.OpeningCreditBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningCreditBalance)
        elif nodeName_ == "ClosingDebitBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingDebitBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingDebitBalance")
            self.ClosingDebitBalance = fval_
            self.ClosingDebitBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingDebitBalance)
        elif nodeName_ == "ClosingCreditBalance" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingCreditBalance")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingCreditBalance")
            self.ClosingCreditBalance = fval_
            self.ClosingCreditBalance_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingCreditBalance)
        elif nodeName_ == "PartyInfo":
            obj_ = PartyInfoStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PartyInfo = obj_
            obj_.original_tagname_ = "PartyInfo"
        super(SupplierType, self).buildChildren(child_, node, nodeName_, True)


# end class SupplierType


class TaxTableType(GeneratedsSuper):
    """The tax tables of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, TaxTableEntry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if TaxTableEntry is None:
            self.TaxTableEntry = []
        else:
            self.TaxTableEntry = TaxTableEntry
        self.TaxTableEntry_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TaxTableType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxTableType.subclass:
            return TaxTableType.subclass(*args_, **kwargs_)
        else:
            return TaxTableType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxTableEntry(self):
        return self.TaxTableEntry

    def set_TaxTableEntry(self, TaxTableEntry):
        self.TaxTableEntry = TaxTableEntry

    def add_TaxTableEntry(self, value):
        self.TaxTableEntry.append(value)

    def insert_TaxTableEntry_at(self, index, value):
        self.TaxTableEntry.insert(index, value)

    def replace_TaxTableEntry_at(self, index, value):
        self.TaxTableEntry[index] = value

    def hasContent_(self):
        if self.TaxTableEntry:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxTableType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxTableType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxTableType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="TaxTableType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxTableType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxTableType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxTableType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for TaxTableEntry_ in self.TaxTableEntry:
            namespaceprefix_ = (
                self.TaxTableEntry_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxTableEntry_nsprefix_)
                else ""
            )
            TaxTableEntry_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxTableEntry",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxTableEntry":
            obj_ = TaxTableEntryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxTableEntry.append(obj_)
            obj_.original_tagname_ = "TaxTableEntry"


# end class TaxTableType


class TaxTableEntryType(GeneratedsSuper):
    """Tax entry information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxType=None,
        Description=None,
        TaxCodeDetails=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxType = TaxType
        self.validate_TaxTypeType(self.TaxType)
        self.TaxType_nsprefix_ = None
        self.Description = Description
        self.validate_DescriptionType(self.Description)
        self.Description_nsprefix_ = None
        if TaxCodeDetails is None:
            self.TaxCodeDetails = []
        else:
            self.TaxCodeDetails = TaxCodeDetails
        self.TaxCodeDetails_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TaxTableEntryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxTableEntryType.subclass:
            return TaxTableEntryType.subclass(*args_, **kwargs_)
        else:
            return TaxTableEntryType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxType(self):
        return self.TaxType

    def set_TaxType(self, TaxType):
        self.TaxType = TaxType

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_TaxCodeDetails(self):
        return self.TaxCodeDetails

    def set_TaxCodeDetails(self, TaxCodeDetails):
        self.TaxCodeDetails = TaxCodeDetails

    def add_TaxCodeDetails(self, value):
        self.TaxCodeDetails.append(value)

    def insert_TaxCodeDetails_at(self, index, value):
        self.TaxCodeDetails.insert(index, value)

    def replace_TaxCodeDetails_at(self, index, value):
        self.TaxCodeDetails[index] = value

    def validate_TaxTypeType(self, value):
        result = True
        # Validate type TaxTypeType, a restriction on SAFcodeType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["MVA"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxTypeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TaxTypeType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_DescriptionType(self, value):
        result = True
        # Validate type DescriptionType, a restriction on SAFlongtextType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["Merverdiavgift"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DescriptionType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DescriptionType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxType is not None
            or self.Description is not None
            or self.TaxCodeDetails
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxTableEntryType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxTableEntryType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxTableEntryType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="TaxTableEntryType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxTableEntryType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxTableEntryType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxTableEntryType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxType is not None:
            namespaceprefix_ = (
                self.TaxType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxType>%s</%sTaxType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxType), input_name="TaxType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for TaxCodeDetails_ in self.TaxCodeDetails:
            namespaceprefix_ = (
                self.TaxCodeDetails_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxCodeDetails_nsprefix_)
                else ""
            )
            TaxCodeDetails_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxCodeDetails",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxType")
            value_ = self.gds_validate_string(value_, node, "TaxType")
            self.TaxType = value_
            self.TaxType_nsprefix_ = child_.prefix
            # validate type TaxTypeType
            self.validate_TaxTypeType(self.TaxType)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type DescriptionType
            self.validate_DescriptionType(self.Description)
        elif nodeName_ == "TaxCodeDetails":
            obj_ = TaxCodeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxCodeDetails.append(obj_)
            obj_.original_tagname_ = "TaxCodeDetails"


# end class TaxTableEntryType


class TaxCodeDetailsType(GeneratedsSuper):
    """Tax code details of the tax table entry."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxCode=None,
        EffectiveDate=None,
        ExpirationDate=None,
        Description=None,
        TaxPercentage=None,
        FlatTaxRate=None,
        Country=None,
        Region=None,
        StandardTaxCode=None,
        Compensation=None,
        BaseRate=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxCode = TaxCode
        self.validate_SAFcodeType(self.TaxCode)
        self.TaxCode_nsprefix_ = None
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, "%Y-%m-%d").date()
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, "%Y-%m-%d").date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.TaxPercentage = TaxPercentage
        self.TaxPercentage_nsprefix_ = None
        self.FlatTaxRate = FlatTaxRate
        self.FlatTaxRate_nsprefix_ = None
        self.Country = Country
        self.validate_ISOCountryCode(self.Country)
        self.Country_nsprefix_ = None
        self.Region = Region
        self.validate_SAFcodeType(self.Region)
        self.Region_nsprefix_ = None
        self.StandardTaxCode = StandardTaxCode
        self.validate_SAFmiddle1textType(self.StandardTaxCode)
        self.StandardTaxCode_nsprefix_ = None
        self.Compensation = Compensation
        self.Compensation_nsprefix_ = None
        if BaseRate is None:
            self.BaseRate = []
        else:
            self.BaseRate = BaseRate
        self.BaseRate_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxCodeDetailsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxCodeDetailsType.subclass:
            return TaxCodeDetailsType.subclass(*args_, **kwargs_)
        else:
            return TaxCodeDetailsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxCode(self):
        return self.TaxCode

    def set_TaxCode(self, TaxCode):
        self.TaxCode = TaxCode

    def get_EffectiveDate(self):
        return self.EffectiveDate

    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate

    def get_ExpirationDate(self):
        return self.ExpirationDate

    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_TaxPercentage(self):
        return self.TaxPercentage

    def set_TaxPercentage(self, TaxPercentage):
        self.TaxPercentage = TaxPercentage

    def get_FlatTaxRate(self):
        return self.FlatTaxRate

    def set_FlatTaxRate(self, FlatTaxRate):
        self.FlatTaxRate = FlatTaxRate

    def get_Country(self):
        return self.Country

    def set_Country(self, Country):
        self.Country = Country

    def get_Region(self):
        return self.Region

    def set_Region(self, Region):
        self.Region = Region

    def get_StandardTaxCode(self):
        return self.StandardTaxCode

    def set_StandardTaxCode(self, StandardTaxCode):
        self.StandardTaxCode = StandardTaxCode

    def get_Compensation(self):
        return self.Compensation

    def set_Compensation(self, Compensation):
        self.Compensation = Compensation

    def get_BaseRate(self):
        return self.BaseRate

    def set_BaseRate(self, BaseRate):
        self.BaseRate = BaseRate

    def add_BaseRate(self, value):
        self.BaseRate.append(value)

    def insert_BaseRate_at(self, index, value):
        self.BaseRate.insert(index, value)

    def replace_BaseRate_at(self, index, value):
        self.BaseRate[index] = value

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_ISOCountryCode(self, value):
        result = True
        # Validate type ISOCountryCode, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd length restriction on ISOCountryCode'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_BaseRateType(self, value):
        result = True
        # Validate type BaseRateType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on BaseRateType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on BaseRateType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxCode is not None
            or self.EffectiveDate is not None
            or self.ExpirationDate is not None
            or self.Description is not None
            or self.TaxPercentage is not None
            or self.FlatTaxRate is not None
            or self.Country is not None
            or self.Region is not None
            or self.StandardTaxCode is not None
            or self.Compensation is not None
            or self.BaseRate
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxCodeDetailsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxCodeDetailsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxCodeDetailsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="TaxCodeDetailsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxCodeDetailsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TaxCodeDetailsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxCodeDetailsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxCode is not None:
            namespaceprefix_ = (
                self.TaxCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxCode>%s</%sTaxCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxCode), input_name="TaxCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.EffectiveDate is not None:
            namespaceprefix_ = (
                self.EffectiveDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.EffectiveDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sEffectiveDate>%s</%sEffectiveDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.EffectiveDate, input_name="EffectiveDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ExpirationDate is not None:
            namespaceprefix_ = (
                self.ExpirationDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ExpirationDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sExpirationDate>%s</%sExpirationDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.ExpirationDate, input_name="ExpirationDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxPercentage is not None:
            namespaceprefix_ = (
                self.TaxPercentage_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxPercentage_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxPercentage>%s</%sTaxPercentage>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.TaxPercentage, input_name="TaxPercentage"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.FlatTaxRate is not None:
            namespaceprefix_ = (
                self.FlatTaxRate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.FlatTaxRate_nsprefix_)
                else ""
            )
            self.FlatTaxRate.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="FlatTaxRate",
                pretty_print=pretty_print,
            )
        if self.Country is not None:
            namespaceprefix_ = (
                self.Country_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Country_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCountry>%s</%sCountry>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Country), input_name="Country"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Region is not None:
            namespaceprefix_ = (
                self.Region_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Region_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sRegion>%s</%sRegion>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Region), input_name="Region"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StandardTaxCode is not None:
            namespaceprefix_ = (
                self.StandardTaxCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StandardTaxCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStandardTaxCode>%s</%sStandardTaxCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.StandardTaxCode),
                            input_name="StandardTaxCode",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Compensation is not None:
            namespaceprefix_ = (
                self.Compensation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Compensation_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCompensation>%s</%sCompensation>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_boolean(
                        self.Compensation, input_name="Compensation"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for BaseRate_ in self.BaseRate:
            namespaceprefix_ = (
                self.BaseRate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BaseRate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBaseRate>%s</%sBaseRate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(BaseRate_, input_name="BaseRate"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxCode")
            value_ = self.gds_validate_string(value_, node, "TaxCode")
            self.TaxCode = value_
            self.TaxCode_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.TaxCode)
        elif nodeName_ == "EffectiveDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == "ExpirationDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "TaxPercentage" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TaxPercentage")
            fval_ = self.gds_validate_decimal(fval_, node, "TaxPercentage")
            self.TaxPercentage = fval_
            self.TaxPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == "FlatTaxRate":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FlatTaxRate = obj_
            obj_.original_tagname_ = "FlatTaxRate"
        elif nodeName_ == "Country":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Country")
            value_ = self.gds_validate_string(value_, node, "Country")
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type ISOCountryCode
            self.validate_ISOCountryCode(self.Country)
        elif nodeName_ == "Region":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Region")
            value_ = self.gds_validate_string(value_, node, "Region")
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.Region)
        elif nodeName_ == "StandardTaxCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StandardTaxCode")
            value_ = self.gds_validate_string(value_, node, "StandardTaxCode")
            self.StandardTaxCode = value_
            self.StandardTaxCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.StandardTaxCode)
        elif nodeName_ == "Compensation":
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, "Compensation")
            ival_ = self.gds_validate_boolean(ival_, node, "Compensation")
            self.Compensation = ival_
            self.Compensation_nsprefix_ = child_.prefix
        elif nodeName_ == "BaseRate" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "BaseRate")
            fval_ = self.gds_validate_decimal(fval_, node, "BaseRate")
            self.BaseRate.append(fval_)
            self.BaseRate_nsprefix_ = child_.prefix
            # validate type BaseRateType
            self.validate_BaseRateType(self.BaseRate[-1])


# end class TaxCodeDetailsType


class UOMTableType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, UOMTableEntry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if UOMTableEntry is None:
            self.UOMTableEntry = []
        else:
            self.UOMTableEntry = UOMTableEntry
        self.UOMTableEntry_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, UOMTableType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UOMTableType.subclass:
            return UOMTableType.subclass(*args_, **kwargs_)
        else:
            return UOMTableType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_UOMTableEntry(self):
        return self.UOMTableEntry

    def set_UOMTableEntry(self, UOMTableEntry):
        self.UOMTableEntry = UOMTableEntry

    def add_UOMTableEntry(self, value):
        self.UOMTableEntry.append(value)

    def insert_UOMTableEntry_at(self, index, value):
        self.UOMTableEntry.insert(index, value)

    def replace_UOMTableEntry_at(self, index, value):
        self.UOMTableEntry[index] = value

    def hasContent_(self):
        if self.UOMTableEntry:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="UOMTableType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("UOMTableType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "UOMTableType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="UOMTableType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="UOMTableType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="UOMTableType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="UOMTableType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for UOMTableEntry_ in self.UOMTableEntry:
            namespaceprefix_ = (
                self.UOMTableEntry_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMTableEntry_nsprefix_)
                else ""
            )
            UOMTableEntry_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="UOMTableEntry",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "UOMTableEntry":
            obj_ = UOMTableEntryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UOMTableEntry.append(obj_)
            obj_.original_tagname_ = "UOMTableEntry"


# end class UOMTableType


class UOMTableEntryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self, UnitOfMeasure=None, Description=None, gds_collector_=None, **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_SAFcodeType(self.UnitOfMeasure)
        self.UnitOfMeasure_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, UOMTableEntryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UOMTableEntryType.subclass:
            return UOMTableEntryType.subclass(*args_, **kwargs_)
        else:
            return UOMTableEntryType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_UnitOfMeasure(self):
        return self.UnitOfMeasure

    def set_UnitOfMeasure(self, UnitOfMeasure):
        self.UnitOfMeasure = UnitOfMeasure

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.UnitOfMeasure is not None or self.Description is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="UOMTableEntryType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("UOMTableEntryType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "UOMTableEntryType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="UOMTableEntryType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="UOMTableEntryType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="UOMTableEntryType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="UOMTableEntryType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.UnitOfMeasure is not None:
            namespaceprefix_ = (
                self.UnitOfMeasure_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UnitOfMeasure_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.UnitOfMeasure), input_name="UnitOfMeasure"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "UnitOfMeasure":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UnitOfMeasure")
            value_ = self.gds_validate_string(value_, node, "UnitOfMeasure")
            self.UnitOfMeasure = value_
            self.UnitOfMeasure_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.UnitOfMeasure)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)


# end class UOMTableEntryType


class AnalysisTypeTableType(GeneratedsSuper):
    """Table with the analysis code identifiers. Used for further specification
    of transaction data. Example: cost unit, cost center, project,
    department, provider, journal type, employees, etc. Journal type
    (bilagsart) should always be used on all transactions."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, AnalysisTypeTableEntry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if AnalysisTypeTableEntry is None:
            self.AnalysisTypeTableEntry = []
        else:
            self.AnalysisTypeTableEntry = AnalysisTypeTableEntry
        self.AnalysisTypeTableEntry_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalysisTypeTableType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalysisTypeTableType.subclass:
            return AnalysisTypeTableType.subclass(*args_, **kwargs_)
        else:
            return AnalysisTypeTableType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AnalysisTypeTableEntry(self):
        return self.AnalysisTypeTableEntry

    def set_AnalysisTypeTableEntry(self, AnalysisTypeTableEntry):
        self.AnalysisTypeTableEntry = AnalysisTypeTableEntry

    def add_AnalysisTypeTableEntry(self, value):
        self.AnalysisTypeTableEntry.append(value)

    def insert_AnalysisTypeTableEntry_at(self, index, value):
        self.AnalysisTypeTableEntry.insert(index, value)

    def replace_AnalysisTypeTableEntry_at(self, index, value):
        self.AnalysisTypeTableEntry[index] = value

    def hasContent_(self):
        if self.AnalysisTypeTableEntry:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisTypeTableType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AnalysisTypeTableType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AnalysisTypeTableType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AnalysisTypeTableType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AnalysisTypeTableType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AnalysisTypeTableType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisTypeTableType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for AnalysisTypeTableEntry_ in self.AnalysisTypeTableEntry:
            namespaceprefix_ = (
                self.AnalysisTypeTableEntry_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisTypeTableEntry_nsprefix_)
                else ""
            )
            AnalysisTypeTableEntry_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AnalysisTypeTableEntry",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AnalysisTypeTableEntry":
            obj_ = AnalysisTypeTableEntryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AnalysisTypeTableEntry.append(obj_)
            obj_.original_tagname_ = "AnalysisTypeTableEntry"


# end class AnalysisTypeTableType


class AnalysisTypeTableEntryType(GeneratedsSuper):
    """Analysis entry information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AnalysisType=None,
        AnalysisTypeDescription=None,
        AnalysisID=None,
        AnalysisIDDescription=None,
        StartDate=None,
        EndDate=None,
        Status=None,
        Analysis=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AnalysisType = AnalysisType
        self.validate_SAFcodeType(self.AnalysisType)
        self.AnalysisType_nsprefix_ = None
        self.AnalysisTypeDescription = AnalysisTypeDescription
        self.validate_SAFlongtextType(self.AnalysisTypeDescription)
        self.AnalysisTypeDescription_nsprefix_ = None
        self.AnalysisID = AnalysisID
        self.validate_SAFmiddle1textType(self.AnalysisID)
        self.AnalysisID_nsprefix_ = None
        self.AnalysisIDDescription = AnalysisIDDescription
        self.validate_SAFlongtextType(self.AnalysisIDDescription)
        self.AnalysisIDDescription_nsprefix_ = None
        if isinstance(StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartDate, "%Y-%m-%d").date()
        else:
            initvalue_ = StartDate
        self.StartDate = initvalue_
        self.StartDate_nsprefix_ = None
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, "%Y-%m-%d").date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.EndDate_nsprefix_ = None
        self.Status = Status
        self.validate_StatusType(self.Status)
        self.Status_nsprefix_ = None
        if Analysis is None:
            self.Analysis = []
        else:
            self.Analysis = Analysis
        self.Analysis_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalysisTypeTableEntryType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalysisTypeTableEntryType.subclass:
            return AnalysisTypeTableEntryType.subclass(*args_, **kwargs_)
        else:
            return AnalysisTypeTableEntryType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AnalysisType(self):
        return self.AnalysisType

    def set_AnalysisType(self, AnalysisType):
        self.AnalysisType = AnalysisType

    def get_AnalysisTypeDescription(self):
        return self.AnalysisTypeDescription

    def set_AnalysisTypeDescription(self, AnalysisTypeDescription):
        self.AnalysisTypeDescription = AnalysisTypeDescription

    def get_AnalysisID(self):
        return self.AnalysisID

    def set_AnalysisID(self, AnalysisID):
        self.AnalysisID = AnalysisID

    def get_AnalysisIDDescription(self):
        return self.AnalysisIDDescription

    def set_AnalysisIDDescription(self, AnalysisIDDescription):
        self.AnalysisIDDescription = AnalysisIDDescription

    def get_StartDate(self):
        return self.StartDate

    def set_StartDate(self, StartDate):
        self.StartDate = StartDate

    def get_EndDate(self):
        return self.EndDate

    def set_EndDate(self, EndDate):
        self.EndDate = EndDate

    def get_Status(self):
        return self.Status

    def set_Status(self, Status):
        self.Status = Status

    def get_Analysis(self):
        return self.Analysis

    def set_Analysis(self, Analysis):
        self.Analysis = Analysis

    def add_Analysis(self, value):
        self.Analysis.append(value)

    def insert_Analysis_at(self, index, value):
        self.Analysis.insert(index, value)

    def replace_Analysis_at(self, index, value):
        self.Analysis[index] = value

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_StatusType(self, value):
        result = True
        # Validate type StatusType, a restriction on SAFmiddle1textType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["Active", "Closed", "Observation", "Passive"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StatusType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on StatusType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AnalysisType is not None
            or self.AnalysisTypeDescription is not None
            or self.AnalysisID is not None
            or self.AnalysisIDDescription is not None
            or self.StartDate is not None
            or self.EndDate is not None
            or self.Status is not None
            or self.Analysis
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisTypeTableEntryType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AnalysisTypeTableEntryType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AnalysisTypeTableEntryType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AnalysisTypeTableEntryType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AnalysisTypeTableEntryType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AnalysisTypeTableEntryType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AnalysisTypeTableEntryType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AnalysisType is not None:
            namespaceprefix_ = (
                self.AnalysisType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisType>%s</%sAnalysisType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisType), input_name="AnalysisType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AnalysisTypeDescription is not None:
            namespaceprefix_ = (
                self.AnalysisTypeDescription_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisTypeDescription_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisTypeDescription>%s</%sAnalysisTypeDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisTypeDescription),
                            input_name="AnalysisTypeDescription",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AnalysisID is not None:
            namespaceprefix_ = (
                self.AnalysisID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisID>%s</%sAnalysisID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisID), input_name="AnalysisID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AnalysisIDDescription is not None:
            namespaceprefix_ = (
                self.AnalysisIDDescription_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AnalysisIDDescription_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAnalysisIDDescription>%s</%sAnalysisIDDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AnalysisIDDescription),
                            input_name="AnalysisIDDescription",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StartDate is not None:
            namespaceprefix_ = (
                self.StartDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StartDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStartDate>%s</%sStartDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.StartDate, input_name="StartDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.EndDate is not None:
            namespaceprefix_ = (
                self.EndDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.EndDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sEndDate>%s</%sEndDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.EndDate, input_name="EndDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Status is not None:
            namespaceprefix_ = (
                self.Status_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Status_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStatus>%s</%sStatus>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Status), input_name="Status"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Analysis_ in self.Analysis:
            namespaceprefix_ = (
                self.Analysis_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Analysis_nsprefix_)
                else ""
            )
            Analysis_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Analysis",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AnalysisType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisType")
            value_ = self.gds_validate_string(value_, node, "AnalysisType")
            self.AnalysisType = value_
            self.AnalysisType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.AnalysisType)
        elif nodeName_ == "AnalysisTypeDescription":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisTypeDescription")
            value_ = self.gds_validate_string(value_, node, "AnalysisTypeDescription")
            self.AnalysisTypeDescription = value_
            self.AnalysisTypeDescription_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.AnalysisTypeDescription)
        elif nodeName_ == "AnalysisID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisID")
            value_ = self.gds_validate_string(value_, node, "AnalysisID")
            self.AnalysisID = value_
            self.AnalysisID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.AnalysisID)
        elif nodeName_ == "AnalysisIDDescription":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AnalysisIDDescription")
            value_ = self.gds_validate_string(value_, node, "AnalysisIDDescription")
            self.AnalysisIDDescription = value_
            self.AnalysisIDDescription_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.AnalysisIDDescription)
        elif nodeName_ == "StartDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.StartDate = dval_
            self.StartDate_nsprefix_ = child_.prefix
        elif nodeName_ == "EndDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
            self.EndDate_nsprefix_ = child_.prefix
        elif nodeName_ == "Status":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Status")
            value_ = self.gds_validate_string(value_, node, "Status")
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
            # validate type StatusType
            self.validate_StatusType(self.Status)
        elif nodeName_ == "Analysis":
            obj_ = AnalysisPartyInfoStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Analysis.append(obj_)
            obj_.original_tagname_ = "Analysis"


# end class AnalysisTypeTableEntryType


class MovementTypeTableType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, MovementTypeTableEntry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if MovementTypeTableEntry is None:
            self.MovementTypeTableEntry = []
        else:
            self.MovementTypeTableEntry = MovementTypeTableEntry
        self.MovementTypeTableEntry_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MovementTypeTableType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MovementTypeTableType.subclass:
            return MovementTypeTableType.subclass(*args_, **kwargs_)
        else:
            return MovementTypeTableType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_MovementTypeTableEntry(self):
        return self.MovementTypeTableEntry

    def set_MovementTypeTableEntry(self, MovementTypeTableEntry):
        self.MovementTypeTableEntry = MovementTypeTableEntry

    def add_MovementTypeTableEntry(self, value):
        self.MovementTypeTableEntry.append(value)

    def insert_MovementTypeTableEntry_at(self, index, value):
        self.MovementTypeTableEntry.insert(index, value)

    def replace_MovementTypeTableEntry_at(self, index, value):
        self.MovementTypeTableEntry[index] = value

    def hasContent_(self):
        if self.MovementTypeTableEntry:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MovementTypeTableType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("MovementTypeTableType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "MovementTypeTableType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="MovementTypeTableType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="MovementTypeTableType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="MovementTypeTableType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MovementTypeTableType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for MovementTypeTableEntry_ in self.MovementTypeTableEntry:
            namespaceprefix_ = (
                self.MovementTypeTableEntry_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementTypeTableEntry_nsprefix_)
                else ""
            )
            MovementTypeTableEntry_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="MovementTypeTableEntry",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "MovementTypeTableEntry":
            obj_ = MovementTypeTableEntryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MovementTypeTableEntry.append(obj_)
            obj_.original_tagname_ = "MovementTypeTableEntry"


# end class MovementTypeTableType


class MovementTypeTableEntryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self, MovementType=None, Description=None, gds_collector_=None, **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.MovementType = MovementType
        self.validate_SAFcodeType(self.MovementType)
        self.MovementType_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MovementTypeTableEntryType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MovementTypeTableEntryType.subclass:
            return MovementTypeTableEntryType.subclass(*args_, **kwargs_)
        else:
            return MovementTypeTableEntryType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_MovementType(self):
        return self.MovementType

    def set_MovementType(self, MovementType):
        self.MovementType = MovementType

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.MovementType is not None or self.Description is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MovementTypeTableEntryType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("MovementTypeTableEntryType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "MovementTypeTableEntryType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="MovementTypeTableEntryType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="MovementTypeTableEntryType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="MovementTypeTableEntryType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MovementTypeTableEntryType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.MovementType is not None:
            namespaceprefix_ = (
                self.MovementType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementType>%s</%sMovementType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MovementType), input_name="MovementType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "MovementType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MovementType")
            value_ = self.gds_validate_string(value_, node, "MovementType")
            self.MovementType = value_
            self.MovementType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.MovementType)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)


# end class MovementTypeTableEntryType


class ProductsType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, ProductsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType.subclass:
            return ProductsType.subclass(*args_, **kwargs_)
        else:
            return ProductsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Product(self):
        return self.Product

    def set_Product(self, Product):
        self.Product = Product

    def add_Product(self, value):
        self.Product.append(value)

    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)

    def replace_Product_at(self, index, value):
        self.Product[index] = value

    def hasContent_(self):
        if self.Product:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ProductsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ProductsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ProductsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="ProductsType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ProductsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ProductsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ProductsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Product_ in self.Product:
            namespaceprefix_ = (
                self.Product_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Product_nsprefix_)
                else ""
            )
            Product_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Product",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Product":
            obj_ = ProductType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = "Product"


# end class ProductsType


class ProductType(GeneratedsSuper):
    """Not needed when not applicable"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        ProductCode=None,
        GoodsServicesID=None,
        ProductGroup=None,
        Description=None,
        ProductCommodityCode=None,
        ProductNumberCode=None,
        ValuationMethod=None,
        UOMBase=None,
        UOMStandard=None,
        UOMToUOMBaseConversionFactor=None,
        Tax=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.ProductCode = ProductCode
        self.validate_SAFmiddle2textType(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.GoodsServicesID = GoodsServicesID
        self.validate_SAFcodeType(self.GoodsServicesID)
        self.GoodsServicesID_nsprefix_ = None
        self.ProductGroup = ProductGroup
        self.validate_SAFmiddle2textType(self.ProductGroup)
        self.ProductGroup_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.ProductCommodityCode = ProductCommodityCode
        self.validate_SAFmiddle1textType(self.ProductCommodityCode)
        self.ProductCommodityCode_nsprefix_ = None
        self.ProductNumberCode = ProductNumberCode
        self.validate_SAFmiddle2textType(self.ProductNumberCode)
        self.ProductNumberCode_nsprefix_ = None
        self.ValuationMethod = ValuationMethod
        self.validate_SAFcodeType(self.ValuationMethod)
        self.ValuationMethod_nsprefix_ = None
        self.UOMBase = UOMBase
        self.validate_SAFcodeType(self.UOMBase)
        self.UOMBase_nsprefix_ = None
        self.UOMStandard = UOMStandard
        self.validate_SAFcodeType(self.UOMStandard)
        self.UOMStandard_nsprefix_ = None
        self.UOMToUOMBaseConversionFactor = UOMToUOMBaseConversionFactor
        self.UOMToUOMBaseConversionFactor_nsprefix_ = None
        if Tax is None:
            self.Tax = []
        else:
            self.Tax = Tax
        self.Tax_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, ProductType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductType.subclass:
            return ProductType.subclass(*args_, **kwargs_)
        else:
            return ProductType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_ProductCode(self):
        return self.ProductCode

    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode

    def get_GoodsServicesID(self):
        return self.GoodsServicesID

    def set_GoodsServicesID(self, GoodsServicesID):
        self.GoodsServicesID = GoodsServicesID

    def get_ProductGroup(self):
        return self.ProductGroup

    def set_ProductGroup(self, ProductGroup):
        self.ProductGroup = ProductGroup

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_ProductCommodityCode(self):
        return self.ProductCommodityCode

    def set_ProductCommodityCode(self, ProductCommodityCode):
        self.ProductCommodityCode = ProductCommodityCode

    def get_ProductNumberCode(self):
        return self.ProductNumberCode

    def set_ProductNumberCode(self, ProductNumberCode):
        self.ProductNumberCode = ProductNumberCode

    def get_ValuationMethod(self):
        return self.ValuationMethod

    def set_ValuationMethod(self, ValuationMethod):
        self.ValuationMethod = ValuationMethod

    def get_UOMBase(self):
        return self.UOMBase

    def set_UOMBase(self, UOMBase):
        self.UOMBase = UOMBase

    def get_UOMStandard(self):
        return self.UOMStandard

    def set_UOMStandard(self, UOMStandard):
        self.UOMStandard = UOMStandard

    def get_UOMToUOMBaseConversionFactor(self):
        return self.UOMToUOMBaseConversionFactor

    def set_UOMToUOMBaseConversionFactor(self, UOMToUOMBaseConversionFactor):
        self.UOMToUOMBaseConversionFactor = UOMToUOMBaseConversionFactor

    def get_Tax(self):
        return self.Tax

    def set_Tax(self, Tax):
        self.Tax = Tax

    def add_Tax(self, value):
        self.Tax.append(value)

    def insert_Tax_at(self, index, value):
        self.Tax.insert(index, value)

    def replace_Tax_at(self, index, value):
        self.Tax[index] = value

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.ProductCode is not None
            or self.GoodsServicesID is not None
            or self.ProductGroup is not None
            or self.Description is not None
            or self.ProductCommodityCode is not None
            or self.ProductNumberCode is not None
            or self.ValuationMethod is not None
            or self.UOMBase is not None
            or self.UOMStandard is not None
            or self.UOMToUOMBaseConversionFactor is not None
            or self.Tax
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ProductType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ProductType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ProductType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="ProductType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ProductType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ProductType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ProductType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.ProductCode is not None:
            namespaceprefix_ = (
                self.ProductCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductCode>%s</%sProductCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductCode), input_name="ProductCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GoodsServicesID is not None:
            namespaceprefix_ = (
                self.GoodsServicesID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GoodsServicesID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGoodsServicesID>%s</%sGoodsServicesID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.GoodsServicesID),
                            input_name="GoodsServicesID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductGroup is not None:
            namespaceprefix_ = (
                self.ProductGroup_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductGroup_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductGroup>%s</%sProductGroup>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductGroup), input_name="ProductGroup"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductCommodityCode is not None:
            namespaceprefix_ = (
                self.ProductCommodityCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductCommodityCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductCommodityCode>%s</%sProductCommodityCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductCommodityCode),
                            input_name="ProductCommodityCode",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductNumberCode is not None:
            namespaceprefix_ = (
                self.ProductNumberCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductNumberCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductNumberCode>%s</%sProductNumberCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductNumberCode),
                            input_name="ProductNumberCode",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ValuationMethod is not None:
            namespaceprefix_ = (
                self.ValuationMethod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ValuationMethod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sValuationMethod>%s</%sValuationMethod>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ValuationMethod),
                            input_name="ValuationMethod",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMBase is not None:
            namespaceprefix_ = (
                self.UOMBase_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMBase_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMBase>%s</%sUOMBase>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.UOMBase), input_name="UOMBase"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMStandard is not None:
            namespaceprefix_ = (
                self.UOMStandard_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMStandard_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMStandard>%s</%sUOMStandard>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.UOMStandard), input_name="UOMStandard"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMToUOMBaseConversionFactor is not None:
            namespaceprefix_ = (
                self.UOMToUOMBaseConversionFactor_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMToUOMBaseConversionFactor_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMToUOMBaseConversionFactor>%s</%sUOMToUOMBaseConversionFactor>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.UOMToUOMBaseConversionFactor,
                        input_name="UOMToUOMBaseConversionFactor",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Tax_ in self.Tax:
            namespaceprefix_ = (
                self.Tax_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Tax_nsprefix_)
                else ""
            )
            Tax_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Tax",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "ProductCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductCode")
            value_ = self.gds_validate_string(value_, node, "ProductCode")
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.ProductCode)
        elif nodeName_ == "GoodsServicesID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "GoodsServicesID")
            value_ = self.gds_validate_string(value_, node, "GoodsServicesID")
            self.GoodsServicesID = value_
            self.GoodsServicesID_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.GoodsServicesID)
        elif nodeName_ == "ProductGroup":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductGroup")
            value_ = self.gds_validate_string(value_, node, "ProductGroup")
            self.ProductGroup = value_
            self.ProductGroup_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.ProductGroup)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "ProductCommodityCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductCommodityCode")
            value_ = self.gds_validate_string(value_, node, "ProductCommodityCode")
            self.ProductCommodityCode = value_
            self.ProductCommodityCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.ProductCommodityCode)
        elif nodeName_ == "ProductNumberCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductNumberCode")
            value_ = self.gds_validate_string(value_, node, "ProductNumberCode")
            self.ProductNumberCode = value_
            self.ProductNumberCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.ProductNumberCode)
        elif nodeName_ == "ValuationMethod":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ValuationMethod")
            value_ = self.gds_validate_string(value_, node, "ValuationMethod")
            self.ValuationMethod = value_
            self.ValuationMethod_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.ValuationMethod)
        elif nodeName_ == "UOMBase":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UOMBase")
            value_ = self.gds_validate_string(value_, node, "UOMBase")
            self.UOMBase = value_
            self.UOMBase_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.UOMBase)
        elif nodeName_ == "UOMStandard":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UOMStandard")
            value_ = self.gds_validate_string(value_, node, "UOMStandard")
            self.UOMStandard = value_
            self.UOMStandard_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.UOMStandard)
        elif nodeName_ == "UOMToUOMBaseConversionFactor" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "UOMToUOMBaseConversionFactor")
            fval_ = self.gds_validate_decimal(
                fval_, node, "UOMToUOMBaseConversionFactor"
            )
            self.UOMToUOMBaseConversionFactor = fval_
            self.UOMToUOMBaseConversionFactor_nsprefix_ = child_.prefix
        elif nodeName_ == "Tax":
            obj_ = TaxType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tax.append(obj_)
            obj_.original_tagname_ = "Tax"


# end class ProductType


class TaxType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self, TaxType_member=None, TaxCode=None, gds_collector_=None, **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TaxType = TaxType_member
        self.validate_SAFcodeType(self.TaxType)
        self.TaxType_nsprefix_ = None
        self.TaxCode = TaxCode
        self.validate_SAFcodeType(self.TaxCode)
        self.TaxCode_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType.subclass:
            return TaxType.subclass(*args_, **kwargs_)
        else:
            return TaxType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxType(self):
        return self.TaxType

    def set_TaxType(self, TaxType):
        self.TaxType = TaxType

    def get_TaxCode(self):
        return self.TaxCode

    def set_TaxCode(self, TaxCode):
        self.TaxCode = TaxCode

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.TaxType is not None or self.TaxCode is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TaxType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TaxType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="TaxType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TaxType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="TaxType"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TaxType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TaxType is not None:
            namespaceprefix_ = (
                self.TaxType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxType>%s</%sTaxType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxType), input_name="TaxType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxCode is not None:
            namespaceprefix_ = (
                self.TaxCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxCode>%s</%sTaxCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TaxCode), input_name="TaxCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxType")
            value_ = self.gds_validate_string(value_, node, "TaxType")
            self.TaxType = value_
            self.TaxType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.TaxType)
        elif nodeName_ == "TaxCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TaxCode")
            value_ = self.gds_validate_string(value_, node, "TaxCode")
            self.TaxCode = value_
            self.TaxCode_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.TaxCode)


# end class TaxType


class PhysicalStockType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, PhysicalStockEntry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if PhysicalStockEntry is None:
            self.PhysicalStockEntry = []
        else:
            self.PhysicalStockEntry = PhysicalStockEntry
        self.PhysicalStockEntry_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, PhysicalStockType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalStockType.subclass:
            return PhysicalStockType.subclass(*args_, **kwargs_)
        else:
            return PhysicalStockType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_PhysicalStockEntry(self):
        return self.PhysicalStockEntry

    def set_PhysicalStockEntry(self, PhysicalStockEntry):
        self.PhysicalStockEntry = PhysicalStockEntry

    def add_PhysicalStockEntry(self, value):
        self.PhysicalStockEntry.append(value)

    def insert_PhysicalStockEntry_at(self, index, value):
        self.PhysicalStockEntry.insert(index, value)

    def replace_PhysicalStockEntry_at(self, index, value):
        self.PhysicalStockEntry[index] = value

    def hasContent_(self):
        if self.PhysicalStockEntry:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PhysicalStockType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PhysicalStockType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PhysicalStockType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="PhysicalStockType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PhysicalStockType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PhysicalStockType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PhysicalStockType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for PhysicalStockEntry_ in self.PhysicalStockEntry:
            namespaceprefix_ = (
                self.PhysicalStockEntry_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PhysicalStockEntry_nsprefix_)
                else ""
            )
            PhysicalStockEntry_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PhysicalStockEntry",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "PhysicalStockEntry":
            obj_ = PhysicalStockEntryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PhysicalStockEntry.append(obj_)
            obj_.original_tagname_ = "PhysicalStockEntry"


# end class PhysicalStockType


class PhysicalStockEntryType(GeneratedsSuper):
    """Not needed when UOMPhysicalStock equals UOMBase"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        WarehouseID=None,
        LocationID=None,
        ProductCode=None,
        StockAccountNo=None,
        ProductType=None,
        ProductStatus=None,
        StockAccountCommodityCode=None,
        OwnerID=None,
        UOMPhysicalStock=None,
        UOMToUOMBaseConversionFactor=None,
        UnitPrice=None,
        OpeningStockQuantity=None,
        OpeningStockValue=None,
        ClosingStockQuantity=None,
        ClosingStockValue=None,
        StockCharacteristics=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.WarehouseID = WarehouseID
        self.validate_SAFmiddle1textType(self.WarehouseID)
        self.WarehouseID_nsprefix_ = None
        self.LocationID = LocationID
        self.validate_SAFshorttextType(self.LocationID)
        self.LocationID_nsprefix_ = None
        self.ProductCode = ProductCode
        self.validate_SAFmiddle2textType(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.StockAccountNo = StockAccountNo
        self.validate_SAFmiddle2textType(self.StockAccountNo)
        self.StockAccountNo_nsprefix_ = None
        self.ProductType = ProductType
        self.validate_SAFshorttextType(self.ProductType)
        self.ProductType_nsprefix_ = None
        self.ProductStatus = ProductStatus
        self.validate_SAFshorttextType(self.ProductStatus)
        self.ProductStatus_nsprefix_ = None
        self.StockAccountCommodityCode = StockAccountCommodityCode
        self.validate_SAFmiddle1textType(self.StockAccountCommodityCode)
        self.StockAccountCommodityCode_nsprefix_ = None
        self.OwnerID = OwnerID
        self.validate_SAFmiddle1textType(self.OwnerID)
        self.OwnerID_nsprefix_ = None
        self.UOMPhysicalStock = UOMPhysicalStock
        self.validate_SAFcodeType(self.UOMPhysicalStock)
        self.UOMPhysicalStock_nsprefix_ = None
        self.UOMToUOMBaseConversionFactor = UOMToUOMBaseConversionFactor
        self.UOMToUOMBaseConversionFactor_nsprefix_ = None
        self.UnitPrice = UnitPrice
        self.validate_SAFmonetaryType(self.UnitPrice)
        self.UnitPrice_nsprefix_ = None
        self.OpeningStockQuantity = OpeningStockQuantity
        self.validate_SAFquantityType(self.OpeningStockQuantity)
        self.OpeningStockQuantity_nsprefix_ = None
        self.OpeningStockValue = OpeningStockValue
        self.validate_SAFmonetaryType(self.OpeningStockValue)
        self.OpeningStockValue_nsprefix_ = None
        self.ClosingStockQuantity = ClosingStockQuantity
        self.validate_SAFquantityType(self.ClosingStockQuantity)
        self.ClosingStockQuantity_nsprefix_ = None
        self.ClosingStockValue = ClosingStockValue
        self.validate_SAFmonetaryType(self.ClosingStockValue)
        self.ClosingStockValue_nsprefix_ = None
        self.StockCharacteristics = StockCharacteristics
        self.StockCharacteristics_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalStockEntryType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalStockEntryType.subclass:
            return PhysicalStockEntryType.subclass(*args_, **kwargs_)
        else:
            return PhysicalStockEntryType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_WarehouseID(self):
        return self.WarehouseID

    def set_WarehouseID(self, WarehouseID):
        self.WarehouseID = WarehouseID

    def get_LocationID(self):
        return self.LocationID

    def set_LocationID(self, LocationID):
        self.LocationID = LocationID

    def get_ProductCode(self):
        return self.ProductCode

    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode

    def get_StockAccountNo(self):
        return self.StockAccountNo

    def set_StockAccountNo(self, StockAccountNo):
        self.StockAccountNo = StockAccountNo

    def get_ProductType(self):
        return self.ProductType

    def set_ProductType(self, ProductType):
        self.ProductType = ProductType

    def get_ProductStatus(self):
        return self.ProductStatus

    def set_ProductStatus(self, ProductStatus):
        self.ProductStatus = ProductStatus

    def get_StockAccountCommodityCode(self):
        return self.StockAccountCommodityCode

    def set_StockAccountCommodityCode(self, StockAccountCommodityCode):
        self.StockAccountCommodityCode = StockAccountCommodityCode

    def get_OwnerID(self):
        return self.OwnerID

    def set_OwnerID(self, OwnerID):
        self.OwnerID = OwnerID

    def get_UOMPhysicalStock(self):
        return self.UOMPhysicalStock

    def set_UOMPhysicalStock(self, UOMPhysicalStock):
        self.UOMPhysicalStock = UOMPhysicalStock

    def get_UOMToUOMBaseConversionFactor(self):
        return self.UOMToUOMBaseConversionFactor

    def set_UOMToUOMBaseConversionFactor(self, UOMToUOMBaseConversionFactor):
        self.UOMToUOMBaseConversionFactor = UOMToUOMBaseConversionFactor

    def get_UnitPrice(self):
        return self.UnitPrice

    def set_UnitPrice(self, UnitPrice):
        self.UnitPrice = UnitPrice

    def get_OpeningStockQuantity(self):
        return self.OpeningStockQuantity

    def set_OpeningStockQuantity(self, OpeningStockQuantity):
        self.OpeningStockQuantity = OpeningStockQuantity

    def get_OpeningStockValue(self):
        return self.OpeningStockValue

    def set_OpeningStockValue(self, OpeningStockValue):
        self.OpeningStockValue = OpeningStockValue

    def get_ClosingStockQuantity(self):
        return self.ClosingStockQuantity

    def set_ClosingStockQuantity(self, ClosingStockQuantity):
        self.ClosingStockQuantity = ClosingStockQuantity

    def get_ClosingStockValue(self):
        return self.ClosingStockValue

    def set_ClosingStockValue(self, ClosingStockValue):
        self.ClosingStockValue = ClosingStockValue

    def get_StockCharacteristics(self):
        return self.StockCharacteristics

    def set_StockCharacteristics(self, StockCharacteristics):
        self.StockCharacteristics = StockCharacteristics

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFquantityType(self, value):
        result = True
        # Validate type SAFquantityType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 22:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFquantityType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.WarehouseID is not None
            or self.LocationID is not None
            or self.ProductCode is not None
            or self.StockAccountNo is not None
            or self.ProductType is not None
            or self.ProductStatus is not None
            or self.StockAccountCommodityCode is not None
            or self.OwnerID is not None
            or self.UOMPhysicalStock is not None
            or self.UOMToUOMBaseConversionFactor is not None
            or self.UnitPrice is not None
            or self.OpeningStockQuantity is not None
            or self.OpeningStockValue is not None
            or self.ClosingStockQuantity is not None
            or self.ClosingStockValue is not None
            or self.StockCharacteristics is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PhysicalStockEntryType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PhysicalStockEntryType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PhysicalStockEntryType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="PhysicalStockEntryType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PhysicalStockEntryType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PhysicalStockEntryType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PhysicalStockEntryType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.WarehouseID is not None:
            namespaceprefix_ = (
                self.WarehouseID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.WarehouseID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sWarehouseID>%s</%sWarehouseID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.WarehouseID), input_name="WarehouseID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.LocationID is not None:
            namespaceprefix_ = (
                self.LocationID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LocationID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLocationID>%s</%sLocationID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LocationID), input_name="LocationID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductCode is not None:
            namespaceprefix_ = (
                self.ProductCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductCode>%s</%sProductCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductCode), input_name="ProductCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StockAccountNo is not None:
            namespaceprefix_ = (
                self.StockAccountNo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockAccountNo_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStockAccountNo>%s</%sStockAccountNo>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.StockAccountNo), input_name="StockAccountNo"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductType is not None:
            namespaceprefix_ = (
                self.ProductType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductType>%s</%sProductType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductType), input_name="ProductType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductStatus is not None:
            namespaceprefix_ = (
                self.ProductStatus_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductStatus_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductStatus>%s</%sProductStatus>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductStatus), input_name="ProductStatus"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StockAccountCommodityCode is not None:
            namespaceprefix_ = (
                self.StockAccountCommodityCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockAccountCommodityCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStockAccountCommodityCode>%s</%sStockAccountCommodityCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.StockAccountCommodityCode),
                            input_name="StockAccountCommodityCode",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OwnerID is not None:
            namespaceprefix_ = (
                self.OwnerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OwnerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOwnerID>%s</%sOwnerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.OwnerID), input_name="OwnerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMPhysicalStock is not None:
            namespaceprefix_ = (
                self.UOMPhysicalStock_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMPhysicalStock_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMPhysicalStock>%s</%sUOMPhysicalStock>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.UOMPhysicalStock),
                            input_name="UOMPhysicalStock",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMToUOMBaseConversionFactor is not None:
            namespaceprefix_ = (
                self.UOMToUOMBaseConversionFactor_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMToUOMBaseConversionFactor_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMToUOMBaseConversionFactor>%s</%sUOMToUOMBaseConversionFactor>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.UOMToUOMBaseConversionFactor,
                        input_name="UOMToUOMBaseConversionFactor",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UnitPrice is not None:
            namespaceprefix_ = (
                self.UnitPrice_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UnitPrice_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUnitPrice>%s</%sUnitPrice>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.UnitPrice, input_name="UnitPrice"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningStockQuantity is not None:
            namespaceprefix_ = (
                self.OpeningStockQuantity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningStockQuantity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningStockQuantity>%s</%sOpeningStockQuantity>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningStockQuantity, input_name="OpeningStockQuantity"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OpeningStockValue is not None:
            namespaceprefix_ = (
                self.OpeningStockValue_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OpeningStockValue_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOpeningStockValue>%s</%sOpeningStockValue>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.OpeningStockValue, input_name="OpeningStockValue"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingStockQuantity is not None:
            namespaceprefix_ = (
                self.ClosingStockQuantity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingStockQuantity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingStockQuantity>%s</%sClosingStockQuantity>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingStockQuantity, input_name="ClosingStockQuantity"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ClosingStockValue is not None:
            namespaceprefix_ = (
                self.ClosingStockValue_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ClosingStockValue_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sClosingStockValue>%s</%sClosingStockValue>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ClosingStockValue, input_name="ClosingStockValue"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StockCharacteristics is not None:
            namespaceprefix_ = (
                self.StockCharacteristics_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockCharacteristics_nsprefix_)
                else ""
            )
            self.StockCharacteristics.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="StockCharacteristics",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "WarehouseID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "WarehouseID")
            value_ = self.gds_validate_string(value_, node, "WarehouseID")
            self.WarehouseID = value_
            self.WarehouseID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.WarehouseID)
        elif nodeName_ == "LocationID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LocationID")
            value_ = self.gds_validate_string(value_, node, "LocationID")
            self.LocationID = value_
            self.LocationID_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.LocationID)
        elif nodeName_ == "ProductCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductCode")
            value_ = self.gds_validate_string(value_, node, "ProductCode")
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.ProductCode)
        elif nodeName_ == "StockAccountNo":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StockAccountNo")
            value_ = self.gds_validate_string(value_, node, "StockAccountNo")
            self.StockAccountNo = value_
            self.StockAccountNo_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.StockAccountNo)
        elif nodeName_ == "ProductType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductType")
            value_ = self.gds_validate_string(value_, node, "ProductType")
            self.ProductType = value_
            self.ProductType_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.ProductType)
        elif nodeName_ == "ProductStatus":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductStatus")
            value_ = self.gds_validate_string(value_, node, "ProductStatus")
            self.ProductStatus = value_
            self.ProductStatus_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.ProductStatus)
        elif nodeName_ == "StockAccountCommodityCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StockAccountCommodityCode")
            value_ = self.gds_validate_string(value_, node, "StockAccountCommodityCode")
            self.StockAccountCommodityCode = value_
            self.StockAccountCommodityCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.StockAccountCommodityCode)
        elif nodeName_ == "OwnerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "OwnerID")
            value_ = self.gds_validate_string(value_, node, "OwnerID")
            self.OwnerID = value_
            self.OwnerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.OwnerID)
        elif nodeName_ == "UOMPhysicalStock":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UOMPhysicalStock")
            value_ = self.gds_validate_string(value_, node, "UOMPhysicalStock")
            self.UOMPhysicalStock = value_
            self.UOMPhysicalStock_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.UOMPhysicalStock)
        elif nodeName_ == "UOMToUOMBaseConversionFactor" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "UOMToUOMBaseConversionFactor")
            fval_ = self.gds_validate_decimal(
                fval_, node, "UOMToUOMBaseConversionFactor"
            )
            self.UOMToUOMBaseConversionFactor = fval_
            self.UOMToUOMBaseConversionFactor_nsprefix_ = child_.prefix
        elif nodeName_ == "UnitPrice" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "UnitPrice")
            fval_ = self.gds_validate_decimal(fval_, node, "UnitPrice")
            self.UnitPrice = fval_
            self.UnitPrice_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.UnitPrice)
        elif nodeName_ == "OpeningStockQuantity" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningStockQuantity")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningStockQuantity")
            self.OpeningStockQuantity = fval_
            self.OpeningStockQuantity_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.OpeningStockQuantity)
        elif nodeName_ == "OpeningStockValue" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "OpeningStockValue")
            fval_ = self.gds_validate_decimal(fval_, node, "OpeningStockValue")
            self.OpeningStockValue = fval_
            self.OpeningStockValue_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.OpeningStockValue)
        elif nodeName_ == "ClosingStockQuantity" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingStockQuantity")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingStockQuantity")
            self.ClosingStockQuantity = fval_
            self.ClosingStockQuantity_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.ClosingStockQuantity)
        elif nodeName_ == "ClosingStockValue" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ClosingStockValue")
            fval_ = self.gds_validate_decimal(fval_, node, "ClosingStockValue")
            self.ClosingStockValue = fval_
            self.ClosingStockValue_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ClosingStockValue)
        elif nodeName_ == "StockCharacteristics":
            obj_ = StockCharacteristicsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StockCharacteristics = obj_
            obj_.original_tagname_ = "StockCharacteristics"


# end class PhysicalStockEntryType


class StockCharacteristicsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        StockCharacteristic=None,
        StockCharacteristicValue=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if StockCharacteristic is None:
            self.StockCharacteristic = []
        else:
            self.StockCharacteristic = StockCharacteristic
        self.StockCharacteristic_nsprefix_ = None
        if StockCharacteristicValue is None:
            self.StockCharacteristicValue = []
        else:
            self.StockCharacteristicValue = StockCharacteristicValue
        self.StockCharacteristicValue_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StockCharacteristicsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StockCharacteristicsType.subclass:
            return StockCharacteristicsType.subclass(*args_, **kwargs_)
        else:
            return StockCharacteristicsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_StockCharacteristic(self):
        return self.StockCharacteristic

    def set_StockCharacteristic(self, StockCharacteristic):
        self.StockCharacteristic = StockCharacteristic

    def add_StockCharacteristic(self, value):
        self.StockCharacteristic.append(value)

    def insert_StockCharacteristic_at(self, index, value):
        self.StockCharacteristic.insert(index, value)

    def replace_StockCharacteristic_at(self, index, value):
        self.StockCharacteristic[index] = value

    def get_StockCharacteristicValue(self):
        return self.StockCharacteristicValue

    def set_StockCharacteristicValue(self, StockCharacteristicValue):
        self.StockCharacteristicValue = StockCharacteristicValue

    def add_StockCharacteristicValue(self, value):
        self.StockCharacteristicValue.append(value)

    def insert_StockCharacteristicValue_at(self, index, value):
        self.StockCharacteristicValue.insert(index, value)

    def replace_StockCharacteristicValue_at(self, index, value):
        self.StockCharacteristicValue[index] = value

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.StockCharacteristic or self.StockCharacteristicValue:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="StockCharacteristicsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("StockCharacteristicsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "StockCharacteristicsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="StockCharacteristicsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="StockCharacteristicsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="StockCharacteristicsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="StockCharacteristicsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        for StockCharacteristic_ in self.StockCharacteristic:
            namespaceprefix_ = (
                self.StockCharacteristic_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockCharacteristic_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStockCharacteristic>%s</%sStockCharacteristic>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(StockCharacteristic_),
                            input_name="StockCharacteristic",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for StockCharacteristicValue_ in self.StockCharacteristicValue:
            namespaceprefix_ = (
                self.StockCharacteristicValue_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockCharacteristicValue_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStockCharacteristicValue>%s</%sStockCharacteristicValue>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(StockCharacteristicValue_),
                            input_name="StockCharacteristicValue",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "StockCharacteristic":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StockCharacteristic")
            value_ = self.gds_validate_string(value_, node, "StockCharacteristic")
            self.StockCharacteristic.append(value_)
            self.StockCharacteristic_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.StockCharacteristic[-1])
        elif nodeName_ == "StockCharacteristicValue":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StockCharacteristicValue")
            value_ = self.gds_validate_string(value_, node, "StockCharacteristicValue")
            self.StockCharacteristicValue.append(value_)
            self.StockCharacteristicValue_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.StockCharacteristicValue[-1])


# end class StockCharacteristicsType


class OwnersType(GeneratedsSuper):
    """The owners of a company."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Owner=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Owner is None:
            self.Owner = []
        else:
            self.Owner = Owner
        self.Owner_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, OwnersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OwnersType.subclass:
            return OwnersType.subclass(*args_, **kwargs_)
        else:
            return OwnersType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Owner(self):
        return self.Owner

    def set_Owner(self, Owner):
        self.Owner = Owner

    def add_Owner(self, value):
        self.Owner.append(value)

    def insert_Owner_at(self, index, value):
        self.Owner.insert(index, value)

    def replace_Owner_at(self, index, value):
        self.Owner[index] = value

    def hasContent_(self):
        if self.Owner:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="OwnersType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("OwnersType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "OwnersType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="OwnersType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="OwnersType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="OwnersType"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="OwnersType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Owner_ in self.Owner:
            namespaceprefix_ = (
                self.Owner_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Owner_nsprefix_)
                else ""
            )
            Owner_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Owner",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Owner":
            obj_ = OwnerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Owner.append(obj_)
            obj_.original_tagname_ = "Owner"


# end class OwnersType


class OwnerType(CompanyStructure):
    """Owner information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyStructure

    def __init__(
        self,
        RegistrationNumber=None,
        Name=None,
        Address=None,
        Contact=None,
        TaxRegistration=None,
        BankAccount=None,
        OwnerID=None,
        AccountID=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("OwnerType"), self).__init__(
            RegistrationNumber,
            Name,
            Address,
            Contact,
            TaxRegistration,
            BankAccount,
            **kwargs_
        )
        self.OwnerID = OwnerID
        self.validate_SAFmiddle1textType(self.OwnerID)
        self.OwnerID_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, OwnerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OwnerType.subclass:
            return OwnerType.subclass(*args_, **kwargs_)
        else:
            return OwnerType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_OwnerID(self):
        return self.OwnerID

    def set_OwnerID(self, OwnerID):
        self.OwnerID = OwnerID

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.OwnerID is not None
            or self.AccountID is not None
            or super(OwnerType, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="OwnerType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("OwnerType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "OwnerType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="OwnerType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="OwnerType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="OwnerType"
    ):
        super(OwnerType, self).exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="OwnerType"
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="OwnerType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        super(OwnerType, self).exportChildren(
            outfile,
            level,
            namespaceprefix_,
            namespacedef_,
            name_,
            True,
            pretty_print=pretty_print,
        )
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.OwnerID is not None:
            namespaceprefix_ = (
                self.OwnerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OwnerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOwnerID>%s</%sOwnerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.OwnerID), input_name="OwnerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(OwnerType, self).buildAttributes(node, attrs, already_processed)

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "OwnerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "OwnerID")
            value_ = self.gds_validate_string(value_, node, "OwnerID")
            self.OwnerID = value_
            self.OwnerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.OwnerID)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        super(OwnerType, self).buildChildren(child_, node, nodeName_, True)


# end class OwnerType


class AssetsType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Asset=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Asset is None:
            self.Asset = []
        else:
            self.Asset = Asset
        self.Asset_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AssetsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetsType.subclass:
            return AssetsType.subclass(*args_, **kwargs_)
        else:
            return AssetsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Asset(self):
        return self.Asset

    def set_Asset(self, Asset):
        self.Asset = Asset

    def add_Asset(self, value):
        self.Asset.append(value)

    def insert_Asset_at(self, index, value):
        self.Asset.insert(index, value)

    def replace_Asset_at(self, index, value):
        self.Asset[index] = value

    def hasContent_(self):
        if self.Asset:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AssetsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AssetsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="AssetsType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AssetsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="AssetsType"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Asset_ in self.Asset:
            namespaceprefix_ = (
                self.Asset_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Asset_nsprefix_)
                else ""
            )
            Asset_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Asset",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Asset":
            obj_ = AssetType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Asset.append(obj_)
            obj_.original_tagname_ = "Asset"


# end class AssetsType


class AssetType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AssetID=None,
        AccountID=None,
        Description=None,
        Supplier=None,
        PurchaseOrderDate=None,
        DateOfAcquisition=None,
        StartUpDate=None,
        Valuations=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AssetID = AssetID
        self.validate_SAFmiddle1textType(self.AssetID)
        self.AssetID_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        if Supplier is None:
            self.Supplier = []
        else:
            self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        if isinstance(PurchaseOrderDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                PurchaseOrderDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = PurchaseOrderDate
        self.PurchaseOrderDate = initvalue_
        self.PurchaseOrderDate_nsprefix_ = None
        if isinstance(DateOfAcquisition, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                DateOfAcquisition, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = DateOfAcquisition
        self.DateOfAcquisition = initvalue_
        self.DateOfAcquisition_nsprefix_ = None
        if isinstance(StartUpDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartUpDate, "%Y-%m-%d").date()
        else:
            initvalue_ = StartUpDate
        self.StartUpDate = initvalue_
        self.StartUpDate_nsprefix_ = None
        self.Valuations = Valuations
        self.Valuations_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, AssetType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetType.subclass:
            return AssetType.subclass(*args_, **kwargs_)
        else:
            return AssetType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AssetID(self):
        return self.AssetID

    def set_AssetID(self, AssetID):
        self.AssetID = AssetID

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_Supplier(self):
        return self.Supplier

    def set_Supplier(self, Supplier):
        self.Supplier = Supplier

    def add_Supplier(self, value):
        self.Supplier.append(value)

    def insert_Supplier_at(self, index, value):
        self.Supplier.insert(index, value)

    def replace_Supplier_at(self, index, value):
        self.Supplier[index] = value

    def get_PurchaseOrderDate(self):
        return self.PurchaseOrderDate

    def set_PurchaseOrderDate(self, PurchaseOrderDate):
        self.PurchaseOrderDate = PurchaseOrderDate

    def get_DateOfAcquisition(self):
        return self.DateOfAcquisition

    def set_DateOfAcquisition(self, DateOfAcquisition):
        self.DateOfAcquisition = DateOfAcquisition

    def get_StartUpDate(self):
        return self.StartUpDate

    def set_StartUpDate(self, StartUpDate):
        self.StartUpDate = StartUpDate

    def get_Valuations(self):
        return self.Valuations

    def set_Valuations(self, Valuations):
        self.Valuations = Valuations

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AssetID is not None
            or self.AccountID is not None
            or self.Description is not None
            or self.Supplier
            or self.PurchaseOrderDate is not None
            or self.DateOfAcquisition is not None
            or self.StartUpDate is not None
            or self.Valuations is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AssetType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AssetType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="AssetType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AssetType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="AssetType"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AssetID is not None:
            namespaceprefix_ = (
                self.AssetID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetID>%s</%sAssetID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AssetID), input_name="AssetID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Supplier_ in self.Supplier:
            namespaceprefix_ = (
                self.Supplier_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Supplier_nsprefix_)
                else ""
            )
            Supplier_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Supplier",
                pretty_print=pretty_print,
            )
        if self.PurchaseOrderDate is not None:
            namespaceprefix_ = (
                self.PurchaseOrderDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PurchaseOrderDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPurchaseOrderDate>%s</%sPurchaseOrderDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.PurchaseOrderDate, input_name="PurchaseOrderDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DateOfAcquisition is not None:
            namespaceprefix_ = (
                self.DateOfAcquisition_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DateOfAcquisition_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDateOfAcquisition>%s</%sDateOfAcquisition>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.DateOfAcquisition, input_name="DateOfAcquisition"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StartUpDate is not None:
            namespaceprefix_ = (
                self.StartUpDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StartUpDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStartUpDate>%s</%sStartUpDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.StartUpDate, input_name="StartUpDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Valuations is not None:
            namespaceprefix_ = (
                self.Valuations_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Valuations_nsprefix_)
                else ""
            )
            self.Valuations.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Valuations",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AssetID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AssetID")
            value_ = self.gds_validate_string(value_, node, "AssetID")
            self.AssetID = value_
            self.AssetID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.AssetID)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "Supplier":
            obj_ = SupplierType1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier.append(obj_)
            obj_.original_tagname_ = "Supplier"
        elif nodeName_ == "PurchaseOrderDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PurchaseOrderDate = dval_
            self.PurchaseOrderDate_nsprefix_ = child_.prefix
        elif nodeName_ == "DateOfAcquisition":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateOfAcquisition = dval_
            self.DateOfAcquisition_nsprefix_ = child_.prefix
        elif nodeName_ == "StartUpDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.StartUpDate = dval_
            self.StartUpDate_nsprefix_ = child_.prefix
        elif nodeName_ == "Valuations":
            obj_ = ValuationsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Valuations = obj_
            obj_.original_tagname_ = "Valuations"


# end class AssetType


class SupplierType1(GeneratedsSuper):
    """Contains the information of all suppliers, including the historical
    suppliers."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        SupplierName=None,
        SupplierID=None,
        PostalAddress=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.SupplierName = SupplierName
        self.validate_SAFmiddle2textType(self.SupplierName)
        self.SupplierName_nsprefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.PostalAddress = PostalAddress
        self.PostalAddress_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SupplierType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplierType1.subclass:
            return SupplierType1.subclass(*args_, **kwargs_)
        else:
            return SupplierType1(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SupplierName(self):
        return self.SupplierName

    def set_SupplierName(self, SupplierName):
        self.SupplierName = SupplierName

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_PostalAddress(self):
        return self.PostalAddress

    def set_PostalAddress(self, PostalAddress):
        self.PostalAddress = PostalAddress

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.SupplierName is not None
            or self.SupplierID is not None
            or self.PostalAddress is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierType1",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SupplierType1")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SupplierType1":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SupplierType1"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SupplierType1",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SupplierType1",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierType1",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.SupplierName is not None:
            namespaceprefix_ = (
                self.SupplierName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierName>%s</%sSupplierName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierName), input_name="SupplierName"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PostalAddress is not None:
            namespaceprefix_ = (
                self.PostalAddress_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PostalAddress_nsprefix_)
                else ""
            )
            self.PostalAddress.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PostalAddress",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SupplierName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierName")
            value_ = self.gds_validate_string(value_, node, "SupplierName")
            self.SupplierName = value_
            self.SupplierName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.SupplierName)
        elif nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "PostalAddress":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PostalAddress = obj_
            obj_.original_tagname_ = "PostalAddress"


# end class SupplierType1


class ValuationsType(GeneratedsSuper):
    """The data can be reported for different purposes. More than one can be in
    this SAF."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Valuation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if Valuation is None:
            self.Valuation = []
        else:
            self.Valuation = Valuation
        self.Valuation_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, ValuationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValuationsType.subclass:
            return ValuationsType.subclass(*args_, **kwargs_)
        else:
            return ValuationsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Valuation(self):
        return self.Valuation

    def set_Valuation(self, Valuation):
        self.Valuation = Valuation

    def add_Valuation(self, value):
        self.Valuation.append(value)

    def insert_Valuation_at(self, index, value):
        self.Valuation.insert(index, value)

    def replace_Valuation_at(self, index, value):
        self.Valuation[index] = value

    def hasContent_(self):
        if self.Valuation:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ValuationsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ValuationsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ValuationsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="ValuationsType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ValuationsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ValuationsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ValuationsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for Valuation_ in self.Valuation:
            namespaceprefix_ = (
                self.Valuation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Valuation_nsprefix_)
                else ""
            )
            Valuation_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Valuation",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Valuation":
            obj_ = ValuationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Valuation.append(obj_)
            obj_.original_tagname_ = "Valuation"


# end class ValuationsType


class ValuationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AssetValuationType=None,
        ValuationClass=None,
        AcquisitionAndProductionCostsBegin=None,
        AcquisitionAndProductionCostsEnd=None,
        InvestmentSupport=None,
        AssetLifeYear=None,
        AssetLifeMonth=None,
        AssetAddition=None,
        Transfers=None,
        AssetDisposal=None,
        BookValueBegin=None,
        DepreciationMethod=None,
        DepreciationPercentage=None,
        DepreciationForPeriod=None,
        AppreciationForPeriod=None,
        ExtraordinaryDepreciationsForPeriod=None,
        AccumulatedDepreciation=None,
        BookValueEnd=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AssetValuationType = AssetValuationType
        self.validate_SAFshorttextType(self.AssetValuationType)
        self.AssetValuationType_nsprefix_ = None
        self.ValuationClass = ValuationClass
        self.validate_SAFshorttextType(self.ValuationClass)
        self.ValuationClass_nsprefix_ = None
        self.AcquisitionAndProductionCostsBegin = AcquisitionAndProductionCostsBegin
        self.validate_SAFmonetaryType(self.AcquisitionAndProductionCostsBegin)
        self.AcquisitionAndProductionCostsBegin_nsprefix_ = None
        self.AcquisitionAndProductionCostsEnd = AcquisitionAndProductionCostsEnd
        self.validate_SAFmonetaryType(self.AcquisitionAndProductionCostsEnd)
        self.AcquisitionAndProductionCostsEnd_nsprefix_ = None
        self.InvestmentSupport = InvestmentSupport
        self.validate_SAFmonetaryType(self.InvestmentSupport)
        self.InvestmentSupport_nsprefix_ = None
        self.AssetLifeYear = AssetLifeYear
        self.AssetLifeYear_nsprefix_ = None
        self.AssetLifeMonth = AssetLifeMonth
        self.AssetLifeMonth_nsprefix_ = None
        self.AssetAddition = AssetAddition
        self.validate_SAFmonetaryType(self.AssetAddition)
        self.AssetAddition_nsprefix_ = None
        self.Transfers = Transfers
        self.validate_SAFmonetaryType(self.Transfers)
        self.Transfers_nsprefix_ = None
        self.AssetDisposal = AssetDisposal
        self.validate_SAFmonetaryType(self.AssetDisposal)
        self.AssetDisposal_nsprefix_ = None
        self.BookValueBegin = BookValueBegin
        self.validate_SAFmonetaryType(self.BookValueBegin)
        self.BookValueBegin_nsprefix_ = None
        self.DepreciationMethod = DepreciationMethod
        self.validate_SAFmiddle1textType(self.DepreciationMethod)
        self.DepreciationMethod_nsprefix_ = None
        self.DepreciationPercentage = DepreciationPercentage
        self.DepreciationPercentage_nsprefix_ = None
        self.DepreciationForPeriod = DepreciationForPeriod
        self.validate_SAFmonetaryType(self.DepreciationForPeriod)
        self.DepreciationForPeriod_nsprefix_ = None
        self.AppreciationForPeriod = AppreciationForPeriod
        self.validate_SAFmonetaryType(self.AppreciationForPeriod)
        self.AppreciationForPeriod_nsprefix_ = None
        self.ExtraordinaryDepreciationsForPeriod = ExtraordinaryDepreciationsForPeriod
        self.ExtraordinaryDepreciationsForPeriod_nsprefix_ = None
        self.AccumulatedDepreciation = AccumulatedDepreciation
        self.validate_SAFmonetaryType(self.AccumulatedDepreciation)
        self.AccumulatedDepreciation_nsprefix_ = None
        self.BookValueEnd = BookValueEnd
        self.validate_SAFmonetaryType(self.BookValueEnd)
        self.BookValueEnd_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, ValuationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValuationType.subclass:
            return ValuationType.subclass(*args_, **kwargs_)
        else:
            return ValuationType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AssetValuationType(self):
        return self.AssetValuationType

    def set_AssetValuationType(self, AssetValuationType):
        self.AssetValuationType = AssetValuationType

    def get_ValuationClass(self):
        return self.ValuationClass

    def set_ValuationClass(self, ValuationClass):
        self.ValuationClass = ValuationClass

    def get_AcquisitionAndProductionCostsBegin(self):
        return self.AcquisitionAndProductionCostsBegin

    def set_AcquisitionAndProductionCostsBegin(
        self, AcquisitionAndProductionCostsBegin
    ):
        self.AcquisitionAndProductionCostsBegin = AcquisitionAndProductionCostsBegin

    def get_AcquisitionAndProductionCostsEnd(self):
        return self.AcquisitionAndProductionCostsEnd

    def set_AcquisitionAndProductionCostsEnd(self, AcquisitionAndProductionCostsEnd):
        self.AcquisitionAndProductionCostsEnd = AcquisitionAndProductionCostsEnd

    def get_InvestmentSupport(self):
        return self.InvestmentSupport

    def set_InvestmentSupport(self, InvestmentSupport):
        self.InvestmentSupport = InvestmentSupport

    def get_AssetLifeYear(self):
        return self.AssetLifeYear

    def set_AssetLifeYear(self, AssetLifeYear):
        self.AssetLifeYear = AssetLifeYear

    def get_AssetLifeMonth(self):
        return self.AssetLifeMonth

    def set_AssetLifeMonth(self, AssetLifeMonth):
        self.AssetLifeMonth = AssetLifeMonth

    def get_AssetAddition(self):
        return self.AssetAddition

    def set_AssetAddition(self, AssetAddition):
        self.AssetAddition = AssetAddition

    def get_Transfers(self):
        return self.Transfers

    def set_Transfers(self, Transfers):
        self.Transfers = Transfers

    def get_AssetDisposal(self):
        return self.AssetDisposal

    def set_AssetDisposal(self, AssetDisposal):
        self.AssetDisposal = AssetDisposal

    def get_BookValueBegin(self):
        return self.BookValueBegin

    def set_BookValueBegin(self, BookValueBegin):
        self.BookValueBegin = BookValueBegin

    def get_DepreciationMethod(self):
        return self.DepreciationMethod

    def set_DepreciationMethod(self, DepreciationMethod):
        self.DepreciationMethod = DepreciationMethod

    def get_DepreciationPercentage(self):
        return self.DepreciationPercentage

    def set_DepreciationPercentage(self, DepreciationPercentage):
        self.DepreciationPercentage = DepreciationPercentage

    def get_DepreciationForPeriod(self):
        return self.DepreciationForPeriod

    def set_DepreciationForPeriod(self, DepreciationForPeriod):
        self.DepreciationForPeriod = DepreciationForPeriod

    def get_AppreciationForPeriod(self):
        return self.AppreciationForPeriod

    def set_AppreciationForPeriod(self, AppreciationForPeriod):
        self.AppreciationForPeriod = AppreciationForPeriod

    def get_ExtraordinaryDepreciationsForPeriod(self):
        return self.ExtraordinaryDepreciationsForPeriod

    def set_ExtraordinaryDepreciationsForPeriod(
        self, ExtraordinaryDepreciationsForPeriod
    ):
        self.ExtraordinaryDepreciationsForPeriod = ExtraordinaryDepreciationsForPeriod

    def get_AccumulatedDepreciation(self):
        return self.AccumulatedDepreciation

    def set_AccumulatedDepreciation(self, AccumulatedDepreciation):
        self.AccumulatedDepreciation = AccumulatedDepreciation

    def get_BookValueEnd(self):
        return self.BookValueEnd

    def set_BookValueEnd(self, BookValueEnd):
        self.BookValueEnd = BookValueEnd

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AssetValuationType is not None
            or self.ValuationClass is not None
            or self.AcquisitionAndProductionCostsBegin is not None
            or self.AcquisitionAndProductionCostsEnd is not None
            or self.InvestmentSupport is not None
            or self.AssetLifeYear is not None
            or self.AssetLifeMonth is not None
            or self.AssetAddition is not None
            or self.Transfers is not None
            or self.AssetDisposal is not None
            or self.BookValueBegin is not None
            or self.DepreciationMethod is not None
            or self.DepreciationPercentage is not None
            or self.DepreciationForPeriod is not None
            or self.AppreciationForPeriod is not None
            or self.ExtraordinaryDepreciationsForPeriod is not None
            or self.AccumulatedDepreciation is not None
            or self.BookValueEnd is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ValuationType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ValuationType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ValuationType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="ValuationType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ValuationType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ValuationType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ValuationType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AssetValuationType is not None:
            namespaceprefix_ = (
                self.AssetValuationType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetValuationType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetValuationType>%s</%sAssetValuationType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AssetValuationType),
                            input_name="AssetValuationType",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ValuationClass is not None:
            namespaceprefix_ = (
                self.ValuationClass_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ValuationClass_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sValuationClass>%s</%sValuationClass>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ValuationClass), input_name="ValuationClass"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AcquisitionAndProductionCostsBegin is not None:
            namespaceprefix_ = (
                self.AcquisitionAndProductionCostsBegin_nsprefix_ + ":"
                if (
                    UseCapturedNS_ and self.AcquisitionAndProductionCostsBegin_nsprefix_
                )
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAcquisitionAndProductionCostsBegin>%s</%sAcquisitionAndProductionCostsBegin>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AcquisitionAndProductionCostsBegin,
                        input_name="AcquisitionAndProductionCostsBegin",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AcquisitionAndProductionCostsEnd is not None:
            namespaceprefix_ = (
                self.AcquisitionAndProductionCostsEnd_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AcquisitionAndProductionCostsEnd_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAcquisitionAndProductionCostsEnd>%s</%sAcquisitionAndProductionCostsEnd>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AcquisitionAndProductionCostsEnd,
                        input_name="AcquisitionAndProductionCostsEnd",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.InvestmentSupport is not None:
            namespaceprefix_ = (
                self.InvestmentSupport_nsprefix_ + ":"
                if (UseCapturedNS_ and self.InvestmentSupport_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sInvestmentSupport>%s</%sInvestmentSupport>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.InvestmentSupport, input_name="InvestmentSupport"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetLifeYear is not None:
            namespaceprefix_ = (
                self.AssetLifeYear_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetLifeYear_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetLifeYear>%s</%sAssetLifeYear>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AssetLifeYear, input_name="AssetLifeYear"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetLifeMonth is not None:
            namespaceprefix_ = (
                self.AssetLifeMonth_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetLifeMonth_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetLifeMonth>%s</%sAssetLifeMonth>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AssetLifeMonth, input_name="AssetLifeMonth"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetAddition is not None:
            namespaceprefix_ = (
                self.AssetAddition_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetAddition_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetAddition>%s</%sAssetAddition>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AssetAddition, input_name="AssetAddition"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Transfers is not None:
            namespaceprefix_ = (
                self.Transfers_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Transfers_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransfers>%s</%sTransfers>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.Transfers, input_name="Transfers"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetDisposal is not None:
            namespaceprefix_ = (
                self.AssetDisposal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetDisposal_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetDisposal>%s</%sAssetDisposal>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AssetDisposal, input_name="AssetDisposal"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BookValueBegin is not None:
            namespaceprefix_ = (
                self.BookValueBegin_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BookValueBegin_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBookValueBegin>%s</%sBookValueBegin>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.BookValueBegin, input_name="BookValueBegin"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DepreciationMethod is not None:
            namespaceprefix_ = (
                self.DepreciationMethod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DepreciationMethod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDepreciationMethod>%s</%sDepreciationMethod>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DepreciationMethod),
                            input_name="DepreciationMethod",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DepreciationPercentage is not None:
            namespaceprefix_ = (
                self.DepreciationPercentage_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DepreciationPercentage_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDepreciationPercentage>%s</%sDepreciationPercentage>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.DepreciationPercentage, input_name="DepreciationPercentage"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DepreciationForPeriod is not None:
            namespaceprefix_ = (
                self.DepreciationForPeriod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DepreciationForPeriod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDepreciationForPeriod>%s</%sDepreciationForPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.DepreciationForPeriod, input_name="DepreciationForPeriod"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AppreciationForPeriod is not None:
            namespaceprefix_ = (
                self.AppreciationForPeriod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AppreciationForPeriod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAppreciationForPeriod>%s</%sAppreciationForPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AppreciationForPeriod, input_name="AppreciationForPeriod"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ExtraordinaryDepreciationsForPeriod is not None:
            namespaceprefix_ = (
                self.ExtraordinaryDepreciationsForPeriod_nsprefix_ + ":"
                if (
                    UseCapturedNS_
                    and self.ExtraordinaryDepreciationsForPeriod_nsprefix_
                )
                else ""
            )
            self.ExtraordinaryDepreciationsForPeriod.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ExtraordinaryDepreciationsForPeriod",
                pretty_print=pretty_print,
            )
        if self.AccumulatedDepreciation is not None:
            namespaceprefix_ = (
                self.AccumulatedDepreciation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccumulatedDepreciation_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccumulatedDepreciation>%s</%sAccumulatedDepreciation>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AccumulatedDepreciation,
                        input_name="AccumulatedDepreciation",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BookValueEnd is not None:
            namespaceprefix_ = (
                self.BookValueEnd_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BookValueEnd_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBookValueEnd>%s</%sBookValueEnd>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.BookValueEnd, input_name="BookValueEnd"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AssetValuationType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AssetValuationType")
            value_ = self.gds_validate_string(value_, node, "AssetValuationType")
            self.AssetValuationType = value_
            self.AssetValuationType_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.AssetValuationType)
        elif nodeName_ == "ValuationClass":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ValuationClass")
            value_ = self.gds_validate_string(value_, node, "ValuationClass")
            self.ValuationClass = value_
            self.ValuationClass_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.ValuationClass)
        elif nodeName_ == "AcquisitionAndProductionCostsBegin" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(
                sval_, node, "AcquisitionAndProductionCostsBegin"
            )
            fval_ = self.gds_validate_decimal(
                fval_, node, "AcquisitionAndProductionCostsBegin"
            )
            self.AcquisitionAndProductionCostsBegin = fval_
            self.AcquisitionAndProductionCostsBegin_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AcquisitionAndProductionCostsBegin)
        elif nodeName_ == "AcquisitionAndProductionCostsEnd" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(
                sval_, node, "AcquisitionAndProductionCostsEnd"
            )
            fval_ = self.gds_validate_decimal(
                fval_, node, "AcquisitionAndProductionCostsEnd"
            )
            self.AcquisitionAndProductionCostsEnd = fval_
            self.AcquisitionAndProductionCostsEnd_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AcquisitionAndProductionCostsEnd)
        elif nodeName_ == "InvestmentSupport" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "InvestmentSupport")
            fval_ = self.gds_validate_decimal(fval_, node, "InvestmentSupport")
            self.InvestmentSupport = fval_
            self.InvestmentSupport_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.InvestmentSupport)
        elif nodeName_ == "AssetLifeYear" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AssetLifeYear")
            fval_ = self.gds_validate_decimal(fval_, node, "AssetLifeYear")
            self.AssetLifeYear = fval_
            self.AssetLifeYear_nsprefix_ = child_.prefix
        elif nodeName_ == "AssetLifeMonth" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AssetLifeMonth")
            fval_ = self.gds_validate_decimal(fval_, node, "AssetLifeMonth")
            self.AssetLifeMonth = fval_
            self.AssetLifeMonth_nsprefix_ = child_.prefix
        elif nodeName_ == "AssetAddition" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AssetAddition")
            fval_ = self.gds_validate_decimal(fval_, node, "AssetAddition")
            self.AssetAddition = fval_
            self.AssetAddition_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AssetAddition)
        elif nodeName_ == "Transfers" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "Transfers")
            fval_ = self.gds_validate_decimal(fval_, node, "Transfers")
            self.Transfers = fval_
            self.Transfers_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.Transfers)
        elif nodeName_ == "AssetDisposal" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AssetDisposal")
            fval_ = self.gds_validate_decimal(fval_, node, "AssetDisposal")
            self.AssetDisposal = fval_
            self.AssetDisposal_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AssetDisposal)
        elif nodeName_ == "BookValueBegin" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "BookValueBegin")
            fval_ = self.gds_validate_decimal(fval_, node, "BookValueBegin")
            self.BookValueBegin = fval_
            self.BookValueBegin_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.BookValueBegin)
        elif nodeName_ == "DepreciationMethod":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DepreciationMethod")
            value_ = self.gds_validate_string(value_, node, "DepreciationMethod")
            self.DepreciationMethod = value_
            self.DepreciationMethod_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.DepreciationMethod)
        elif nodeName_ == "DepreciationPercentage" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "DepreciationPercentage")
            fval_ = self.gds_validate_decimal(fval_, node, "DepreciationPercentage")
            self.DepreciationPercentage = fval_
            self.DepreciationPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == "DepreciationForPeriod" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "DepreciationForPeriod")
            fval_ = self.gds_validate_decimal(fval_, node, "DepreciationForPeriod")
            self.DepreciationForPeriod = fval_
            self.DepreciationForPeriod_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.DepreciationForPeriod)
        elif nodeName_ == "AppreciationForPeriod" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AppreciationForPeriod")
            fval_ = self.gds_validate_decimal(fval_, node, "AppreciationForPeriod")
            self.AppreciationForPeriod = fval_
            self.AppreciationForPeriod_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AppreciationForPeriod)
        elif nodeName_ == "ExtraordinaryDepreciationsForPeriod":
            obj_ = ExtraordinaryDepreciationsForPeriodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExtraordinaryDepreciationsForPeriod = obj_
            obj_.original_tagname_ = "ExtraordinaryDepreciationsForPeriod"
        elif nodeName_ == "AccumulatedDepreciation" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AccumulatedDepreciation")
            fval_ = self.gds_validate_decimal(fval_, node, "AccumulatedDepreciation")
            self.AccumulatedDepreciation = fval_
            self.AccumulatedDepreciation_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AccumulatedDepreciation)
        elif nodeName_ == "BookValueEnd" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "BookValueEnd")
            fval_ = self.gds_validate_decimal(fval_, node, "BookValueEnd")
            self.BookValueEnd = fval_
            self.BookValueEnd_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.BookValueEnd)


# end class ValuationType


class ExtraordinaryDepreciationsForPeriodType(GeneratedsSuper):
    """Extraordinary depreciations for this asset during the
    Selectionperiod."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self, ExtraordinaryDepreciationForPeriod=None, gds_collector_=None, **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if ExtraordinaryDepreciationForPeriod is None:
            self.ExtraordinaryDepreciationForPeriod = []
        else:
            self.ExtraordinaryDepreciationForPeriod = ExtraordinaryDepreciationForPeriod
        self.ExtraordinaryDepreciationForPeriod_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraordinaryDepreciationsForPeriodType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraordinaryDepreciationsForPeriodType.subclass:
            return ExtraordinaryDepreciationsForPeriodType.subclass(*args_, **kwargs_)
        else:
            return ExtraordinaryDepreciationsForPeriodType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_ExtraordinaryDepreciationForPeriod(self):
        return self.ExtraordinaryDepreciationForPeriod

    def set_ExtraordinaryDepreciationForPeriod(
        self, ExtraordinaryDepreciationForPeriod
    ):
        self.ExtraordinaryDepreciationForPeriod = ExtraordinaryDepreciationForPeriod

    def add_ExtraordinaryDepreciationForPeriod(self, value):
        self.ExtraordinaryDepreciationForPeriod.append(value)

    def insert_ExtraordinaryDepreciationForPeriod_at(self, index, value):
        self.ExtraordinaryDepreciationForPeriod.insert(index, value)

    def replace_ExtraordinaryDepreciationForPeriod_at(self, index, value):
        self.ExtraordinaryDepreciationForPeriod[index] = value

    def hasContent_(self):
        if self.ExtraordinaryDepreciationForPeriod:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ExtraordinaryDepreciationsForPeriodType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get(
            "ExtraordinaryDepreciationsForPeriodType"
        )
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if (
            self.original_tagname_ is not None
            and name_ == "ExtraordinaryDepreciationsForPeriodType"
        ):
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="ExtraordinaryDepreciationsForPeriodType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ExtraordinaryDepreciationsForPeriodType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ExtraordinaryDepreciationsForPeriodType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ExtraordinaryDepreciationsForPeriodType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for (
            ExtraordinaryDepreciationForPeriod_
        ) in self.ExtraordinaryDepreciationForPeriod:
            namespaceprefix_ = (
                self.ExtraordinaryDepreciationForPeriod_nsprefix_ + ":"
                if (
                    UseCapturedNS_ and self.ExtraordinaryDepreciationForPeriod_nsprefix_
                )
                else ""
            )
            ExtraordinaryDepreciationForPeriod_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ExtraordinaryDepreciationForPeriod",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "ExtraordinaryDepreciationForPeriod":
            obj_ = ExtraordinaryDepreciationForPeriodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExtraordinaryDepreciationForPeriod.append(obj_)
            obj_.original_tagname_ = "ExtraordinaryDepreciationForPeriod"


# end class ExtraordinaryDepreciationsForPeriodType


class ExtraordinaryDepreciationForPeriodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        ExtraordinaryDepreciationMethod=None,
        ExtraordinaryDepreciationForPeriod=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.ExtraordinaryDepreciationMethod = ExtraordinaryDepreciationMethod
        self.validate_SAFmiddle1textType(self.ExtraordinaryDepreciationMethod)
        self.ExtraordinaryDepreciationMethod_nsprefix_ = None
        self.ExtraordinaryDepreciationForPeriod = ExtraordinaryDepreciationForPeriod
        self.validate_SAFmonetaryType(self.ExtraordinaryDepreciationForPeriod)
        self.ExtraordinaryDepreciationForPeriod_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraordinaryDepreciationForPeriodType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraordinaryDepreciationForPeriodType.subclass:
            return ExtraordinaryDepreciationForPeriodType.subclass(*args_, **kwargs_)
        else:
            return ExtraordinaryDepreciationForPeriodType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_ExtraordinaryDepreciationMethod(self):
        return self.ExtraordinaryDepreciationMethod

    def set_ExtraordinaryDepreciationMethod(self, ExtraordinaryDepreciationMethod):
        self.ExtraordinaryDepreciationMethod = ExtraordinaryDepreciationMethod

    def get_ExtraordinaryDepreciationForPeriod(self):
        return self.ExtraordinaryDepreciationForPeriod

    def set_ExtraordinaryDepreciationForPeriod(
        self, ExtraordinaryDepreciationForPeriod
    ):
        self.ExtraordinaryDepreciationForPeriod = ExtraordinaryDepreciationForPeriod

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.ExtraordinaryDepreciationMethod is not None
            or self.ExtraordinaryDepreciationForPeriod is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ExtraordinaryDepreciationForPeriodType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get(
            "ExtraordinaryDepreciationForPeriodType"
        )
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if (
            self.original_tagname_ is not None
            and name_ == "ExtraordinaryDepreciationForPeriodType"
        ):
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="ExtraordinaryDepreciationForPeriodType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ExtraordinaryDepreciationForPeriodType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ExtraordinaryDepreciationForPeriodType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ExtraordinaryDepreciationForPeriodType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.ExtraordinaryDepreciationMethod is not None:
            namespaceprefix_ = (
                self.ExtraordinaryDepreciationMethod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ExtraordinaryDepreciationMethod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sExtraordinaryDepreciationMethod>%s</%sExtraordinaryDepreciationMethod>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ExtraordinaryDepreciationMethod),
                            input_name="ExtraordinaryDepreciationMethod",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ExtraordinaryDepreciationForPeriod is not None:
            namespaceprefix_ = (
                self.ExtraordinaryDepreciationForPeriod_nsprefix_ + ":"
                if (
                    UseCapturedNS_ and self.ExtraordinaryDepreciationForPeriod_nsprefix_
                )
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sExtraordinaryDepreciationForPeriod>%s</%sExtraordinaryDepreciationForPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ExtraordinaryDepreciationForPeriod,
                        input_name="ExtraordinaryDepreciationForPeriod",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "ExtraordinaryDepreciationMethod":
            value_ = child_.text
            value_ = self.gds_parse_string(
                value_, node, "ExtraordinaryDepreciationMethod"
            )
            value_ = self.gds_validate_string(
                value_, node, "ExtraordinaryDepreciationMethod"
            )
            self.ExtraordinaryDepreciationMethod = value_
            self.ExtraordinaryDepreciationMethod_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.ExtraordinaryDepreciationMethod)
        elif nodeName_ == "ExtraordinaryDepreciationForPeriod" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(
                sval_, node, "ExtraordinaryDepreciationForPeriod"
            )
            fval_ = self.gds_validate_decimal(
                fval_, node, "ExtraordinaryDepreciationForPeriod"
            )
            self.ExtraordinaryDepreciationForPeriod = fval_
            self.ExtraordinaryDepreciationForPeriod_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ExtraordinaryDepreciationForPeriod)


# end class ExtraordinaryDepreciationForPeriodType


class GeneralLedgerEntriesType(GeneratedsSuper):
    """Accounting transactions."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        NumberOfEntries=None,
        TotalDebit=None,
        TotalCredit=None,
        Journal=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.NumberOfEntries = NumberOfEntries
        self.NumberOfEntries_nsprefix_ = None
        self.TotalDebit = TotalDebit
        self.validate_SAFmonetaryType(self.TotalDebit)
        self.TotalDebit_nsprefix_ = None
        self.TotalCredit = TotalCredit
        self.validate_SAFmonetaryType(self.TotalCredit)
        self.TotalCredit_nsprefix_ = None
        if Journal is None:
            self.Journal = []
        else:
            self.Journal = Journal
        self.Journal_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralLedgerEntriesType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralLedgerEntriesType.subclass:
            return GeneralLedgerEntriesType.subclass(*args_, **kwargs_)
        else:
            return GeneralLedgerEntriesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_NumberOfEntries(self):
        return self.NumberOfEntries

    def set_NumberOfEntries(self, NumberOfEntries):
        self.NumberOfEntries = NumberOfEntries

    def get_TotalDebit(self):
        return self.TotalDebit

    def set_TotalDebit(self, TotalDebit):
        self.TotalDebit = TotalDebit

    def get_TotalCredit(self):
        return self.TotalCredit

    def set_TotalCredit(self, TotalCredit):
        self.TotalCredit = TotalCredit

    def get_Journal(self):
        return self.Journal

    def set_Journal(self, Journal):
        self.Journal = Journal

    def add_Journal(self, value):
        self.Journal.append(value)

    def insert_Journal_at(self, index, value):
        self.Journal.insert(index, value)

    def replace_Journal_at(self, index, value):
        self.Journal[index] = value

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.NumberOfEntries is not None
            or self.TotalDebit is not None
            or self.TotalCredit is not None
            or self.Journal
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="GeneralLedgerEntriesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("GeneralLedgerEntriesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "GeneralLedgerEntriesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="GeneralLedgerEntriesType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="GeneralLedgerEntriesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="GeneralLedgerEntriesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="GeneralLedgerEntriesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.NumberOfEntries is not None:
            namespaceprefix_ = (
                self.NumberOfEntries_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NumberOfEntries_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumberOfEntries>%s</%sNumberOfEntries>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.NumberOfEntries, input_name="NumberOfEntries"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalDebit is not None:
            namespaceprefix_ = (
                self.TotalDebit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalDebit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalDebit>%s</%sTotalDebit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalDebit, input_name="TotalDebit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalCredit is not None:
            namespaceprefix_ = (
                self.TotalCredit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalCredit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalCredit>%s</%sTotalCredit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalCredit, input_name="TotalCredit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Journal_ in self.Journal:
            namespaceprefix_ = (
                self.Journal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Journal_nsprefix_)
                else ""
            )
            Journal_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Journal",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "NumberOfEntries" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "NumberOfEntries")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "NumberOfEntries")
            self.NumberOfEntries = ival_
            self.NumberOfEntries_nsprefix_ = child_.prefix
        elif nodeName_ == "TotalDebit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalDebit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalDebit")
            self.TotalDebit = fval_
            self.TotalDebit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalDebit)
        elif nodeName_ == "TotalCredit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalCredit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalCredit")
            self.TotalCredit = fval_
            self.TotalCredit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalCredit)
        elif nodeName_ == "Journal":
            obj_ = JournalType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Journal.append(obj_)
            obj_.original_tagname_ = "Journal"


# end class GeneralLedgerEntriesType


class JournalType(GeneratedsSuper):
    """Journal information."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        JournalID=None,
        Description=None,
        Type=None,
        Transaction=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.JournalID = JournalID
        self.validate_SAFshorttextType(self.JournalID)
        self.JournalID_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.Type = Type
        self.validate_SAFcodeType(self.Type)
        self.Type_nsprefix_ = None
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
        self.Transaction_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, JournalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if JournalType.subclass:
            return JournalType.subclass(*args_, **kwargs_)
        else:
            return JournalType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_JournalID(self):
        return self.JournalID

    def set_JournalID(self, JournalID):
        self.JournalID = JournalID

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_Type(self):
        return self.Type

    def set_Type(self, Type):
        self.Type = Type

    def get_Transaction(self):
        return self.Transaction

    def set_Transaction(self, Transaction):
        self.Transaction = Transaction

    def add_Transaction(self, value):
        self.Transaction.append(value)

    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)

    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.JournalID is not None
            or self.Description is not None
            or self.Type is not None
            or self.Transaction
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="JournalType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("JournalType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "JournalType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="JournalType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="JournalType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="JournalType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="JournalType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.JournalID is not None:
            namespaceprefix_ = (
                self.JournalID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.JournalID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sJournalID>%s</%sJournalID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.JournalID), input_name="JournalID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Type is not None:
            namespaceprefix_ = (
                self.Type_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Type_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sType>%s</%sType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Type), input_name="Type")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Transaction_ in self.Transaction:
            namespaceprefix_ = (
                self.Transaction_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Transaction_nsprefix_)
                else ""
            )
            Transaction_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Transaction",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "JournalID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "JournalID")
            value_ = self.gds_validate_string(value_, node, "JournalID")
            self.JournalID = value_
            self.JournalID_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.JournalID)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "Type":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Type")
            value_ = self.gds_validate_string(value_, node, "Type")
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.Type)
        elif nodeName_ == "Transaction":
            obj_ = TransactionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = "Transaction"


# end class JournalType


class TransactionType(GeneratedsSuper):
    """Accounting transactions."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TransactionID=None,
        Period=None,
        PeriodYear=None,
        TransactionDate=None,
        SourceID=None,
        TransactionType_member=None,
        Description=None,
        BatchID=None,
        SystemEntryDate=None,
        GLPostingDate=None,
        CustomerID=None,
        SupplierID=None,
        SystemID=None,
        Line=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.TransactionID = TransactionID
        self.validate_SAFmiddle2textType(self.TransactionID)
        self.TransactionID_nsprefix_ = None
        self.Period = Period
        self.Period_nsprefix_ = None
        self.PeriodYear = PeriodYear
        self.validate_PeriodYearType(self.PeriodYear)
        self.PeriodYear_nsprefix_ = None
        if isinstance(TransactionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TransactionDate, "%Y-%m-%d").date()
        else:
            initvalue_ = TransactionDate
        self.TransactionDate = initvalue_
        self.TransactionDate_nsprefix_ = None
        self.SourceID = SourceID
        self.validate_SAFmiddle1textType(self.SourceID)
        self.SourceID_nsprefix_ = None
        self.TransactionType = TransactionType_member
        self.validate_SAFshorttextType(self.TransactionType)
        self.TransactionType_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.BatchID = BatchID
        self.validate_SAFmiddle1textType(self.BatchID)
        self.BatchID_nsprefix_ = None
        if isinstance(SystemEntryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SystemEntryDate, "%Y-%m-%d").date()
        else:
            initvalue_ = SystemEntryDate
        self.SystemEntryDate = initvalue_
        self.SystemEntryDate_nsprefix_ = None
        if isinstance(GLPostingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GLPostingDate, "%Y-%m-%d").date()
        else:
            initvalue_ = GLPostingDate
        self.GLPostingDate = initvalue_
        self.GLPostingDate_nsprefix_ = None
        self.CustomerID = CustomerID
        self.validate_SAFmiddle1textType(self.CustomerID)
        self.CustomerID_nsprefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.SystemID = SystemID
        self.validate_SAFshorttextType(self.SystemID)
        self.SystemID_nsprefix_ = None
        if Line is None:
            self.Line = []
        else:
            self.Line = Line
        self.Line_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, TransactionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionType.subclass:
            return TransactionType.subclass(*args_, **kwargs_)
        else:
            return TransactionType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TransactionID(self):
        return self.TransactionID

    def set_TransactionID(self, TransactionID):
        self.TransactionID = TransactionID

    def get_Period(self):
        return self.Period

    def set_Period(self, Period):
        self.Period = Period

    def get_PeriodYear(self):
        return self.PeriodYear

    def set_PeriodYear(self, PeriodYear):
        self.PeriodYear = PeriodYear

    def get_TransactionDate(self):
        return self.TransactionDate

    def set_TransactionDate(self, TransactionDate):
        self.TransactionDate = TransactionDate

    def get_SourceID(self):
        return self.SourceID

    def set_SourceID(self, SourceID):
        self.SourceID = SourceID

    def get_TransactionType(self):
        return self.TransactionType

    def set_TransactionType(self, TransactionType):
        self.TransactionType = TransactionType

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_BatchID(self):
        return self.BatchID

    def set_BatchID(self, BatchID):
        self.BatchID = BatchID

    def get_SystemEntryDate(self):
        return self.SystemEntryDate

    def set_SystemEntryDate(self, SystemEntryDate):
        self.SystemEntryDate = SystemEntryDate

    def get_GLPostingDate(self):
        return self.GLPostingDate

    def set_GLPostingDate(self, GLPostingDate):
        self.GLPostingDate = GLPostingDate

    def get_CustomerID(self):
        return self.CustomerID

    def set_CustomerID(self, CustomerID):
        self.CustomerID = CustomerID

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_SystemID(self):
        return self.SystemID

    def set_SystemID(self, SystemID):
        self.SystemID = SystemID

    def get_Line(self):
        return self.Line

    def set_Line(self, Line):
        self.Line = Line

    def add_Line(self, value):
        self.Line.append(value)

    def insert_Line_at(self, index, value):
        self.Line.insert(index, value)

    def replace_Line_at(self, index, value):
        self.Line[index] = value

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_PeriodYearType(self, value):
        result = True
        # Validate type PeriodYearType, a restriction on xs:nonNegativeInteger.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 1970:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PeriodYearType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 2100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on PeriodYearType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TransactionID is not None
            or self.Period is not None
            or self.PeriodYear is not None
            or self.TransactionDate is not None
            or self.SourceID is not None
            or self.TransactionType is not None
            or self.Description is not None
            or self.BatchID is not None
            or self.SystemEntryDate is not None
            or self.GLPostingDate is not None
            or self.CustomerID is not None
            or self.SupplierID is not None
            or self.SystemID is not None
            or self.Line
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TransactionType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("TransactionType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "TransactionType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="TransactionType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="TransactionType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="TransactionType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="TransactionType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.TransactionID is not None:
            namespaceprefix_ = (
                self.TransactionID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionID>%s</%sTransactionID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TransactionID), input_name="TransactionID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Period is not None:
            namespaceprefix_ = (
                self.Period_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Period_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriod>%s</%sPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.Period, input_name="Period"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodYear is not None:
            namespaceprefix_ = (
                self.PeriodYear_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodYear_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodYear>%s</%sPeriodYear>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.PeriodYear, input_name="PeriodYear"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TransactionDate is not None:
            namespaceprefix_ = (
                self.TransactionDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionDate>%s</%sTransactionDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.TransactionDate, input_name="TransactionDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SourceID is not None:
            namespaceprefix_ = (
                self.SourceID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSourceID>%s</%sSourceID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SourceID), input_name="SourceID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TransactionType is not None:
            namespaceprefix_ = (
                self.TransactionType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionType>%s</%sTransactionType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TransactionType),
                            input_name="TransactionType",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BatchID is not None:
            namespaceprefix_ = (
                self.BatchID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BatchID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBatchID>%s</%sBatchID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BatchID), input_name="BatchID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SystemEntryDate is not None:
            namespaceprefix_ = (
                self.SystemEntryDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SystemEntryDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSystemEntryDate>%s</%sSystemEntryDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.SystemEntryDate, input_name="SystemEntryDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GLPostingDate is not None:
            namespaceprefix_ = (
                self.GLPostingDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GLPostingDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGLPostingDate>%s</%sGLPostingDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.GLPostingDate, input_name="GLPostingDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CustomerID is not None:
            namespaceprefix_ = (
                self.CustomerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCustomerID>%s</%sCustomerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CustomerID), input_name="CustomerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SystemID is not None:
            namespaceprefix_ = (
                self.SystemID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SystemID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSystemID>%s</%sSystemID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SystemID), input_name="SystemID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Line_ in self.Line:
            namespaceprefix_ = (
                self.Line_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Line_nsprefix_)
                else ""
            )
            Line_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Line",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TransactionID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TransactionID")
            value_ = self.gds_validate_string(value_, node, "TransactionID")
            self.TransactionID = value_
            self.TransactionID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TransactionID)
        elif nodeName_ == "Period" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "Period")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "Period")
            self.Period = ival_
            self.Period_nsprefix_ = child_.prefix
        elif nodeName_ == "PeriodYear" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodYear")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodYear")
            self.PeriodYear = ival_
            self.PeriodYear_nsprefix_ = child_.prefix
            # validate type PeriodYearType
            self.validate_PeriodYearType(self.PeriodYear)
        elif nodeName_ == "TransactionDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TransactionDate = dval_
            self.TransactionDate_nsprefix_ = child_.prefix
        elif nodeName_ == "SourceID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SourceID")
            value_ = self.gds_validate_string(value_, node, "SourceID")
            self.SourceID = value_
            self.SourceID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SourceID)
        elif nodeName_ == "TransactionType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TransactionType")
            value_ = self.gds_validate_string(value_, node, "TransactionType")
            self.TransactionType = value_
            self.TransactionType_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.TransactionType)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "BatchID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BatchID")
            value_ = self.gds_validate_string(value_, node, "BatchID")
            self.BatchID = value_
            self.BatchID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.BatchID)
        elif nodeName_ == "SystemEntryDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SystemEntryDate = dval_
            self.SystemEntryDate_nsprefix_ = child_.prefix
        elif nodeName_ == "GLPostingDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GLPostingDate = dval_
            self.GLPostingDate_nsprefix_ = child_.prefix
        elif nodeName_ == "CustomerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CustomerID")
            value_ = self.gds_validate_string(value_, node, "CustomerID")
            self.CustomerID = value_
            self.CustomerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CustomerID)
        elif nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "SystemID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SystemID")
            value_ = self.gds_validate_string(value_, node, "SystemID")
            self.SystemID = value_
            self.SystemID_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.SystemID)
        elif nodeName_ == "Line":
            obj_ = LineType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Line.append(obj_)
            obj_.original_tagname_ = "Line"


# end class TransactionType


class LineType(GeneratedsSuper):
    """Transaction lines."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        RecordID=None,
        AccountID=None,
        Analysis=None,
        ValueDate=None,
        SourceDocumentID=None,
        CustomerID=None,
        SupplierID=None,
        Description=None,
        DebitAmount=None,
        CreditAmount=None,
        TaxInformation=None,
        ReferenceNumber=None,
        CID=None,
        DueDate=None,
        Quantity=None,
        CrossReference=None,
        SystemEntryTime=None,
        OwnerID=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.RecordID = RecordID
        self.validate_SAFshorttextType(self.RecordID)
        self.RecordID_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        if Analysis is None:
            self.Analysis = []
        else:
            self.Analysis = Analysis
        self.Analysis_nsprefix_ = None
        if isinstance(ValueDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueDate, "%Y-%m-%d").date()
        else:
            initvalue_ = ValueDate
        self.ValueDate = initvalue_
        self.ValueDate_nsprefix_ = None
        self.SourceDocumentID = SourceDocumentID
        self.validate_SAFmiddle1textType(self.SourceDocumentID)
        self.SourceDocumentID_nsprefix_ = None
        self.CustomerID = CustomerID
        self.validate_SAFmiddle1textType(self.CustomerID)
        self.CustomerID_nsprefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.DebitAmount = DebitAmount
        self.DebitAmount_nsprefix_ = None
        self.CreditAmount = CreditAmount
        self.CreditAmount_nsprefix_ = None
        if TaxInformation is None:
            self.TaxInformation = []
        else:
            self.TaxInformation = TaxInformation
        self.TaxInformation_nsprefix_ = None
        self.ReferenceNumber = ReferenceNumber
        self.validate_SAFmiddle1textType(self.ReferenceNumber)
        self.ReferenceNumber_nsprefix_ = None
        self.CID = CID
        self.CID_nsprefix_ = None
        if isinstance(DueDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DueDate, "%Y-%m-%d").date()
        else:
            initvalue_ = DueDate
        self.DueDate = initvalue_
        self.DueDate_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_SAFquantityType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.CrossReference = CrossReference
        self.validate_SAFmiddle1textType(self.CrossReference)
        self.CrossReference_nsprefix_ = None
        if isinstance(SystemEntryTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                SystemEntryTime, "%Y-%m-%dT%H:%M:%S"
            )
        else:
            initvalue_ = SystemEntryTime
        self.SystemEntryTime = initvalue_
        self.SystemEntryTime_nsprefix_ = None
        self.OwnerID = OwnerID
        self.validate_SAFmiddle1textType(self.OwnerID)
        self.OwnerID_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, LineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineType.subclass:
            return LineType.subclass(*args_, **kwargs_)
        else:
            return LineType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_RecordID(self):
        return self.RecordID

    def set_RecordID(self, RecordID):
        self.RecordID = RecordID

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_Analysis(self):
        return self.Analysis

    def set_Analysis(self, Analysis):
        self.Analysis = Analysis

    def add_Analysis(self, value):
        self.Analysis.append(value)

    def insert_Analysis_at(self, index, value):
        self.Analysis.insert(index, value)

    def replace_Analysis_at(self, index, value):
        self.Analysis[index] = value

    def get_ValueDate(self):
        return self.ValueDate

    def set_ValueDate(self, ValueDate):
        self.ValueDate = ValueDate

    def get_SourceDocumentID(self):
        return self.SourceDocumentID

    def set_SourceDocumentID(self, SourceDocumentID):
        self.SourceDocumentID = SourceDocumentID

    def get_CustomerID(self):
        return self.CustomerID

    def set_CustomerID(self, CustomerID):
        self.CustomerID = CustomerID

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_DebitAmount(self):
        return self.DebitAmount

    def set_DebitAmount(self, DebitAmount):
        self.DebitAmount = DebitAmount

    def get_CreditAmount(self):
        return self.CreditAmount

    def set_CreditAmount(self, CreditAmount):
        self.CreditAmount = CreditAmount

    def get_TaxInformation(self):
        return self.TaxInformation

    def set_TaxInformation(self, TaxInformation):
        self.TaxInformation = TaxInformation

    def add_TaxInformation(self, value):
        self.TaxInformation.append(value)

    def insert_TaxInformation_at(self, index, value):
        self.TaxInformation.insert(index, value)

    def replace_TaxInformation_at(self, index, value):
        self.TaxInformation[index] = value

    def get_ReferenceNumber(self):
        return self.ReferenceNumber

    def set_ReferenceNumber(self, ReferenceNumber):
        self.ReferenceNumber = ReferenceNumber

    def get_CID(self):
        return self.CID

    def set_CID(self, CID):
        self.CID = CID

    def get_DueDate(self):
        return self.DueDate

    def set_DueDate(self, DueDate):
        self.DueDate = DueDate

    def get_Quantity(self):
        return self.Quantity

    def set_Quantity(self, Quantity):
        self.Quantity = Quantity

    def get_CrossReference(self):
        return self.CrossReference

    def set_CrossReference(self, CrossReference):
        self.CrossReference = CrossReference

    def get_SystemEntryTime(self):
        return self.SystemEntryTime

    def set_SystemEntryTime(self, SystemEntryTime):
        self.SystemEntryTime = SystemEntryTime

    def get_OwnerID(self):
        return self.OwnerID

    def set_OwnerID(self, OwnerID):
        self.OwnerID = OwnerID

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFquantityType(self, value):
        result = True
        # Validate type SAFquantityType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 22:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFquantityType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.RecordID is not None
            or self.AccountID is not None
            or self.Analysis
            or self.ValueDate is not None
            or self.SourceDocumentID is not None
            or self.CustomerID is not None
            or self.SupplierID is not None
            or self.Description is not None
            or self.DebitAmount is not None
            or self.CreditAmount is not None
            or self.TaxInformation
            or self.ReferenceNumber is not None
            or self.CID is not None
            or self.DueDate is not None
            or self.Quantity is not None
            or self.CrossReference is not None
            or self.SystemEntryTime is not None
            or self.OwnerID is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("LineType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "LineType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="LineType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="LineType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="LineType"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.RecordID is not None:
            namespaceprefix_ = (
                self.RecordID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.RecordID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sRecordID>%s</%sRecordID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.RecordID), input_name="RecordID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Analysis_ in self.Analysis:
            namespaceprefix_ = (
                self.Analysis_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Analysis_nsprefix_)
                else ""
            )
            Analysis_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Analysis",
                pretty_print=pretty_print,
            )
        if self.ValueDate is not None:
            namespaceprefix_ = (
                self.ValueDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ValueDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sValueDate>%s</%sValueDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.ValueDate, input_name="ValueDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SourceDocumentID is not None:
            namespaceprefix_ = (
                self.SourceDocumentID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceDocumentID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSourceDocumentID>%s</%sSourceDocumentID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SourceDocumentID),
                            input_name="SourceDocumentID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CustomerID is not None:
            namespaceprefix_ = (
                self.CustomerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCustomerID>%s</%sCustomerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CustomerID), input_name="CustomerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DebitAmount is not None:
            namespaceprefix_ = (
                self.DebitAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DebitAmount_nsprefix_)
                else ""
            )
            self.DebitAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="DebitAmount",
                pretty_print=pretty_print,
            )
        if self.CreditAmount is not None:
            namespaceprefix_ = (
                self.CreditAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CreditAmount_nsprefix_)
                else ""
            )
            self.CreditAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="CreditAmount",
                pretty_print=pretty_print,
            )
        for TaxInformation_ in self.TaxInformation:
            namespaceprefix_ = (
                self.TaxInformation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxInformation_nsprefix_)
                else ""
            )
            TaxInformation_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxInformation",
                pretty_print=pretty_print,
            )
        if self.ReferenceNumber is not None:
            namespaceprefix_ = (
                self.ReferenceNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ReferenceNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sReferenceNumber>%s</%sReferenceNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ReferenceNumber),
                            input_name="ReferenceNumber",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CID is not None:
            namespaceprefix_ = (
                self.CID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCID>%s</%sCID>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.CID, input_name="CID"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DueDate is not None:
            namespaceprefix_ = (
                self.DueDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DueDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDueDate>%s</%sDueDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.DueDate, input_name="DueDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Quantity is not None:
            namespaceprefix_ = (
                self.Quantity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Quantity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sQuantity>%s</%sQuantity>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.Quantity, input_name="Quantity"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CrossReference is not None:
            namespaceprefix_ = (
                self.CrossReference_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CrossReference_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCrossReference>%s</%sCrossReference>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CrossReference), input_name="CrossReference"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SystemEntryTime is not None:
            namespaceprefix_ = (
                self.SystemEntryTime_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SystemEntryTime_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSystemEntryTime>%s</%sSystemEntryTime>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_datetime(
                        self.SystemEntryTime, input_name="SystemEntryTime"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OwnerID is not None:
            namespaceprefix_ = (
                self.OwnerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OwnerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOwnerID>%s</%sOwnerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.OwnerID), input_name="OwnerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "RecordID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "RecordID")
            value_ = self.gds_validate_string(value_, node, "RecordID")
            self.RecordID = value_
            self.RecordID_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.RecordID)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "Analysis":
            obj_ = AnalysisStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Analysis.append(obj_)
            obj_.original_tagname_ = "Analysis"
        elif nodeName_ == "ValueDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueDate = dval_
            self.ValueDate_nsprefix_ = child_.prefix
        elif nodeName_ == "SourceDocumentID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SourceDocumentID")
            value_ = self.gds_validate_string(value_, node, "SourceDocumentID")
            self.SourceDocumentID = value_
            self.SourceDocumentID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SourceDocumentID)
        elif nodeName_ == "CustomerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CustomerID")
            value_ = self.gds_validate_string(value_, node, "CustomerID")
            self.CustomerID = value_
            self.CustomerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CustomerID)
        elif nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "DebitAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DebitAmount = obj_
            obj_.original_tagname_ = "DebitAmount"
        elif nodeName_ == "CreditAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditAmount = obj_
            obj_.original_tagname_ = "CreditAmount"
        elif nodeName_ == "TaxInformation":
            obj_ = TaxInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxInformation.append(obj_)
            obj_.original_tagname_ = "TaxInformation"
        elif nodeName_ == "ReferenceNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ReferenceNumber")
            value_ = self.gds_validate_string(value_, node, "ReferenceNumber")
            self.ReferenceNumber = value_
            self.ReferenceNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.ReferenceNumber)
        elif nodeName_ == "CID" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "CID")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "CID")
            self.CID = ival_
            self.CID_nsprefix_ = child_.prefix
        elif nodeName_ == "DueDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DueDate = dval_
            self.DueDate_nsprefix_ = child_.prefix
        elif nodeName_ == "Quantity" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "Quantity")
            fval_ = self.gds_validate_decimal(fval_, node, "Quantity")
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.Quantity)
        elif nodeName_ == "CrossReference":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CrossReference")
            value_ = self.gds_validate_string(value_, node, "CrossReference")
            self.CrossReference = value_
            self.CrossReference_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CrossReference)
        elif nodeName_ == "SystemEntryTime":
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.SystemEntryTime = dval_
            self.SystemEntryTime_nsprefix_ = child_.prefix
        elif nodeName_ == "OwnerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "OwnerID")
            value_ = self.gds_validate_string(value_, node, "OwnerID")
            self.OwnerID = value_
            self.OwnerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.OwnerID)


# end class LineType


class SourceDocumentsType(GeneratedsSuper):
    """Not in use."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        SalesInvoices=None,
        PurchaseInvoices=None,
        Payments=None,
        MovementOfGoods=None,
        AssetTransactions=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.SalesInvoices = SalesInvoices
        self.SalesInvoices_nsprefix_ = None
        self.PurchaseInvoices = PurchaseInvoices
        self.PurchaseInvoices_nsprefix_ = None
        self.Payments = Payments
        self.Payments_nsprefix_ = None
        self.MovementOfGoods = MovementOfGoods
        self.MovementOfGoods_nsprefix_ = None
        self.AssetTransactions = AssetTransactions
        self.AssetTransactions_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SourceDocumentsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SourceDocumentsType.subclass:
            return SourceDocumentsType.subclass(*args_, **kwargs_)
        else:
            return SourceDocumentsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SalesInvoices(self):
        return self.SalesInvoices

    def set_SalesInvoices(self, SalesInvoices):
        self.SalesInvoices = SalesInvoices

    def get_PurchaseInvoices(self):
        return self.PurchaseInvoices

    def set_PurchaseInvoices(self, PurchaseInvoices):
        self.PurchaseInvoices = PurchaseInvoices

    def get_Payments(self):
        return self.Payments

    def set_Payments(self, Payments):
        self.Payments = Payments

    def get_MovementOfGoods(self):
        return self.MovementOfGoods

    def set_MovementOfGoods(self, MovementOfGoods):
        self.MovementOfGoods = MovementOfGoods

    def get_AssetTransactions(self):
        return self.AssetTransactions

    def set_AssetTransactions(self, AssetTransactions):
        self.AssetTransactions = AssetTransactions

    def hasContent_(self):
        if (
            self.SalesInvoices is not None
            or self.PurchaseInvoices is not None
            or self.Payments is not None
            or self.MovementOfGoods is not None
            or self.AssetTransactions is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SourceDocumentsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SourceDocumentsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SourceDocumentsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="SourceDocumentsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SourceDocumentsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SourceDocumentsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SourceDocumentsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        if self.SalesInvoices is not None:
            namespaceprefix_ = (
                self.SalesInvoices_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SalesInvoices_nsprefix_)
                else ""
            )
            self.SalesInvoices.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="SalesInvoices",
                pretty_print=pretty_print,
            )
        if self.PurchaseInvoices is not None:
            namespaceprefix_ = (
                self.PurchaseInvoices_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PurchaseInvoices_nsprefix_)
                else ""
            )
            self.PurchaseInvoices.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PurchaseInvoices",
                pretty_print=pretty_print,
            )
        if self.Payments is not None:
            namespaceprefix_ = (
                self.Payments_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Payments_nsprefix_)
                else ""
            )
            self.Payments.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Payments",
                pretty_print=pretty_print,
            )
        if self.MovementOfGoods is not None:
            namespaceprefix_ = (
                self.MovementOfGoods_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementOfGoods_nsprefix_)
                else ""
            )
            self.MovementOfGoods.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="MovementOfGoods",
                pretty_print=pretty_print,
            )
        if self.AssetTransactions is not None:
            namespaceprefix_ = (
                self.AssetTransactions_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactions_nsprefix_)
                else ""
            )
            self.AssetTransactions.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AssetTransactions",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SalesInvoices":
            obj_ = SalesInvoicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SalesInvoices = obj_
            obj_.original_tagname_ = "SalesInvoices"
        elif nodeName_ == "PurchaseInvoices":
            obj_ = PurchaseInvoicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PurchaseInvoices = obj_
            obj_.original_tagname_ = "PurchaseInvoices"
        elif nodeName_ == "Payments":
            obj_ = PaymentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payments = obj_
            obj_.original_tagname_ = "Payments"
        elif nodeName_ == "MovementOfGoods":
            obj_ = MovementOfGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MovementOfGoods = obj_
            obj_.original_tagname_ = "MovementOfGoods"
        elif nodeName_ == "AssetTransactions":
            obj_ = AssetTransactionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssetTransactions = obj_
            obj_.original_tagname_ = "AssetTransactions"


# end class SourceDocumentsType


class SalesInvoicesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        NumberOfEntries=None,
        TotalDebit=None,
        TotalCredit=None,
        Invoice=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.NumberOfEntries = NumberOfEntries
        self.NumberOfEntries_nsprefix_ = None
        self.TotalDebit = TotalDebit
        self.validate_SAFmonetaryType(self.TotalDebit)
        self.TotalDebit_nsprefix_ = None
        self.TotalCredit = TotalCredit
        self.validate_SAFmonetaryType(self.TotalCredit)
        self.TotalCredit_nsprefix_ = None
        if Invoice is None:
            self.Invoice = []
        else:
            self.Invoice = Invoice
        self.Invoice_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SalesInvoicesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SalesInvoicesType.subclass:
            return SalesInvoicesType.subclass(*args_, **kwargs_)
        else:
            return SalesInvoicesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_NumberOfEntries(self):
        return self.NumberOfEntries

    def set_NumberOfEntries(self, NumberOfEntries):
        self.NumberOfEntries = NumberOfEntries

    def get_TotalDebit(self):
        return self.TotalDebit

    def set_TotalDebit(self, TotalDebit):
        self.TotalDebit = TotalDebit

    def get_TotalCredit(self):
        return self.TotalCredit

    def set_TotalCredit(self, TotalCredit):
        self.TotalCredit = TotalCredit

    def get_Invoice(self):
        return self.Invoice

    def set_Invoice(self, Invoice):
        self.Invoice = Invoice

    def add_Invoice(self, value):
        self.Invoice.append(value)

    def insert_Invoice_at(self, index, value):
        self.Invoice.insert(index, value)

    def replace_Invoice_at(self, index, value):
        self.Invoice[index] = value

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.NumberOfEntries is not None
            or self.TotalDebit is not None
            or self.TotalCredit is not None
            or self.Invoice
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SalesInvoicesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SalesInvoicesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SalesInvoicesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="SalesInvoicesType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SalesInvoicesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SalesInvoicesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SalesInvoicesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.NumberOfEntries is not None:
            namespaceprefix_ = (
                self.NumberOfEntries_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NumberOfEntries_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumberOfEntries>%s</%sNumberOfEntries>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.NumberOfEntries, input_name="NumberOfEntries"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalDebit is not None:
            namespaceprefix_ = (
                self.TotalDebit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalDebit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalDebit>%s</%sTotalDebit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalDebit, input_name="TotalDebit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalCredit is not None:
            namespaceprefix_ = (
                self.TotalCredit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalCredit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalCredit>%s</%sTotalCredit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalCredit, input_name="TotalCredit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Invoice_ in self.Invoice:
            namespaceprefix_ = (
                self.Invoice_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Invoice_nsprefix_)
                else ""
            )
            Invoice_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Invoice",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "NumberOfEntries" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "NumberOfEntries")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "NumberOfEntries")
            self.NumberOfEntries = ival_
            self.NumberOfEntries_nsprefix_ = child_.prefix
        elif nodeName_ == "TotalDebit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalDebit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalDebit")
            self.TotalDebit = fval_
            self.TotalDebit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalDebit)
        elif nodeName_ == "TotalCredit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalCredit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalCredit")
            self.TotalCredit = fval_
            self.TotalCredit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalCredit)
        elif nodeName_ == "Invoice":
            obj_ = InvoiceStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Invoice.append(obj_)
            obj_.original_tagname_ = "Invoice"


# end class SalesInvoicesType


class PurchaseInvoicesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        NumberOfEntries=None,
        TotalDebit=None,
        TotalCredit=None,
        Invoice=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.NumberOfEntries = NumberOfEntries
        self.NumberOfEntries_nsprefix_ = None
        self.TotalDebit = TotalDebit
        self.validate_SAFmonetaryType(self.TotalDebit)
        self.TotalDebit_nsprefix_ = None
        self.TotalCredit = TotalCredit
        self.validate_SAFmonetaryType(self.TotalCredit)
        self.TotalCredit_nsprefix_ = None
        if Invoice is None:
            self.Invoice = []
        else:
            self.Invoice = Invoice
        self.Invoice_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PurchaseInvoicesType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PurchaseInvoicesType.subclass:
            return PurchaseInvoicesType.subclass(*args_, **kwargs_)
        else:
            return PurchaseInvoicesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_NumberOfEntries(self):
        return self.NumberOfEntries

    def set_NumberOfEntries(self, NumberOfEntries):
        self.NumberOfEntries = NumberOfEntries

    def get_TotalDebit(self):
        return self.TotalDebit

    def set_TotalDebit(self, TotalDebit):
        self.TotalDebit = TotalDebit

    def get_TotalCredit(self):
        return self.TotalCredit

    def set_TotalCredit(self, TotalCredit):
        self.TotalCredit = TotalCredit

    def get_Invoice(self):
        return self.Invoice

    def set_Invoice(self, Invoice):
        self.Invoice = Invoice

    def add_Invoice(self, value):
        self.Invoice.append(value)

    def insert_Invoice_at(self, index, value):
        self.Invoice.insert(index, value)

    def replace_Invoice_at(self, index, value):
        self.Invoice[index] = value

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.NumberOfEntries is not None
            or self.TotalDebit is not None
            or self.TotalCredit is not None
            or self.Invoice
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PurchaseInvoicesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PurchaseInvoicesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PurchaseInvoicesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="PurchaseInvoicesType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PurchaseInvoicesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PurchaseInvoicesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PurchaseInvoicesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.NumberOfEntries is not None:
            namespaceprefix_ = (
                self.NumberOfEntries_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NumberOfEntries_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumberOfEntries>%s</%sNumberOfEntries>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.NumberOfEntries, input_name="NumberOfEntries"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalDebit is not None:
            namespaceprefix_ = (
                self.TotalDebit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalDebit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalDebit>%s</%sTotalDebit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalDebit, input_name="TotalDebit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalCredit is not None:
            namespaceprefix_ = (
                self.TotalCredit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalCredit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalCredit>%s</%sTotalCredit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalCredit, input_name="TotalCredit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Invoice_ in self.Invoice:
            namespaceprefix_ = (
                self.Invoice_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Invoice_nsprefix_)
                else ""
            )
            Invoice_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Invoice",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "NumberOfEntries" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "NumberOfEntries")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "NumberOfEntries")
            self.NumberOfEntries = ival_
            self.NumberOfEntries_nsprefix_ = child_.prefix
        elif nodeName_ == "TotalDebit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalDebit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalDebit")
            self.TotalDebit = fval_
            self.TotalDebit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalDebit)
        elif nodeName_ == "TotalCredit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalCredit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalCredit")
            self.TotalCredit = fval_
            self.TotalCredit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalCredit)
        elif nodeName_ == "Invoice":
            obj_ = InvoiceStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Invoice.append(obj_)
            obj_.original_tagname_ = "Invoice"


# end class PurchaseInvoicesType


class PaymentsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        NumberOfEntries=None,
        TotalDebit=None,
        TotalCredit=None,
        Payment=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.NumberOfEntries = NumberOfEntries
        self.NumberOfEntries_nsprefix_ = None
        self.TotalDebit = TotalDebit
        self.validate_SAFmonetaryType(self.TotalDebit)
        self.TotalDebit_nsprefix_ = None
        self.TotalCredit = TotalCredit
        self.validate_SAFmonetaryType(self.TotalCredit)
        self.TotalCredit_nsprefix_ = None
        if Payment is None:
            self.Payment = []
        else:
            self.Payment = Payment
        self.Payment_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, PaymentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentsType.subclass:
            return PaymentsType.subclass(*args_, **kwargs_)
        else:
            return PaymentsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_NumberOfEntries(self):
        return self.NumberOfEntries

    def set_NumberOfEntries(self, NumberOfEntries):
        self.NumberOfEntries = NumberOfEntries

    def get_TotalDebit(self):
        return self.TotalDebit

    def set_TotalDebit(self, TotalDebit):
        self.TotalDebit = TotalDebit

    def get_TotalCredit(self):
        return self.TotalCredit

    def set_TotalCredit(self, TotalCredit):
        self.TotalCredit = TotalCredit

    def get_Payment(self):
        return self.Payment

    def set_Payment(self, Payment):
        self.Payment = Payment

    def add_Payment(self, value):
        self.Payment.append(value)

    def insert_Payment_at(self, index, value):
        self.Payment.insert(index, value)

    def replace_Payment_at(self, index, value):
        self.Payment[index] = value

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.NumberOfEntries is not None
            or self.TotalDebit is not None
            or self.TotalCredit is not None
            or self.Payment
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PaymentsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PaymentsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PaymentsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="PaymentsType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PaymentsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PaymentsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PaymentsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.NumberOfEntries is not None:
            namespaceprefix_ = (
                self.NumberOfEntries_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NumberOfEntries_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumberOfEntries>%s</%sNumberOfEntries>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.NumberOfEntries, input_name="NumberOfEntries"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalDebit is not None:
            namespaceprefix_ = (
                self.TotalDebit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalDebit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalDebit>%s</%sTotalDebit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalDebit, input_name="TotalDebit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalCredit is not None:
            namespaceprefix_ = (
                self.TotalCredit_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalCredit_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalCredit>%s</%sTotalCredit>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.TotalCredit, input_name="TotalCredit"),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Payment_ in self.Payment:
            namespaceprefix_ = (
                self.Payment_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Payment_nsprefix_)
                else ""
            )
            Payment_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Payment",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "NumberOfEntries" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "NumberOfEntries")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "NumberOfEntries")
            self.NumberOfEntries = ival_
            self.NumberOfEntries_nsprefix_ = child_.prefix
        elif nodeName_ == "TotalDebit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalDebit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalDebit")
            self.TotalDebit = fval_
            self.TotalDebit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalDebit)
        elif nodeName_ == "TotalCredit" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalCredit")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalCredit")
            self.TotalCredit = fval_
            self.TotalCredit_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.TotalCredit)
        elif nodeName_ == "Payment":
            obj_ = PaymentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payment.append(obj_)
            obj_.original_tagname_ = "Payment"


# end class PaymentsType


class PaymentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        PaymentRefNo=None,
        Period=None,
        PeriodYear=None,
        TransactionID=None,
        TransactionDate=None,
        PaymentMethod=None,
        Description=None,
        BatchID=None,
        SystemID=None,
        SourceID=None,
        Line=None,
        Settlement=None,
        DocumentTotals=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.PaymentRefNo = PaymentRefNo
        self.validate_SAFmiddle1textType(self.PaymentRefNo)
        self.PaymentRefNo_nsprefix_ = None
        self.Period = Period
        self.Period_nsprefix_ = None
        self.PeriodYear = PeriodYear
        self.validate_PeriodYearType2(self.PeriodYear)
        self.PeriodYear_nsprefix_ = None
        self.TransactionID = TransactionID
        self.validate_SAFmiddle2textType(self.TransactionID)
        self.TransactionID_nsprefix_ = None
        if isinstance(TransactionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TransactionDate, "%Y-%m-%d").date()
        else:
            initvalue_ = TransactionDate
        self.TransactionDate = initvalue_
        self.TransactionDate_nsprefix_ = None
        self.PaymentMethod = PaymentMethod
        self.validate_SAFcodeType(self.PaymentMethod)
        self.PaymentMethod_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.BatchID = BatchID
        self.validate_SAFmiddle1textType(self.BatchID)
        self.BatchID_nsprefix_ = None
        self.SystemID = SystemID
        self.validate_SAFmiddle1textType(self.SystemID)
        self.SystemID_nsprefix_ = None
        self.SourceID = SourceID
        self.validate_SAFmiddle1textType(self.SourceID)
        self.SourceID_nsprefix_ = None
        if Line is None:
            self.Line = []
        else:
            self.Line = Line
        self.Line_nsprefix_ = None
        self.Settlement = Settlement
        self.Settlement_nsprefix_ = None
        self.DocumentTotals = DocumentTotals
        self.DocumentTotals_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, PaymentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentType.subclass:
            return PaymentType.subclass(*args_, **kwargs_)
        else:
            return PaymentType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_PaymentRefNo(self):
        return self.PaymentRefNo

    def set_PaymentRefNo(self, PaymentRefNo):
        self.PaymentRefNo = PaymentRefNo

    def get_Period(self):
        return self.Period

    def set_Period(self, Period):
        self.Period = Period

    def get_PeriodYear(self):
        return self.PeriodYear

    def set_PeriodYear(self, PeriodYear):
        self.PeriodYear = PeriodYear

    def get_TransactionID(self):
        return self.TransactionID

    def set_TransactionID(self, TransactionID):
        self.TransactionID = TransactionID

    def get_TransactionDate(self):
        return self.TransactionDate

    def set_TransactionDate(self, TransactionDate):
        self.TransactionDate = TransactionDate

    def get_PaymentMethod(self):
        return self.PaymentMethod

    def set_PaymentMethod(self, PaymentMethod):
        self.PaymentMethod = PaymentMethod

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_BatchID(self):
        return self.BatchID

    def set_BatchID(self, BatchID):
        self.BatchID = BatchID

    def get_SystemID(self):
        return self.SystemID

    def set_SystemID(self, SystemID):
        self.SystemID = SystemID

    def get_SourceID(self):
        return self.SourceID

    def set_SourceID(self, SourceID):
        self.SourceID = SourceID

    def get_Line(self):
        return self.Line

    def set_Line(self, Line):
        self.Line = Line

    def add_Line(self, value):
        self.Line.append(value)

    def insert_Line_at(self, index, value):
        self.Line.insert(index, value)

    def replace_Line_at(self, index, value):
        self.Line[index] = value

    def get_Settlement(self):
        return self.Settlement

    def set_Settlement(self, Settlement):
        self.Settlement = Settlement

    def get_DocumentTotals(self):
        return self.DocumentTotals

    def set_DocumentTotals(self, DocumentTotals):
        self.DocumentTotals = DocumentTotals

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_PeriodYearType2(self, value):
        result = True
        # Validate type PeriodYearType2, a restriction on xs:nonNegativeInteger.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (int)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 1970:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PeriodYearType2'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 2100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on PeriodYearType2'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.PaymentRefNo is not None
            or self.Period is not None
            or self.PeriodYear is not None
            or self.TransactionID is not None
            or self.TransactionDate is not None
            or self.PaymentMethod is not None
            or self.Description is not None
            or self.BatchID is not None
            or self.SystemID is not None
            or self.SourceID is not None
            or self.Line
            or self.Settlement is not None
            or self.DocumentTotals is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PaymentType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PaymentType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PaymentType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="PaymentType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PaymentType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PaymentType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PaymentType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.PaymentRefNo is not None:
            namespaceprefix_ = (
                self.PaymentRefNo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentRefNo_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPaymentRefNo>%s</%sPaymentRefNo>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.PaymentRefNo), input_name="PaymentRefNo"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Period is not None:
            namespaceprefix_ = (
                self.Period_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Period_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriod>%s</%sPeriod>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.Period, input_name="Period"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PeriodYear is not None:
            namespaceprefix_ = (
                self.PeriodYear_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PeriodYear_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPeriodYear>%s</%sPeriodYear>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.PeriodYear, input_name="PeriodYear"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TransactionID is not None:
            namespaceprefix_ = (
                self.TransactionID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionID>%s</%sTransactionID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TransactionID), input_name="TransactionID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TransactionDate is not None:
            namespaceprefix_ = (
                self.TransactionDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionDate>%s</%sTransactionDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.TransactionDate, input_name="TransactionDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PaymentMethod is not None:
            namespaceprefix_ = (
                self.PaymentMethod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentMethod_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPaymentMethod>%s</%sPaymentMethod>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.PaymentMethod), input_name="PaymentMethod"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BatchID is not None:
            namespaceprefix_ = (
                self.BatchID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BatchID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBatchID>%s</%sBatchID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.BatchID), input_name="BatchID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SystemID is not None:
            namespaceprefix_ = (
                self.SystemID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SystemID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSystemID>%s</%sSystemID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SystemID), input_name="SystemID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SourceID is not None:
            namespaceprefix_ = (
                self.SourceID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSourceID>%s</%sSourceID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SourceID), input_name="SourceID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Line_ in self.Line:
            namespaceprefix_ = (
                self.Line_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Line_nsprefix_)
                else ""
            )
            Line_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Line",
                pretty_print=pretty_print,
            )
        if self.Settlement is not None:
            namespaceprefix_ = (
                self.Settlement_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Settlement_nsprefix_)
                else ""
            )
            self.Settlement.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Settlement",
                pretty_print=pretty_print,
            )
        if self.DocumentTotals is not None:
            namespaceprefix_ = (
                self.DocumentTotals_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentTotals_nsprefix_)
                else ""
            )
            self.DocumentTotals.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="DocumentTotals",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "PaymentRefNo":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "PaymentRefNo")
            value_ = self.gds_validate_string(value_, node, "PaymentRefNo")
            self.PaymentRefNo = value_
            self.PaymentRefNo_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.PaymentRefNo)
        elif nodeName_ == "Period" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "Period")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "Period")
            self.Period = ival_
            self.Period_nsprefix_ = child_.prefix
        elif nodeName_ == "PeriodYear" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "PeriodYear")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "PeriodYear")
            self.PeriodYear = ival_
            self.PeriodYear_nsprefix_ = child_.prefix
            # validate type PeriodYearType2
            self.validate_PeriodYearType2(self.PeriodYear)
        elif nodeName_ == "TransactionID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TransactionID")
            value_ = self.gds_validate_string(value_, node, "TransactionID")
            self.TransactionID = value_
            self.TransactionID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TransactionID)
        elif nodeName_ == "TransactionDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TransactionDate = dval_
            self.TransactionDate_nsprefix_ = child_.prefix
        elif nodeName_ == "PaymentMethod":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "PaymentMethod")
            value_ = self.gds_validate_string(value_, node, "PaymentMethod")
            self.PaymentMethod = value_
            self.PaymentMethod_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.PaymentMethod)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "BatchID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "BatchID")
            value_ = self.gds_validate_string(value_, node, "BatchID")
            self.BatchID = value_
            self.BatchID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.BatchID)
        elif nodeName_ == "SystemID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SystemID")
            value_ = self.gds_validate_string(value_, node, "SystemID")
            self.SystemID = value_
            self.SystemID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SystemID)
        elif nodeName_ == "SourceID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SourceID")
            value_ = self.gds_validate_string(value_, node, "SourceID")
            self.SourceID = value_
            self.SourceID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SourceID)
        elif nodeName_ == "Line":
            obj_ = LineType3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Line.append(obj_)
            obj_.original_tagname_ = "Line"
        elif nodeName_ == "Settlement":
            obj_ = SettlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Settlement = obj_
            obj_.original_tagname_ = "Settlement"
        elif nodeName_ == "DocumentTotals":
            obj_ = DocumentTotalsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentTotals = obj_
            obj_.original_tagname_ = "DocumentTotals"


# end class PaymentType


class LineType3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        LineNumber=None,
        SourceDocumentID=None,
        AccountID=None,
        Analysis=None,
        CustomerID=None,
        SupplierID=None,
        TaxPointDate=None,
        Description=None,
        DebitCreditIndicator=None,
        PaymentLineAmount=None,
        TaxInformation=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.validate_SAFshorttextType(self.LineNumber)
        self.LineNumber_nsprefix_ = None
        self.SourceDocumentID = SourceDocumentID
        self.validate_SAFmiddle1textType(self.SourceDocumentID)
        self.SourceDocumentID_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        if Analysis is None:
            self.Analysis = []
        else:
            self.Analysis = Analysis
        self.Analysis_nsprefix_ = None
        self.CustomerID = CustomerID
        self.validate_SAFmiddle1textType(self.CustomerID)
        self.CustomerID_nsprefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        if isinstance(TaxPointDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TaxPointDate, "%Y-%m-%d").date()
        else:
            initvalue_ = TaxPointDate
        self.TaxPointDate = initvalue_
        self.TaxPointDate_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.DebitCreditIndicator = DebitCreditIndicator
        self.validate_DebitCreditIndicatorType(self.DebitCreditIndicator)
        self.DebitCreditIndicator_nsprefix_ = None
        self.PaymentLineAmount = PaymentLineAmount
        self.PaymentLineAmount_nsprefix_ = None
        if TaxInformation is None:
            self.TaxInformation = []
        else:
            self.TaxInformation = TaxInformation
        self.TaxInformation_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, LineType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineType3.subclass:
            return LineType3.subclass(*args_, **kwargs_)
        else:
            return LineType3(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_LineNumber(self):
        return self.LineNumber

    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber

    def get_SourceDocumentID(self):
        return self.SourceDocumentID

    def set_SourceDocumentID(self, SourceDocumentID):
        self.SourceDocumentID = SourceDocumentID

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_Analysis(self):
        return self.Analysis

    def set_Analysis(self, Analysis):
        self.Analysis = Analysis

    def add_Analysis(self, value):
        self.Analysis.append(value)

    def insert_Analysis_at(self, index, value):
        self.Analysis.insert(index, value)

    def replace_Analysis_at(self, index, value):
        self.Analysis[index] = value

    def get_CustomerID(self):
        return self.CustomerID

    def set_CustomerID(self, CustomerID):
        self.CustomerID = CustomerID

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_TaxPointDate(self):
        return self.TaxPointDate

    def set_TaxPointDate(self, TaxPointDate):
        self.TaxPointDate = TaxPointDate

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_DebitCreditIndicator(self):
        return self.DebitCreditIndicator

    def set_DebitCreditIndicator(self, DebitCreditIndicator):
        self.DebitCreditIndicator = DebitCreditIndicator

    def get_PaymentLineAmount(self):
        return self.PaymentLineAmount

    def set_PaymentLineAmount(self, PaymentLineAmount):
        self.PaymentLineAmount = PaymentLineAmount

    def get_TaxInformation(self):
        return self.TaxInformation

    def set_TaxInformation(self, TaxInformation):
        self.TaxInformation = TaxInformation

    def add_TaxInformation(self, value):
        self.TaxInformation.append(value)

    def insert_TaxInformation_at(self, index, value):
        self.TaxInformation.insert(index, value)

    def replace_TaxInformation_at(self, index, value):
        self.TaxInformation[index] = value

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_DebitCreditIndicatorType(self, value):
        result = True
        # Validate type DebitCreditIndicatorType, a restriction on SAFcodeType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["D", "C"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DebitCreditIndicatorType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DebitCreditIndicatorType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.LineNumber is not None
            or self.SourceDocumentID is not None
            or self.AccountID is not None
            or self.Analysis
            or self.CustomerID is not None
            or self.SupplierID is not None
            or self.TaxPointDate is not None
            or self.Description is not None
            or self.DebitCreditIndicator is not None
            or self.PaymentLineAmount is not None
            or self.TaxInformation
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType3",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("LineType3")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "LineType3":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="LineType3"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="LineType3",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="LineType3"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType3",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.LineNumber is not None:
            namespaceprefix_ = (
                self.LineNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LineNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLineNumber>%s</%sLineNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LineNumber), input_name="LineNumber"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SourceDocumentID is not None:
            namespaceprefix_ = (
                self.SourceDocumentID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceDocumentID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSourceDocumentID>%s</%sSourceDocumentID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SourceDocumentID),
                            input_name="SourceDocumentID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Analysis_ in self.Analysis:
            namespaceprefix_ = (
                self.Analysis_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Analysis_nsprefix_)
                else ""
            )
            Analysis_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Analysis",
                pretty_print=pretty_print,
            )
        if self.CustomerID is not None:
            namespaceprefix_ = (
                self.CustomerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCustomerID>%s</%sCustomerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CustomerID), input_name="CustomerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxPointDate is not None:
            namespaceprefix_ = (
                self.TaxPointDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxPointDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxPointDate>%s</%sTaxPointDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.TaxPointDate, input_name="TaxPointDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DebitCreditIndicator is not None:
            namespaceprefix_ = (
                self.DebitCreditIndicator_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DebitCreditIndicator_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDebitCreditIndicator>%s</%sDebitCreditIndicator>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DebitCreditIndicator),
                            input_name="DebitCreditIndicator",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PaymentLineAmount is not None:
            namespaceprefix_ = (
                self.PaymentLineAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentLineAmount_nsprefix_)
                else ""
            )
            self.PaymentLineAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PaymentLineAmount",
                pretty_print=pretty_print,
            )
        for TaxInformation_ in self.TaxInformation:
            namespaceprefix_ = (
                self.TaxInformation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxInformation_nsprefix_)
                else ""
            )
            TaxInformation_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxInformation",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "LineNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LineNumber")
            value_ = self.gds_validate_string(value_, node, "LineNumber")
            self.LineNumber = value_
            self.LineNumber_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.LineNumber)
        elif nodeName_ == "SourceDocumentID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SourceDocumentID")
            value_ = self.gds_validate_string(value_, node, "SourceDocumentID")
            self.SourceDocumentID = value_
            self.SourceDocumentID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SourceDocumentID)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "Analysis":
            obj_ = AnalysisStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Analysis.append(obj_)
            obj_.original_tagname_ = "Analysis"
        elif nodeName_ == "CustomerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CustomerID")
            value_ = self.gds_validate_string(value_, node, "CustomerID")
            self.CustomerID = value_
            self.CustomerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CustomerID)
        elif nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "TaxPointDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TaxPointDate = dval_
            self.TaxPointDate_nsprefix_ = child_.prefix
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "DebitCreditIndicator":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DebitCreditIndicator")
            value_ = self.gds_validate_string(value_, node, "DebitCreditIndicator")
            self.DebitCreditIndicator = value_
            self.DebitCreditIndicator_nsprefix_ = child_.prefix
            # validate type DebitCreditIndicatorType
            self.validate_DebitCreditIndicatorType(self.DebitCreditIndicator)
        elif nodeName_ == "PaymentLineAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentLineAmount = obj_
            obj_.original_tagname_ = "PaymentLineAmount"
        elif nodeName_ == "TaxInformation":
            obj_ = TaxInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxInformation.append(obj_)
            obj_.original_tagname_ = "TaxInformation"


# end class LineType3


class SettlementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        SettlementDiscount=None,
        SettlementAmount=None,
        SettlementDate=None,
        PaymentMechanism=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.SettlementDiscount = SettlementDiscount
        self.validate_SAFmiddle1textType(self.SettlementDiscount)
        self.SettlementDiscount_nsprefix_ = None
        self.SettlementAmount = SettlementAmount
        self.SettlementAmount_nsprefix_ = None
        if isinstance(SettlementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SettlementDate, "%Y-%m-%d").date()
        else:
            initvalue_ = SettlementDate
        self.SettlementDate = initvalue_
        self.SettlementDate_nsprefix_ = None
        self.PaymentMechanism = PaymentMechanism
        self.validate_SAFcodeType(self.PaymentMechanism)
        self.PaymentMechanism_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SettlementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SettlementType.subclass:
            return SettlementType.subclass(*args_, **kwargs_)
        else:
            return SettlementType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SettlementDiscount(self):
        return self.SettlementDiscount

    def set_SettlementDiscount(self, SettlementDiscount):
        self.SettlementDiscount = SettlementDiscount

    def get_SettlementAmount(self):
        return self.SettlementAmount

    def set_SettlementAmount(self, SettlementAmount):
        self.SettlementAmount = SettlementAmount

    def get_SettlementDate(self):
        return self.SettlementDate

    def set_SettlementDate(self, SettlementDate):
        self.SettlementDate = SettlementDate

    def get_PaymentMechanism(self):
        return self.PaymentMechanism

    def set_PaymentMechanism(self, PaymentMechanism):
        self.PaymentMechanism = PaymentMechanism

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.SettlementDiscount is not None
            or self.SettlementAmount is not None
            or self.SettlementDate is not None
            or self.PaymentMechanism is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SettlementType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SettlementType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SettlementType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SettlementType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SettlementType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SettlementType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SettlementType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.SettlementDiscount is not None:
            namespaceprefix_ = (
                self.SettlementDiscount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SettlementDiscount_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSettlementDiscount>%s</%sSettlementDiscount>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SettlementDiscount),
                            input_name="SettlementDiscount",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SettlementAmount is not None:
            namespaceprefix_ = (
                self.SettlementAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SettlementAmount_nsprefix_)
                else ""
            )
            self.SettlementAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="SettlementAmount",
                pretty_print=pretty_print,
            )
        if self.SettlementDate is not None:
            namespaceprefix_ = (
                self.SettlementDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SettlementDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSettlementDate>%s</%sSettlementDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.SettlementDate, input_name="SettlementDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PaymentMechanism is not None:
            namespaceprefix_ = (
                self.PaymentMechanism_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentMechanism_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPaymentMechanism>%s</%sPaymentMechanism>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.PaymentMechanism),
                            input_name="PaymentMechanism",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SettlementDiscount":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SettlementDiscount")
            value_ = self.gds_validate_string(value_, node, "SettlementDiscount")
            self.SettlementDiscount = value_
            self.SettlementDiscount_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SettlementDiscount)
        elif nodeName_ == "SettlementAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SettlementAmount = obj_
            obj_.original_tagname_ = "SettlementAmount"
        elif nodeName_ == "SettlementDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SettlementDate = dval_
            self.SettlementDate_nsprefix_ = child_.prefix
        elif nodeName_ == "PaymentMechanism":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "PaymentMechanism")
            value_ = self.gds_validate_string(value_, node, "PaymentMechanism")
            self.PaymentMechanism = value_
            self.PaymentMechanism_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.PaymentMechanism)


# end class SettlementType


class DocumentTotalsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxInformationTotals=None,
        NetTotal=None,
        GrossTotal=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if TaxInformationTotals is None:
            self.TaxInformationTotals = []
        else:
            self.TaxInformationTotals = TaxInformationTotals
        self.TaxInformationTotals_nsprefix_ = None
        self.NetTotal = NetTotal
        self.validate_SAFmonetaryType(self.NetTotal)
        self.NetTotal_nsprefix_ = None
        self.GrossTotal = GrossTotal
        self.validate_SAFmonetaryType(self.GrossTotal)
        self.GrossTotal_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentTotalsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentTotalsType.subclass:
            return DocumentTotalsType.subclass(*args_, **kwargs_)
        else:
            return DocumentTotalsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxInformationTotals(self):
        return self.TaxInformationTotals

    def set_TaxInformationTotals(self, TaxInformationTotals):
        self.TaxInformationTotals = TaxInformationTotals

    def add_TaxInformationTotals(self, value):
        self.TaxInformationTotals.append(value)

    def insert_TaxInformationTotals_at(self, index, value):
        self.TaxInformationTotals.insert(index, value)

    def replace_TaxInformationTotals_at(self, index, value):
        self.TaxInformationTotals[index] = value

    def get_NetTotal(self):
        return self.NetTotal

    def set_NetTotal(self, NetTotal):
        self.NetTotal = NetTotal

    def get_GrossTotal(self):
        return self.GrossTotal

    def set_GrossTotal(self, GrossTotal):
        self.GrossTotal = GrossTotal

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxInformationTotals
            or self.NetTotal is not None
            or self.GrossTotal is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DocumentTotalsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("DocumentTotalsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "DocumentTotalsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="DocumentTotalsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="DocumentTotalsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="DocumentTotalsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DocumentTotalsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        for TaxInformationTotals_ in self.TaxInformationTotals:
            namespaceprefix_ = (
                self.TaxInformationTotals_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxInformationTotals_nsprefix_)
                else ""
            )
            TaxInformationTotals_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxInformationTotals",
                pretty_print=pretty_print,
            )
        if self.NetTotal is not None:
            namespaceprefix_ = (
                self.NetTotal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NetTotal_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNetTotal>%s</%sNetTotal>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.NetTotal, input_name="NetTotal"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GrossTotal is not None:
            namespaceprefix_ = (
                self.GrossTotal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GrossTotal_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGrossTotal>%s</%sGrossTotal>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.GrossTotal, input_name="GrossTotal"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxInformationTotals":
            obj_ = TaxInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxInformationTotals.append(obj_)
            obj_.original_tagname_ = "TaxInformationTotals"
        elif nodeName_ == "NetTotal" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "NetTotal")
            fval_ = self.gds_validate_decimal(fval_, node, "NetTotal")
            self.NetTotal = fval_
            self.NetTotal_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.NetTotal)
        elif nodeName_ == "GrossTotal" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "GrossTotal")
            fval_ = self.gds_validate_decimal(fval_, node, "GrossTotal")
            self.GrossTotal = fval_
            self.GrossTotal_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.GrossTotal)


# end class DocumentTotalsType


class MovementOfGoodsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        NumberOfMovementLines=None,
        TotalQuantityReceived=None,
        TotalQuantityIssued=None,
        StockMovement=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.NumberOfMovementLines = NumberOfMovementLines
        self.NumberOfMovementLines_nsprefix_ = None
        self.TotalQuantityReceived = TotalQuantityReceived
        self.validate_SAFquantityType(self.TotalQuantityReceived)
        self.TotalQuantityReceived_nsprefix_ = None
        self.TotalQuantityIssued = TotalQuantityIssued
        self.validate_SAFquantityType(self.TotalQuantityIssued)
        self.TotalQuantityIssued_nsprefix_ = None
        if StockMovement is None:
            self.StockMovement = []
        else:
            self.StockMovement = StockMovement
        self.StockMovement_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MovementOfGoodsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MovementOfGoodsType.subclass:
            return MovementOfGoodsType.subclass(*args_, **kwargs_)
        else:
            return MovementOfGoodsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_NumberOfMovementLines(self):
        return self.NumberOfMovementLines

    def set_NumberOfMovementLines(self, NumberOfMovementLines):
        self.NumberOfMovementLines = NumberOfMovementLines

    def get_TotalQuantityReceived(self):
        return self.TotalQuantityReceived

    def set_TotalQuantityReceived(self, TotalQuantityReceived):
        self.TotalQuantityReceived = TotalQuantityReceived

    def get_TotalQuantityIssued(self):
        return self.TotalQuantityIssued

    def set_TotalQuantityIssued(self, TotalQuantityIssued):
        self.TotalQuantityIssued = TotalQuantityIssued

    def get_StockMovement(self):
        return self.StockMovement

    def set_StockMovement(self, StockMovement):
        self.StockMovement = StockMovement

    def add_StockMovement(self, value):
        self.StockMovement.append(value)

    def insert_StockMovement_at(self, index, value):
        self.StockMovement.insert(index, value)

    def replace_StockMovement_at(self, index, value):
        self.StockMovement[index] = value

    def validate_SAFquantityType(self, value):
        result = True
        # Validate type SAFquantityType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 22:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFquantityType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.NumberOfMovementLines is not None
            or self.TotalQuantityReceived is not None
            or self.TotalQuantityIssued is not None
            or self.StockMovement
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MovementOfGoodsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("MovementOfGoodsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "MovementOfGoodsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="MovementOfGoodsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="MovementOfGoodsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="MovementOfGoodsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="MovementOfGoodsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.NumberOfMovementLines is not None:
            namespaceprefix_ = (
                self.NumberOfMovementLines_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NumberOfMovementLines_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumberOfMovementLines>%s</%sNumberOfMovementLines>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.NumberOfMovementLines, input_name="NumberOfMovementLines"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalQuantityReceived is not None:
            namespaceprefix_ = (
                self.TotalQuantityReceived_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalQuantityReceived_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalQuantityReceived>%s</%sTotalQuantityReceived>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.TotalQuantityReceived, input_name="TotalQuantityReceived"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TotalQuantityIssued is not None:
            namespaceprefix_ = (
                self.TotalQuantityIssued_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TotalQuantityIssued_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTotalQuantityIssued>%s</%sTotalQuantityIssued>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.TotalQuantityIssued, input_name="TotalQuantityIssued"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for StockMovement_ in self.StockMovement:
            namespaceprefix_ = (
                self.StockMovement_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockMovement_nsprefix_)
                else ""
            )
            StockMovement_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="StockMovement",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "NumberOfMovementLines" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "NumberOfMovementLines")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "NumberOfMovementLines")
            self.NumberOfMovementLines = ival_
            self.NumberOfMovementLines_nsprefix_ = child_.prefix
        elif nodeName_ == "TotalQuantityReceived" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalQuantityReceived")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalQuantityReceived")
            self.TotalQuantityReceived = fval_
            self.TotalQuantityReceived_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.TotalQuantityReceived)
        elif nodeName_ == "TotalQuantityIssued" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "TotalQuantityIssued")
            fval_ = self.gds_validate_decimal(fval_, node, "TotalQuantityIssued")
            self.TotalQuantityIssued = fval_
            self.TotalQuantityIssued_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.TotalQuantityIssued)
        elif nodeName_ == "StockMovement":
            obj_ = StockMovementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StockMovement.append(obj_)
            obj_.original_tagname_ = "StockMovement"


# end class MovementOfGoodsType


class StockMovementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        MovementReference=None,
        MovementDate=None,
        MovementPostingDate=None,
        MovementPostingTime=None,
        TaxPointDate=None,
        MovementType=None,
        SourceID=None,
        SystemID=None,
        DocumentReference=None,
        Line=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.MovementReference = MovementReference
        self.validate_SAFmiddle1textType(self.MovementReference)
        self.MovementReference_nsprefix_ = None
        if isinstance(MovementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MovementDate, "%Y-%m-%d").date()
        else:
            initvalue_ = MovementDate
        self.MovementDate = initvalue_
        self.MovementDate_nsprefix_ = None
        if isinstance(MovementPostingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                MovementPostingDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = MovementPostingDate
        self.MovementPostingDate = initvalue_
        self.MovementPostingDate_nsprefix_ = None
        if isinstance(MovementPostingTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                MovementPostingTime, "%H:%M:%S"
            ).time()
        else:
            initvalue_ = MovementPostingTime
        self.MovementPostingTime = initvalue_
        self.MovementPostingTime_nsprefix_ = None
        if isinstance(TaxPointDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TaxPointDate, "%Y-%m-%d").date()
        else:
            initvalue_ = TaxPointDate
        self.TaxPointDate = initvalue_
        self.TaxPointDate_nsprefix_ = None
        self.MovementType = MovementType
        self.validate_SAFcodeType(self.MovementType)
        self.MovementType_nsprefix_ = None
        self.SourceID = SourceID
        self.validate_SAFmiddle1textType(self.SourceID)
        self.SourceID_nsprefix_ = None
        self.SystemID = SystemID
        self.validate_SAFmiddle1textType(self.SystemID)
        self.SystemID_nsprefix_ = None
        self.DocumentReference = DocumentReference
        self.DocumentReference_nsprefix_ = None
        if Line is None:
            self.Line = []
        else:
            self.Line = Line
        self.Line_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, StockMovementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StockMovementType.subclass:
            return StockMovementType.subclass(*args_, **kwargs_)
        else:
            return StockMovementType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_MovementReference(self):
        return self.MovementReference

    def set_MovementReference(self, MovementReference):
        self.MovementReference = MovementReference

    def get_MovementDate(self):
        return self.MovementDate

    def set_MovementDate(self, MovementDate):
        self.MovementDate = MovementDate

    def get_MovementPostingDate(self):
        return self.MovementPostingDate

    def set_MovementPostingDate(self, MovementPostingDate):
        self.MovementPostingDate = MovementPostingDate

    def get_MovementPostingTime(self):
        return self.MovementPostingTime

    def set_MovementPostingTime(self, MovementPostingTime):
        self.MovementPostingTime = MovementPostingTime

    def get_TaxPointDate(self):
        return self.TaxPointDate

    def set_TaxPointDate(self, TaxPointDate):
        self.TaxPointDate = TaxPointDate

    def get_MovementType(self):
        return self.MovementType

    def set_MovementType(self, MovementType):
        self.MovementType = MovementType

    def get_SourceID(self):
        return self.SourceID

    def set_SourceID(self, SourceID):
        self.SourceID = SourceID

    def get_SystemID(self):
        return self.SystemID

    def set_SystemID(self, SystemID):
        self.SystemID = SystemID

    def get_DocumentReference(self):
        return self.DocumentReference

    def set_DocumentReference(self, DocumentReference):
        self.DocumentReference = DocumentReference

    def get_Line(self):
        return self.Line

    def set_Line(self, Line):
        self.Line = Line

    def add_Line(self, value):
        self.Line.append(value)

    def insert_Line_at(self, index, value):
        self.Line.insert(index, value)

    def replace_Line_at(self, index, value):
        self.Line[index] = value

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.MovementReference is not None
            or self.MovementDate is not None
            or self.MovementPostingDate is not None
            or self.MovementPostingTime is not None
            or self.TaxPointDate is not None
            or self.MovementType is not None
            or self.SourceID is not None
            or self.SystemID is not None
            or self.DocumentReference is not None
            or self.Line
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="StockMovementType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("StockMovementType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "StockMovementType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="StockMovementType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="StockMovementType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="StockMovementType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="StockMovementType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.MovementReference is not None:
            namespaceprefix_ = (
                self.MovementReference_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementReference_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementReference>%s</%sMovementReference>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MovementReference),
                            input_name="MovementReference",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MovementDate is not None:
            namespaceprefix_ = (
                self.MovementDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementDate>%s</%sMovementDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.MovementDate, input_name="MovementDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MovementPostingDate is not None:
            namespaceprefix_ = (
                self.MovementPostingDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementPostingDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementPostingDate>%s</%sMovementPostingDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.MovementPostingDate, input_name="MovementPostingDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MovementPostingTime is not None:
            namespaceprefix_ = (
                self.MovementPostingTime_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementPostingTime_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementPostingTime>%s</%sMovementPostingTime>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_time(
                        self.MovementPostingTime, input_name="MovementPostingTime"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxPointDate is not None:
            namespaceprefix_ = (
                self.TaxPointDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxPointDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxPointDate>%s</%sTaxPointDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.TaxPointDate, input_name="TaxPointDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MovementType is not None:
            namespaceprefix_ = (
                self.MovementType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementType>%s</%sMovementType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MovementType), input_name="MovementType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SourceID is not None:
            namespaceprefix_ = (
                self.SourceID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SourceID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSourceID>%s</%sSourceID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SourceID), input_name="SourceID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SystemID is not None:
            namespaceprefix_ = (
                self.SystemID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SystemID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSystemID>%s</%sSystemID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SystemID), input_name="SystemID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DocumentReference is not None:
            namespaceprefix_ = (
                self.DocumentReference_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentReference_nsprefix_)
                else ""
            )
            self.DocumentReference.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="DocumentReference",
                pretty_print=pretty_print,
            )
        for Line_ in self.Line:
            namespaceprefix_ = (
                self.Line_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Line_nsprefix_)
                else ""
            )
            Line_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Line",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "MovementReference":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MovementReference")
            value_ = self.gds_validate_string(value_, node, "MovementReference")
            self.MovementReference = value_
            self.MovementReference_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.MovementReference)
        elif nodeName_ == "MovementDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MovementDate = dval_
            self.MovementDate_nsprefix_ = child_.prefix
        elif nodeName_ == "MovementPostingDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MovementPostingDate = dval_
            self.MovementPostingDate_nsprefix_ = child_.prefix
        elif nodeName_ == "MovementPostingTime":
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.MovementPostingTime = dval_
            self.MovementPostingTime_nsprefix_ = child_.prefix
        elif nodeName_ == "TaxPointDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TaxPointDate = dval_
            self.TaxPointDate_nsprefix_ = child_.prefix
        elif nodeName_ == "MovementType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MovementType")
            value_ = self.gds_validate_string(value_, node, "MovementType")
            self.MovementType = value_
            self.MovementType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.MovementType)
        elif nodeName_ == "SourceID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SourceID")
            value_ = self.gds_validate_string(value_, node, "SourceID")
            self.SourceID = value_
            self.SourceID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SourceID)
        elif nodeName_ == "SystemID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SystemID")
            value_ = self.gds_validate_string(value_, node, "SystemID")
            self.SystemID = value_
            self.SystemID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SystemID)
        elif nodeName_ == "DocumentReference":
            obj_ = DocumentReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentReference = obj_
            obj_.original_tagname_ = "DocumentReference"
        elif nodeName_ == "Line":
            obj_ = LineType4.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Line.append(obj_)
            obj_.original_tagname_ = "Line"


# end class StockMovementType


class DocumentReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        DocumentType=None,
        DocumentNumber=None,
        DocumentLine=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.DocumentType = DocumentType
        self.validate_SAFshorttextType(self.DocumentType)
        self.DocumentType_nsprefix_ = None
        self.DocumentNumber = DocumentNumber
        self.validate_SAFmiddle1textType(self.DocumentNumber)
        self.DocumentNumber_nsprefix_ = None
        self.DocumentLine = DocumentLine
        self.validate_SAFshorttextType(self.DocumentLine)
        self.DocumentLine_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentReferenceType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentReferenceType.subclass:
            return DocumentReferenceType.subclass(*args_, **kwargs_)
        else:
            return DocumentReferenceType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_DocumentType(self):
        return self.DocumentType

    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType

    def get_DocumentNumber(self):
        return self.DocumentNumber

    def set_DocumentNumber(self, DocumentNumber):
        self.DocumentNumber = DocumentNumber

    def get_DocumentLine(self):
        return self.DocumentLine

    def set_DocumentLine(self, DocumentLine):
        self.DocumentLine = DocumentLine

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.DocumentType is not None
            or self.DocumentNumber is not None
            or self.DocumentLine is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DocumentReferenceType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("DocumentReferenceType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "DocumentReferenceType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="DocumentReferenceType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="DocumentReferenceType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="DocumentReferenceType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DocumentReferenceType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.DocumentType is not None:
            namespaceprefix_ = (
                self.DocumentType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDocumentType>%s</%sDocumentType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DocumentType), input_name="DocumentType"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DocumentNumber is not None:
            namespaceprefix_ = (
                self.DocumentNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDocumentNumber>%s</%sDocumentNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DocumentNumber), input_name="DocumentNumber"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DocumentLine is not None:
            namespaceprefix_ = (
                self.DocumentLine_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DocumentLine_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDocumentLine>%s</%sDocumentLine>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DocumentLine), input_name="DocumentLine"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "DocumentType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DocumentType")
            value_ = self.gds_validate_string(value_, node, "DocumentType")
            self.DocumentType = value_
            self.DocumentType_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.DocumentType)
        elif nodeName_ == "DocumentNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DocumentNumber")
            value_ = self.gds_validate_string(value_, node, "DocumentNumber")
            self.DocumentNumber = value_
            self.DocumentNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.DocumentNumber)
        elif nodeName_ == "DocumentLine":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DocumentLine")
            value_ = self.gds_validate_string(value_, node, "DocumentLine")
            self.DocumentLine = value_
            self.DocumentLine_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.DocumentLine)


# end class DocumentReferenceType


class LineType4(GeneratedsSuper):
    """Not needed when UOM of this line equals UOMPhysicalStock"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        LineNumber=None,
        AccountID=None,
        TransactionID=None,
        CustomerID=None,
        SupplierID=None,
        ShipTo=None,
        ShipFrom=None,
        ProductCode=None,
        StockAccountNo=None,
        Quantity=None,
        UnitOfMeasure=None,
        UOMToUOMPhysicalStockConversionFactor=None,
        BookValue=None,
        MovementSubType=None,
        MovementComments=None,
        TaxInformation=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.validate_SAFshorttextType(self.LineNumber)
        self.LineNumber_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        self.TransactionID = TransactionID
        self.validate_SAFmiddle2textType(self.TransactionID)
        self.TransactionID_nsprefix_ = None
        self.CustomerID = CustomerID
        self.validate_SAFmiddle1textType(self.CustomerID)
        self.CustomerID_nsprefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.ShipTo = ShipTo
        self.ShipTo_nsprefix_ = None
        self.ShipFrom = ShipFrom
        self.ShipFrom_nsprefix_ = None
        self.ProductCode = ProductCode
        self.validate_SAFmiddle2textType(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.StockAccountNo = StockAccountNo
        self.validate_SAFmiddle2textType(self.StockAccountNo)
        self.StockAccountNo_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_SAFquantityType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_SAFcodeType(self.UnitOfMeasure)
        self.UnitOfMeasure_nsprefix_ = None
        self.UOMToUOMPhysicalStockConversionFactor = (
            UOMToUOMPhysicalStockConversionFactor
        )
        self.UOMToUOMPhysicalStockConversionFactor_nsprefix_ = None
        self.BookValue = BookValue
        self.validate_SAFmonetaryType(self.BookValue)
        self.BookValue_nsprefix_ = None
        self.MovementSubType = MovementSubType
        self.validate_SAFcodeType(self.MovementSubType)
        self.MovementSubType_nsprefix_ = None
        self.MovementComments = MovementComments
        self.validate_SAFlongtextType(self.MovementComments)
        self.MovementComments_nsprefix_ = None
        if TaxInformation is None:
            self.TaxInformation = []
        else:
            self.TaxInformation = TaxInformation
        self.TaxInformation_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, LineType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineType4.subclass:
            return LineType4.subclass(*args_, **kwargs_)
        else:
            return LineType4(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_LineNumber(self):
        return self.LineNumber

    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_TransactionID(self):
        return self.TransactionID

    def set_TransactionID(self, TransactionID):
        self.TransactionID = TransactionID

    def get_CustomerID(self):
        return self.CustomerID

    def set_CustomerID(self, CustomerID):
        self.CustomerID = CustomerID

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_ShipTo(self):
        return self.ShipTo

    def set_ShipTo(self, ShipTo):
        self.ShipTo = ShipTo

    def get_ShipFrom(self):
        return self.ShipFrom

    def set_ShipFrom(self, ShipFrom):
        self.ShipFrom = ShipFrom

    def get_ProductCode(self):
        return self.ProductCode

    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode

    def get_StockAccountNo(self):
        return self.StockAccountNo

    def set_StockAccountNo(self, StockAccountNo):
        self.StockAccountNo = StockAccountNo

    def get_Quantity(self):
        return self.Quantity

    def set_Quantity(self, Quantity):
        self.Quantity = Quantity

    def get_UnitOfMeasure(self):
        return self.UnitOfMeasure

    def set_UnitOfMeasure(self, UnitOfMeasure):
        self.UnitOfMeasure = UnitOfMeasure

    def get_UOMToUOMPhysicalStockConversionFactor(self):
        return self.UOMToUOMPhysicalStockConversionFactor

    def set_UOMToUOMPhysicalStockConversionFactor(
        self, UOMToUOMPhysicalStockConversionFactor
    ):
        self.UOMToUOMPhysicalStockConversionFactor = (
            UOMToUOMPhysicalStockConversionFactor
        )

    def get_BookValue(self):
        return self.BookValue

    def set_BookValue(self, BookValue):
        self.BookValue = BookValue

    def get_MovementSubType(self):
        return self.MovementSubType

    def set_MovementSubType(self, MovementSubType):
        self.MovementSubType = MovementSubType

    def get_MovementComments(self):
        return self.MovementComments

    def set_MovementComments(self, MovementComments):
        self.MovementComments = MovementComments

    def get_TaxInformation(self):
        return self.TaxInformation

    def set_TaxInformation(self, TaxInformation):
        self.TaxInformation = TaxInformation

    def add_TaxInformation(self, value):
        self.TaxInformation.append(value)

    def insert_TaxInformation_at(self, index, value):
        self.TaxInformation.insert(index, value)

    def replace_TaxInformation_at(self, index, value):
        self.TaxInformation[index] = value

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFquantityType(self, value):
        result = True
        # Validate type SAFquantityType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 22:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFquantityType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.LineNumber is not None
            or self.AccountID is not None
            or self.TransactionID is not None
            or self.CustomerID is not None
            or self.SupplierID is not None
            or self.ShipTo is not None
            or self.ShipFrom is not None
            or self.ProductCode is not None
            or self.StockAccountNo is not None
            or self.Quantity is not None
            or self.UnitOfMeasure is not None
            or self.UOMToUOMPhysicalStockConversionFactor is not None
            or self.BookValue is not None
            or self.MovementSubType is not None
            or self.MovementComments is not None
            or self.TaxInformation
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType4",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("LineType4")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "LineType4":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="LineType4"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="LineType4",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="LineType4"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType4",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.LineNumber is not None:
            namespaceprefix_ = (
                self.LineNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LineNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLineNumber>%s</%sLineNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LineNumber), input_name="LineNumber"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TransactionID is not None:
            namespaceprefix_ = (
                self.TransactionID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionID>%s</%sTransactionID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TransactionID), input_name="TransactionID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CustomerID is not None:
            namespaceprefix_ = (
                self.CustomerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCustomerID>%s</%sCustomerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CustomerID), input_name="CustomerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ShipTo is not None:
            namespaceprefix_ = (
                self.ShipTo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShipTo_nsprefix_)
                else ""
            )
            self.ShipTo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShipTo",
                pretty_print=pretty_print,
            )
        if self.ShipFrom is not None:
            namespaceprefix_ = (
                self.ShipFrom_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShipFrom_nsprefix_)
                else ""
            )
            self.ShipFrom.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShipFrom",
                pretty_print=pretty_print,
            )
        if self.ProductCode is not None:
            namespaceprefix_ = (
                self.ProductCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductCode>%s</%sProductCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductCode), input_name="ProductCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.StockAccountNo is not None:
            namespaceprefix_ = (
                self.StockAccountNo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.StockAccountNo_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sStockAccountNo>%s</%sStockAccountNo>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.StockAccountNo), input_name="StockAccountNo"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Quantity is not None:
            namespaceprefix_ = (
                self.Quantity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Quantity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sQuantity>%s</%sQuantity>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.Quantity, input_name="Quantity"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UnitOfMeasure is not None:
            namespaceprefix_ = (
                self.UnitOfMeasure_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UnitOfMeasure_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.UnitOfMeasure), input_name="UnitOfMeasure"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMToUOMPhysicalStockConversionFactor is not None:
            namespaceprefix_ = (
                self.UOMToUOMPhysicalStockConversionFactor_nsprefix_ + ":"
                if (
                    UseCapturedNS_
                    and self.UOMToUOMPhysicalStockConversionFactor_nsprefix_
                )
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMToUOMPhysicalStockConversionFactor>%s</%sUOMToUOMPhysicalStockConversionFactor>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.UOMToUOMPhysicalStockConversionFactor,
                        input_name="UOMToUOMPhysicalStockConversionFactor",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BookValue is not None:
            namespaceprefix_ = (
                self.BookValue_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BookValue_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBookValue>%s</%sBookValue>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.BookValue, input_name="BookValue"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MovementSubType is not None:
            namespaceprefix_ = (
                self.MovementSubType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementSubType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementSubType>%s</%sMovementSubType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MovementSubType),
                            input_name="MovementSubType",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MovementComments is not None:
            namespaceprefix_ = (
                self.MovementComments_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementComments_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementComments>%s</%sMovementComments>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MovementComments),
                            input_name="MovementComments",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for TaxInformation_ in self.TaxInformation:
            namespaceprefix_ = (
                self.TaxInformation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxInformation_nsprefix_)
                else ""
            )
            TaxInformation_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxInformation",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "LineNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LineNumber")
            value_ = self.gds_validate_string(value_, node, "LineNumber")
            self.LineNumber = value_
            self.LineNumber_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.LineNumber)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "TransactionID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TransactionID")
            value_ = self.gds_validate_string(value_, node, "TransactionID")
            self.TransactionID = value_
            self.TransactionID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TransactionID)
        elif nodeName_ == "CustomerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CustomerID")
            value_ = self.gds_validate_string(value_, node, "CustomerID")
            self.CustomerID = value_
            self.CustomerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CustomerID)
        elif nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "ShipTo":
            obj_ = ShippingPointStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipTo = obj_
            obj_.original_tagname_ = "ShipTo"
        elif nodeName_ == "ShipFrom":
            obj_ = ShippingPointStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = "ShipFrom"
        elif nodeName_ == "ProductCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductCode")
            value_ = self.gds_validate_string(value_, node, "ProductCode")
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.ProductCode)
        elif nodeName_ == "StockAccountNo":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "StockAccountNo")
            value_ = self.gds_validate_string(value_, node, "StockAccountNo")
            self.StockAccountNo = value_
            self.StockAccountNo_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.StockAccountNo)
        elif nodeName_ == "Quantity" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "Quantity")
            fval_ = self.gds_validate_decimal(fval_, node, "Quantity")
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.Quantity)
        elif nodeName_ == "UnitOfMeasure":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "UnitOfMeasure")
            value_ = self.gds_validate_string(value_, node, "UnitOfMeasure")
            self.UnitOfMeasure = value_
            self.UnitOfMeasure_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.UnitOfMeasure)
        elif nodeName_ == "UOMToUOMPhysicalStockConversionFactor" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(
                sval_, node, "UOMToUOMPhysicalStockConversionFactor"
            )
            fval_ = self.gds_validate_decimal(
                fval_, node, "UOMToUOMPhysicalStockConversionFactor"
            )
            self.UOMToUOMPhysicalStockConversionFactor = fval_
            self.UOMToUOMPhysicalStockConversionFactor_nsprefix_ = child_.prefix
        elif nodeName_ == "BookValue" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "BookValue")
            fval_ = self.gds_validate_decimal(fval_, node, "BookValue")
            self.BookValue = fval_
            self.BookValue_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.BookValue)
        elif nodeName_ == "MovementSubType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MovementSubType")
            value_ = self.gds_validate_string(value_, node, "MovementSubType")
            self.MovementSubType = value_
            self.MovementSubType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.MovementSubType)
        elif nodeName_ == "MovementComments":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MovementComments")
            value_ = self.gds_validate_string(value_, node, "MovementComments")
            self.MovementComments = value_
            self.MovementComments_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.MovementComments)
        elif nodeName_ == "TaxInformation":
            obj_ = TaxInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxInformation.append(obj_)
            obj_.original_tagname_ = "TaxInformation"


# end class LineType4


class AssetTransactionsType(GeneratedsSuper):
    """Details of all transactions related to an asset during the
    Selectionperiod."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        NumberOfAssetTransactions=None,
        AssetTransaction=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.NumberOfAssetTransactions = NumberOfAssetTransactions
        self.NumberOfAssetTransactions_nsprefix_ = None
        if AssetTransaction is None:
            self.AssetTransaction = []
        else:
            self.AssetTransaction = AssetTransaction
        self.AssetTransaction_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssetTransactionsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetTransactionsType.subclass:
            return AssetTransactionsType.subclass(*args_, **kwargs_)
        else:
            return AssetTransactionsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_NumberOfAssetTransactions(self):
        return self.NumberOfAssetTransactions

    def set_NumberOfAssetTransactions(self, NumberOfAssetTransactions):
        self.NumberOfAssetTransactions = NumberOfAssetTransactions

    def get_AssetTransaction(self):
        return self.AssetTransaction

    def set_AssetTransaction(self, AssetTransaction):
        self.AssetTransaction = AssetTransaction

    def add_AssetTransaction(self, value):
        self.AssetTransaction.append(value)

    def insert_AssetTransaction_at(self, index, value):
        self.AssetTransaction.insert(index, value)

    def replace_AssetTransaction_at(self, index, value):
        self.AssetTransaction[index] = value

    def hasContent_(self):
        if self.NumberOfAssetTransactions is not None or self.AssetTransaction:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AssetTransactionsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AssetTransactionsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AssetTransactionsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AssetTransactionsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AssetTransactionsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.NumberOfAssetTransactions is not None:
            namespaceprefix_ = (
                self.NumberOfAssetTransactions_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NumberOfAssetTransactions_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNumberOfAssetTransactions>%s</%sNumberOfAssetTransactions>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.NumberOfAssetTransactions,
                        input_name="NumberOfAssetTransactions",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for AssetTransaction_ in self.AssetTransaction:
            namespaceprefix_ = (
                self.AssetTransaction_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransaction_nsprefix_)
                else ""
            )
            AssetTransaction_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AssetTransaction",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "NumberOfAssetTransactions" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "NumberOfAssetTransactions")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "NumberOfAssetTransactions")
            self.NumberOfAssetTransactions = ival_
            self.NumberOfAssetTransactions_nsprefix_ = child_.prefix
        elif nodeName_ == "AssetTransaction":
            obj_ = AssetTransactionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssetTransaction.append(obj_)
            obj_.original_tagname_ = "AssetTransaction"


# end class AssetTransactionsType


class AssetTransactionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AssetTransactionID=None,
        AssetID=None,
        AssetTransactionType_member=None,
        Description=None,
        AssetTransactionDate=None,
        Supplier=None,
        TransactionID=None,
        AssetTransactionValuations=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AssetTransactionID = AssetTransactionID
        self.validate_SAFmiddle2textType(self.AssetTransactionID)
        self.AssetTransactionID_nsprefix_ = None
        self.AssetID = AssetID
        self.validate_SAFmiddle1textType(self.AssetID)
        self.AssetID_nsprefix_ = None
        self.AssetTransactionType = AssetTransactionType_member
        self.validate_SAFcodeType(self.AssetTransactionType)
        self.AssetTransactionType_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        if isinstance(AssetTransactionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(
                AssetTransactionDate, "%Y-%m-%d"
            ).date()
        else:
            initvalue_ = AssetTransactionDate
        self.AssetTransactionDate = initvalue_
        self.AssetTransactionDate_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        self.TransactionID = TransactionID
        self.validate_SAFmiddle2textType(self.TransactionID)
        self.TransactionID_nsprefix_ = None
        self.AssetTransactionValuations = AssetTransactionValuations
        self.AssetTransactionValuations_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssetTransactionType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetTransactionType.subclass:
            return AssetTransactionType.subclass(*args_, **kwargs_)
        else:
            return AssetTransactionType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AssetTransactionID(self):
        return self.AssetTransactionID

    def set_AssetTransactionID(self, AssetTransactionID):
        self.AssetTransactionID = AssetTransactionID

    def get_AssetID(self):
        return self.AssetID

    def set_AssetID(self, AssetID):
        self.AssetID = AssetID

    def get_AssetTransactionType(self):
        return self.AssetTransactionType

    def set_AssetTransactionType(self, AssetTransactionType):
        self.AssetTransactionType = AssetTransactionType

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_AssetTransactionDate(self):
        return self.AssetTransactionDate

    def set_AssetTransactionDate(self, AssetTransactionDate):
        self.AssetTransactionDate = AssetTransactionDate

    def get_Supplier(self):
        return self.Supplier

    def set_Supplier(self, Supplier):
        self.Supplier = Supplier

    def get_TransactionID(self):
        return self.TransactionID

    def set_TransactionID(self, TransactionID):
        self.TransactionID = TransactionID

    def get_AssetTransactionValuations(self):
        return self.AssetTransactionValuations

    def set_AssetTransactionValuations(self, AssetTransactionValuations):
        self.AssetTransactionValuations = AssetTransactionValuations

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AssetTransactionID is not None
            or self.AssetID is not None
            or self.AssetTransactionType is not None
            or self.Description is not None
            or self.AssetTransactionDate is not None
            or self.Supplier is not None
            or self.TransactionID is not None
            or self.AssetTransactionValuations is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AssetTransactionType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "AssetTransactionType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AssetTransactionType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AssetTransactionType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AssetTransactionType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AssetTransactionID is not None:
            namespaceprefix_ = (
                self.AssetTransactionID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactionID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetTransactionID>%s</%sAssetTransactionID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AssetTransactionID),
                            input_name="AssetTransactionID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetID is not None:
            namespaceprefix_ = (
                self.AssetID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetID>%s</%sAssetID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AssetID), input_name="AssetID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetTransactionType is not None:
            namespaceprefix_ = (
                self.AssetTransactionType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactionType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetTransactionType>%s</%sAssetTransactionType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AssetTransactionType),
                            input_name="AssetTransactionType",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetTransactionDate is not None:
            namespaceprefix_ = (
                self.AssetTransactionDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactionDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetTransactionDate>%s</%sAssetTransactionDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.AssetTransactionDate, input_name="AssetTransactionDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Supplier is not None:
            namespaceprefix_ = (
                self.Supplier_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Supplier_nsprefix_)
                else ""
            )
            self.Supplier.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Supplier",
                pretty_print=pretty_print,
            )
        if self.TransactionID is not None:
            namespaceprefix_ = (
                self.TransactionID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TransactionID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTransactionID>%s</%sTransactionID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.TransactionID), input_name="TransactionID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetTransactionValuations is not None:
            namespaceprefix_ = (
                self.AssetTransactionValuations_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactionValuations_nsprefix_)
                else ""
            )
            self.AssetTransactionValuations.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AssetTransactionValuations",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AssetTransactionID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AssetTransactionID")
            value_ = self.gds_validate_string(value_, node, "AssetTransactionID")
            self.AssetTransactionID = value_
            self.AssetTransactionID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AssetTransactionID)
        elif nodeName_ == "AssetID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AssetID")
            value_ = self.gds_validate_string(value_, node, "AssetID")
            self.AssetID = value_
            self.AssetID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.AssetID)
        elif nodeName_ == "AssetTransactionType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AssetTransactionType")
            value_ = self.gds_validate_string(value_, node, "AssetTransactionType")
            self.AssetTransactionType = value_
            self.AssetTransactionType_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.AssetTransactionType)
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "AssetTransactionDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AssetTransactionDate = dval_
            self.AssetTransactionDate_nsprefix_ = child_.prefix
        elif nodeName_ == "Supplier":
            obj_ = SupplierType5.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = "Supplier"
        elif nodeName_ == "TransactionID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "TransactionID")
            value_ = self.gds_validate_string(value_, node, "TransactionID")
            self.TransactionID = value_
            self.TransactionID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.TransactionID)
        elif nodeName_ == "AssetTransactionValuations":
            obj_ = AssetTransactionValuationsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssetTransactionValuations = obj_
            obj_.original_tagname_ = "AssetTransactionValuations"


# end class AssetTransactionType


class SupplierType5(GeneratedsSuper):
    """Information about the supplier of the asset"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        SupplierName=None,
        SupplierID=None,
        PostalAddress=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.SupplierName = SupplierName
        self.validate_SAFmiddle2textType(self.SupplierName)
        self.SupplierName_nsprefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.PostalAddress = PostalAddress
        self.PostalAddress_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SupplierType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplierType5.subclass:
            return SupplierType5.subclass(*args_, **kwargs_)
        else:
            return SupplierType5(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SupplierName(self):
        return self.SupplierName

    def set_SupplierName(self, SupplierName):
        self.SupplierName = SupplierName

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_PostalAddress(self):
        return self.PostalAddress

    def set_PostalAddress(self, PostalAddress):
        self.PostalAddress = PostalAddress

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.SupplierName is not None
            or self.SupplierID is not None
            or self.PostalAddress is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierType5",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SupplierType5")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SupplierType5":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SupplierType5"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SupplierType5",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SupplierType5",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierType5",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.SupplierName is not None:
            namespaceprefix_ = (
                self.SupplierName_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierName_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierName>%s</%sSupplierName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierName), input_name="SupplierName"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PostalAddress is not None:
            namespaceprefix_ = (
                self.PostalAddress_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PostalAddress_nsprefix_)
                else ""
            )
            self.PostalAddress.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="PostalAddress",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SupplierName":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierName")
            value_ = self.gds_validate_string(value_, node, "SupplierName")
            self.SupplierName = value_
            self.SupplierName_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.SupplierName)
        elif nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "PostalAddress":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PostalAddress = obj_
            obj_.original_tagname_ = "PostalAddress"


# end class SupplierType5


class AssetTransactionValuationsType(GeneratedsSuper):
    """These amounts of the transaction can differ per asset valuation type."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, AssetTransactionValuation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if AssetTransactionValuation is None:
            self.AssetTransactionValuation = []
        else:
            self.AssetTransactionValuation = AssetTransactionValuation
        self.AssetTransactionValuation_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssetTransactionValuationsType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetTransactionValuationsType.subclass:
            return AssetTransactionValuationsType.subclass(*args_, **kwargs_)
        else:
            return AssetTransactionValuationsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AssetTransactionValuation(self):
        return self.AssetTransactionValuation

    def set_AssetTransactionValuation(self, AssetTransactionValuation):
        self.AssetTransactionValuation = AssetTransactionValuation

    def add_AssetTransactionValuation(self, value):
        self.AssetTransactionValuation.append(value)

    def insert_AssetTransactionValuation_at(self, index, value):
        self.AssetTransactionValuation.insert(index, value)

    def replace_AssetTransactionValuation_at(self, index, value):
        self.AssetTransactionValuation[index] = value

    def hasContent_(self):
        if self.AssetTransactionValuation:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionValuationsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get(
            "AssetTransactionValuationsType"
        )
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if (
            self.original_tagname_ is not None
            and name_ == "AssetTransactionValuationsType"
        ):
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AssetTransactionValuationsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AssetTransactionValuationsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AssetTransactionValuationsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionValuationsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        for AssetTransactionValuation_ in self.AssetTransactionValuation:
            namespaceprefix_ = (
                self.AssetTransactionValuation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactionValuation_nsprefix_)
                else ""
            )
            AssetTransactionValuation_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="AssetTransactionValuation",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AssetTransactionValuation":
            obj_ = AssetTransactionValuationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssetTransactionValuation.append(obj_)
            obj_.original_tagname_ = "AssetTransactionValuation"


# end class AssetTransactionValuationsType


class AssetTransactionValuationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        AssetValuationType=None,
        AcquisitionAndProductionCostsOnTransaction=None,
        BookValueOnTransaction=None,
        AssetTransactionAmount=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.AssetValuationType = AssetValuationType
        self.validate_SAFshorttextType(self.AssetValuationType)
        self.AssetValuationType_nsprefix_ = None
        self.AcquisitionAndProductionCostsOnTransaction = (
            AcquisitionAndProductionCostsOnTransaction
        )
        self.validate_SAFmonetaryType(self.AcquisitionAndProductionCostsOnTransaction)
        self.AcquisitionAndProductionCostsOnTransaction_nsprefix_ = None
        self.BookValueOnTransaction = BookValueOnTransaction
        self.validate_SAFmonetaryType(self.BookValueOnTransaction)
        self.BookValueOnTransaction_nsprefix_ = None
        self.AssetTransactionAmount = AssetTransactionAmount
        self.validate_SAFmonetaryType(self.AssetTransactionAmount)
        self.AssetTransactionAmount_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssetTransactionValuationType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetTransactionValuationType.subclass:
            return AssetTransactionValuationType.subclass(*args_, **kwargs_)
        else:
            return AssetTransactionValuationType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_AssetValuationType(self):
        return self.AssetValuationType

    def set_AssetValuationType(self, AssetValuationType):
        self.AssetValuationType = AssetValuationType

    def get_AcquisitionAndProductionCostsOnTransaction(self):
        return self.AcquisitionAndProductionCostsOnTransaction

    def set_AcquisitionAndProductionCostsOnTransaction(
        self, AcquisitionAndProductionCostsOnTransaction
    ):
        self.AcquisitionAndProductionCostsOnTransaction = (
            AcquisitionAndProductionCostsOnTransaction
        )

    def get_BookValueOnTransaction(self):
        return self.BookValueOnTransaction

    def set_BookValueOnTransaction(self, BookValueOnTransaction):
        self.BookValueOnTransaction = BookValueOnTransaction

    def get_AssetTransactionAmount(self):
        return self.AssetTransactionAmount

    def set_AssetTransactionAmount(self, AssetTransactionAmount):
        self.AssetTransactionAmount = AssetTransactionAmount

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.AssetValuationType is not None
            or self.AcquisitionAndProductionCostsOnTransaction is not None
            or self.BookValueOnTransaction is not None
            or self.AssetTransactionAmount is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionValuationType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("AssetTransactionValuationType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if (
            self.original_tagname_ is not None
            and name_ == "AssetTransactionValuationType"
        ):
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="AssetTransactionValuationType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="AssetTransactionValuationType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="AssetTransactionValuationType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="AssetTransactionValuationType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.AssetValuationType is not None:
            namespaceprefix_ = (
                self.AssetValuationType_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetValuationType_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetValuationType>%s</%sAssetValuationType>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AssetValuationType),
                            input_name="AssetValuationType",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AcquisitionAndProductionCostsOnTransaction is not None:
            namespaceprefix_ = (
                self.AcquisitionAndProductionCostsOnTransaction_nsprefix_ + ":"
                if (
                    UseCapturedNS_
                    and self.AcquisitionAndProductionCostsOnTransaction_nsprefix_
                )
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAcquisitionAndProductionCostsOnTransaction>%s</%sAcquisitionAndProductionCostsOnTransaction>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AcquisitionAndProductionCostsOnTransaction,
                        input_name="AcquisitionAndProductionCostsOnTransaction",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BookValueOnTransaction is not None:
            namespaceprefix_ = (
                self.BookValueOnTransaction_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BookValueOnTransaction_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sBookValueOnTransaction>%s</%sBookValueOnTransaction>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.BookValueOnTransaction, input_name="BookValueOnTransaction"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AssetTransactionAmount is not None:
            namespaceprefix_ = (
                self.AssetTransactionAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AssetTransactionAmount_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAssetTransactionAmount>%s</%sAssetTransactionAmount>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.AssetTransactionAmount, input_name="AssetTransactionAmount"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "AssetValuationType":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AssetValuationType")
            value_ = self.gds_validate_string(value_, node, "AssetValuationType")
            self.AssetValuationType = value_
            self.AssetValuationType_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.AssetValuationType)
        elif nodeName_ == "AcquisitionAndProductionCostsOnTransaction" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(
                sval_, node, "AcquisitionAndProductionCostsOnTransaction"
            )
            fval_ = self.gds_validate_decimal(
                fval_, node, "AcquisitionAndProductionCostsOnTransaction"
            )
            self.AcquisitionAndProductionCostsOnTransaction = fval_
            self.AcquisitionAndProductionCostsOnTransaction_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(
                self.AcquisitionAndProductionCostsOnTransaction
            )
        elif nodeName_ == "BookValueOnTransaction" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "BookValueOnTransaction")
            fval_ = self.gds_validate_decimal(fval_, node, "BookValueOnTransaction")
            self.BookValueOnTransaction = fval_
            self.BookValueOnTransaction_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.BookValueOnTransaction)
        elif nodeName_ == "AssetTransactionAmount" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "AssetTransactionAmount")
            fval_ = self.gds_validate_decimal(fval_, node, "AssetTransactionAmount")
            self.AssetTransactionAmount = fval_
            self.AssetTransactionAmount_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.AssetTransactionAmount)


# end class AssetTransactionValuationType


class CustomerInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        CustomerID=None,
        Name=None,
        BillingAddress=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.CustomerID = CustomerID
        self.validate_SAFmiddle1textType(self.CustomerID)
        self.CustomerID_nsprefix_ = None
        self.Name = Name
        self.validate_SAFmiddle2textType(self.Name)
        self.Name_nsprefix_ = None
        self.BillingAddress = BillingAddress
        self.BillingAddress_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, CustomerInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerInfoType.subclass:
            return CustomerInfoType.subclass(*args_, **kwargs_)
        else:
            return CustomerInfoType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_CustomerID(self):
        return self.CustomerID

    def set_CustomerID(self, CustomerID):
        self.CustomerID = CustomerID

    def get_Name(self):
        return self.Name

    def set_Name(self, Name):
        self.Name = Name

    def get_BillingAddress(self):
        return self.BillingAddress

    def set_BillingAddress(self, BillingAddress):
        self.BillingAddress = BillingAddress

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.CustomerID is not None
            or self.Name is not None
            or self.BillingAddress is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CustomerInfoType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("CustomerInfoType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "CustomerInfoType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="CustomerInfoType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="CustomerInfoType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="CustomerInfoType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CustomerInfoType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.CustomerID is not None:
            namespaceprefix_ = (
                self.CustomerID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CustomerID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCustomerID>%s</%sCustomerID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.CustomerID), input_name="CustomerID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Name is not None:
            namespaceprefix_ = (
                self.Name_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Name_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sName>%s</%sName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Name), input_name="Name")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BillingAddress is not None:
            namespaceprefix_ = (
                self.BillingAddress_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BillingAddress_nsprefix_)
                else ""
            )
            self.BillingAddress.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="BillingAddress",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "CustomerID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "CustomerID")
            value_ = self.gds_validate_string(value_, node, "CustomerID")
            self.CustomerID = value_
            self.CustomerID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.CustomerID)
        elif nodeName_ == "Name":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Name")
            value_ = self.gds_validate_string(value_, node, "Name")
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.Name)
        elif nodeName_ == "BillingAddress":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillingAddress = obj_
            obj_.original_tagname_ = "BillingAddress"


# end class CustomerInfoType


class SupplierInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        SupplierID=None,
        Name=None,
        BillingAddress=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.SupplierID = SupplierID
        self.validate_SAFmiddle1textType(self.SupplierID)
        self.SupplierID_nsprefix_ = None
        self.Name = Name
        self.validate_SAFmiddle2textType(self.Name)
        self.Name_nsprefix_ = None
        self.BillingAddress = BillingAddress
        self.BillingAddress_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SupplierInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplierInfoType.subclass:
            return SupplierInfoType.subclass(*args_, **kwargs_)
        else:
            return SupplierInfoType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SupplierID(self):
        return self.SupplierID

    def set_SupplierID(self, SupplierID):
        self.SupplierID = SupplierID

    def get_Name(self):
        return self.Name

    def set_Name(self, Name):
        self.Name = Name

    def get_BillingAddress(self):
        return self.BillingAddress

    def set_BillingAddress(self, BillingAddress):
        self.BillingAddress = BillingAddress

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.SupplierID is not None
            or self.Name is not None
            or self.BillingAddress is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierInfoType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SupplierInfoType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SupplierInfoType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="SupplierInfoType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SupplierInfoType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SupplierInfoType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SupplierInfoType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.SupplierID is not None:
            namespaceprefix_ = (
                self.SupplierID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SupplierID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSupplierID>%s</%sSupplierID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SupplierID), input_name="SupplierID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Name is not None:
            namespaceprefix_ = (
                self.Name_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Name_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sName>%s</%sName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Name), input_name="Name")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.BillingAddress is not None:
            namespaceprefix_ = (
                self.BillingAddress_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BillingAddress_nsprefix_)
                else ""
            )
            self.BillingAddress.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="BillingAddress",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SupplierID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SupplierID")
            value_ = self.gds_validate_string(value_, node, "SupplierID")
            self.SupplierID = value_
            self.SupplierID_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SupplierID)
        elif nodeName_ == "Name":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Name")
            value_ = self.gds_validate_string(value_, node, "Name")
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.Name)
        elif nodeName_ == "BillingAddress":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillingAddress = obj_
            obj_.original_tagname_ = "BillingAddress"


# end class SupplierInfoType


class LineType7(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        LineNumber=None,
        AccountID=None,
        Analysis=None,
        OrderReferences=None,
        ShipTo=None,
        ShipFrom=None,
        GoodsServicesID=None,
        ProductCode=None,
        ProductDescription=None,
        Delivery=None,
        Quantity=None,
        InvoiceUOM=None,
        UOMToUOMBaseConversionFactor=None,
        UnitPrice=None,
        TaxPointDate=None,
        References=None,
        Description=None,
        InvoiceLineAmount=None,
        DebitCreditIndicator=None,
        ShippingCostsAmount=None,
        TaxInformation=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.validate_SAFshorttextType(self.LineNumber)
        self.LineNumber_nsprefix_ = None
        self.AccountID = AccountID
        self.validate_SAFmiddle2textType(self.AccountID)
        self.AccountID_nsprefix_ = None
        if Analysis is None:
            self.Analysis = []
        else:
            self.Analysis = Analysis
        self.Analysis_nsprefix_ = None
        if OrderReferences is None:
            self.OrderReferences = []
        else:
            self.OrderReferences = OrderReferences
        self.OrderReferences_nsprefix_ = None
        self.ShipTo = ShipTo
        self.ShipTo_nsprefix_ = None
        self.ShipFrom = ShipFrom
        self.ShipFrom_nsprefix_ = None
        self.GoodsServicesID = GoodsServicesID
        self.validate_SAFcodeType(self.GoodsServicesID)
        self.GoodsServicesID_nsprefix_ = None
        self.ProductCode = ProductCode
        self.validate_SAFmiddle2textType(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.ProductDescription = ProductDescription
        self.validate_SAFlongtextType(self.ProductDescription)
        self.ProductDescription_nsprefix_ = None
        self.Delivery = Delivery
        self.Delivery_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_SAFquantityType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InvoiceUOM = InvoiceUOM
        self.validate_SAFcodeType(self.InvoiceUOM)
        self.InvoiceUOM_nsprefix_ = None
        self.UOMToUOMBaseConversionFactor = UOMToUOMBaseConversionFactor
        self.UOMToUOMBaseConversionFactor_nsprefix_ = None
        self.UnitPrice = UnitPrice
        self.validate_SAFmonetaryType(self.UnitPrice)
        self.UnitPrice_nsprefix_ = None
        if isinstance(TaxPointDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TaxPointDate, "%Y-%m-%d").date()
        else:
            initvalue_ = TaxPointDate
        self.TaxPointDate = initvalue_
        self.TaxPointDate_nsprefix_ = None
        self.References = References
        self.References_nsprefix_ = None
        self.Description = Description
        self.validate_SAFlongtextType(self.Description)
        self.Description_nsprefix_ = None
        self.InvoiceLineAmount = InvoiceLineAmount
        self.InvoiceLineAmount_nsprefix_ = None
        self.DebitCreditIndicator = DebitCreditIndicator
        self.validate_DebitCreditIndicatorType8(self.DebitCreditIndicator)
        self.DebitCreditIndicator_nsprefix_ = None
        self.ShippingCostsAmount = ShippingCostsAmount
        self.ShippingCostsAmount_nsprefix_ = None
        if TaxInformation is None:
            self.TaxInformation = []
        else:
            self.TaxInformation = TaxInformation
        self.TaxInformation_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, LineType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineType7.subclass:
            return LineType7.subclass(*args_, **kwargs_)
        else:
            return LineType7(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_LineNumber(self):
        return self.LineNumber

    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber

    def get_AccountID(self):
        return self.AccountID

    def set_AccountID(self, AccountID):
        self.AccountID = AccountID

    def get_Analysis(self):
        return self.Analysis

    def set_Analysis(self, Analysis):
        self.Analysis = Analysis

    def add_Analysis(self, value):
        self.Analysis.append(value)

    def insert_Analysis_at(self, index, value):
        self.Analysis.insert(index, value)

    def replace_Analysis_at(self, index, value):
        self.Analysis[index] = value

    def get_OrderReferences(self):
        return self.OrderReferences

    def set_OrderReferences(self, OrderReferences):
        self.OrderReferences = OrderReferences

    def add_OrderReferences(self, value):
        self.OrderReferences.append(value)

    def insert_OrderReferences_at(self, index, value):
        self.OrderReferences.insert(index, value)

    def replace_OrderReferences_at(self, index, value):
        self.OrderReferences[index] = value

    def get_ShipTo(self):
        return self.ShipTo

    def set_ShipTo(self, ShipTo):
        self.ShipTo = ShipTo

    def get_ShipFrom(self):
        return self.ShipFrom

    def set_ShipFrom(self, ShipFrom):
        self.ShipFrom = ShipFrom

    def get_GoodsServicesID(self):
        return self.GoodsServicesID

    def set_GoodsServicesID(self, GoodsServicesID):
        self.GoodsServicesID = GoodsServicesID

    def get_ProductCode(self):
        return self.ProductCode

    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode

    def get_ProductDescription(self):
        return self.ProductDescription

    def set_ProductDescription(self, ProductDescription):
        self.ProductDescription = ProductDescription

    def get_Delivery(self):
        return self.Delivery

    def set_Delivery(self, Delivery):
        self.Delivery = Delivery

    def get_Quantity(self):
        return self.Quantity

    def set_Quantity(self, Quantity):
        self.Quantity = Quantity

    def get_InvoiceUOM(self):
        return self.InvoiceUOM

    def set_InvoiceUOM(self, InvoiceUOM):
        self.InvoiceUOM = InvoiceUOM

    def get_UOMToUOMBaseConversionFactor(self):
        return self.UOMToUOMBaseConversionFactor

    def set_UOMToUOMBaseConversionFactor(self, UOMToUOMBaseConversionFactor):
        self.UOMToUOMBaseConversionFactor = UOMToUOMBaseConversionFactor

    def get_UnitPrice(self):
        return self.UnitPrice

    def set_UnitPrice(self, UnitPrice):
        self.UnitPrice = UnitPrice

    def get_TaxPointDate(self):
        return self.TaxPointDate

    def set_TaxPointDate(self, TaxPointDate):
        self.TaxPointDate = TaxPointDate

    def get_References(self):
        return self.References

    def set_References(self, References):
        self.References = References

    def get_Description(self):
        return self.Description

    def set_Description(self, Description):
        self.Description = Description

    def get_InvoiceLineAmount(self):
        return self.InvoiceLineAmount

    def set_InvoiceLineAmount(self, InvoiceLineAmount):
        self.InvoiceLineAmount = InvoiceLineAmount

    def get_DebitCreditIndicator(self):
        return self.DebitCreditIndicator

    def set_DebitCreditIndicator(self, DebitCreditIndicator):
        self.DebitCreditIndicator = DebitCreditIndicator

    def get_ShippingCostsAmount(self):
        return self.ShippingCostsAmount

    def set_ShippingCostsAmount(self, ShippingCostsAmount):
        self.ShippingCostsAmount = ShippingCostsAmount

    def get_TaxInformation(self):
        return self.TaxInformation

    def set_TaxInformation(self, TaxInformation):
        self.TaxInformation = TaxInformation

    def add_TaxInformation(self, value):
        self.TaxInformation.append(value)

    def insert_TaxInformation_at(self, index, value):
        self.TaxInformation.insert(index, value)

    def replace_TaxInformation_at(self, index, value):
        self.TaxInformation[index] = value

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFquantityType(self, value):
        result = True
        # Validate type SAFquantityType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 22:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFquantityType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def validate_DebitCreditIndicatorType8(self, value):
        result = True
        # Validate type DebitCreditIndicatorType8, a restriction on SAFcodeType.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            value = value
            enumerations = ["D", "C"]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DebitCreditIndicatorType8'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DebitCreditIndicatorType8'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.LineNumber is not None
            or self.AccountID is not None
            or self.Analysis
            or self.OrderReferences
            or self.ShipTo is not None
            or self.ShipFrom is not None
            or self.GoodsServicesID is not None
            or self.ProductCode is not None
            or self.ProductDescription is not None
            or self.Delivery is not None
            or self.Quantity is not None
            or self.InvoiceUOM is not None
            or self.UOMToUOMBaseConversionFactor is not None
            or self.UnitPrice is not None
            or self.TaxPointDate is not None
            or self.References is not None
            or self.Description is not None
            or self.InvoiceLineAmount is not None
            or self.DebitCreditIndicator is not None
            or self.ShippingCostsAmount is not None
            or self.TaxInformation
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType7",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("LineType7")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "LineType7":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="LineType7"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="LineType7",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self, outfile, level, already_processed, namespaceprefix_="", name_="LineType7"
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="LineType7",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.LineNumber is not None:
            namespaceprefix_ = (
                self.LineNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.LineNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sLineNumber>%s</%sLineNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.LineNumber), input_name="LineNumber"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.AccountID is not None:
            namespaceprefix_ = (
                self.AccountID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.AccountID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sAccountID>%s</%sAccountID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.AccountID), input_name="AccountID"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Analysis_ in self.Analysis:
            namespaceprefix_ = (
                self.Analysis_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Analysis_nsprefix_)
                else ""
            )
            Analysis_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Analysis",
                pretty_print=pretty_print,
            )
        for OrderReferences_ in self.OrderReferences:
            namespaceprefix_ = (
                self.OrderReferences_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OrderReferences_nsprefix_)
                else ""
            )
            OrderReferences_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="OrderReferences",
                pretty_print=pretty_print,
            )
        if self.ShipTo is not None:
            namespaceprefix_ = (
                self.ShipTo_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShipTo_nsprefix_)
                else ""
            )
            self.ShipTo.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShipTo",
                pretty_print=pretty_print,
            )
        if self.ShipFrom is not None:
            namespaceprefix_ = (
                self.ShipFrom_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShipFrom_nsprefix_)
                else ""
            )
            self.ShipFrom.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShipFrom",
                pretty_print=pretty_print,
            )
        if self.GoodsServicesID is not None:
            namespaceprefix_ = (
                self.GoodsServicesID_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GoodsServicesID_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGoodsServicesID>%s</%sGoodsServicesID>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.GoodsServicesID),
                            input_name="GoodsServicesID",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductCode is not None:
            namespaceprefix_ = (
                self.ProductCode_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductCode_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductCode>%s</%sProductCode>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductCode), input_name="ProductCode"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ProductDescription is not None:
            namespaceprefix_ = (
                self.ProductDescription_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ProductDescription_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sProductDescription>%s</%sProductDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.ProductDescription),
                            input_name="ProductDescription",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Delivery is not None:
            namespaceprefix_ = (
                self.Delivery_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Delivery_nsprefix_)
                else ""
            )
            self.Delivery.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Delivery",
                pretty_print=pretty_print,
            )
        if self.Quantity is not None:
            namespaceprefix_ = (
                self.Quantity_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Quantity_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sQuantity>%s</%sQuantity>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.Quantity, input_name="Quantity"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.InvoiceUOM is not None:
            namespaceprefix_ = (
                self.InvoiceUOM_nsprefix_ + ":"
                if (UseCapturedNS_ and self.InvoiceUOM_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sInvoiceUOM>%s</%sInvoiceUOM>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.InvoiceUOM), input_name="InvoiceUOM"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UOMToUOMBaseConversionFactor is not None:
            namespaceprefix_ = (
                self.UOMToUOMBaseConversionFactor_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UOMToUOMBaseConversionFactor_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUOMToUOMBaseConversionFactor>%s</%sUOMToUOMBaseConversionFactor>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.UOMToUOMBaseConversionFactor,
                        input_name="UOMToUOMBaseConversionFactor",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.UnitPrice is not None:
            namespaceprefix_ = (
                self.UnitPrice_nsprefix_ + ":"
                if (UseCapturedNS_ and self.UnitPrice_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sUnitPrice>%s</%sUnitPrice>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.UnitPrice, input_name="UnitPrice"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.TaxPointDate is not None:
            namespaceprefix_ = (
                self.TaxPointDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxPointDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTaxPointDate>%s</%sTaxPointDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.TaxPointDate, input_name="TaxPointDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.References is not None:
            namespaceprefix_ = (
                self.References_nsprefix_ + ":"
                if (UseCapturedNS_ and self.References_nsprefix_)
                else ""
            )
            self.References.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="References",
                pretty_print=pretty_print,
            )
        if self.Description is not None:
            namespaceprefix_ = (
                self.Description_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Description_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDescription>%s</%sDescription>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Description), input_name="Description"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.InvoiceLineAmount is not None:
            namespaceprefix_ = (
                self.InvoiceLineAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.InvoiceLineAmount_nsprefix_)
                else ""
            )
            self.InvoiceLineAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="InvoiceLineAmount",
                pretty_print=pretty_print,
            )
        if self.DebitCreditIndicator is not None:
            namespaceprefix_ = (
                self.DebitCreditIndicator_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DebitCreditIndicator_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDebitCreditIndicator>%s</%sDebitCreditIndicator>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.DebitCreditIndicator),
                            input_name="DebitCreditIndicator",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ShippingCostsAmount is not None:
            namespaceprefix_ = (
                self.ShippingCostsAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShippingCostsAmount_nsprefix_)
                else ""
            )
            self.ShippingCostsAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ShippingCostsAmount",
                pretty_print=pretty_print,
            )
        for TaxInformation_ in self.TaxInformation:
            namespaceprefix_ = (
                self.TaxInformation_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxInformation_nsprefix_)
                else ""
            )
            TaxInformation_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxInformation",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "LineNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "LineNumber")
            value_ = self.gds_validate_string(value_, node, "LineNumber")
            self.LineNumber = value_
            self.LineNumber_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.LineNumber)
        elif nodeName_ == "AccountID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "AccountID")
            value_ = self.gds_validate_string(value_, node, "AccountID")
            self.AccountID = value_
            self.AccountID_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.AccountID)
        elif nodeName_ == "Analysis":
            obj_ = AnalysisStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Analysis.append(obj_)
            obj_.original_tagname_ = "Analysis"
        elif nodeName_ == "OrderReferences":
            obj_ = OrderReferencesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OrderReferences.append(obj_)
            obj_.original_tagname_ = "OrderReferences"
        elif nodeName_ == "ShipTo":
            obj_ = ShippingPointStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipTo = obj_
            obj_.original_tagname_ = "ShipTo"
        elif nodeName_ == "ShipFrom":
            obj_ = ShippingPointStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = "ShipFrom"
        elif nodeName_ == "GoodsServicesID":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "GoodsServicesID")
            value_ = self.gds_validate_string(value_, node, "GoodsServicesID")
            self.GoodsServicesID = value_
            self.GoodsServicesID_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.GoodsServicesID)
        elif nodeName_ == "ProductCode":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductCode")
            value_ = self.gds_validate_string(value_, node, "ProductCode")
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.ProductCode)
        elif nodeName_ == "ProductDescription":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "ProductDescription")
            value_ = self.gds_validate_string(value_, node, "ProductDescription")
            self.ProductDescription = value_
            self.ProductDescription_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.ProductDescription)
        elif nodeName_ == "Delivery":
            obj_ = DeliveryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Delivery = obj_
            obj_.original_tagname_ = "Delivery"
        elif nodeName_ == "Quantity" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "Quantity")
            fval_ = self.gds_validate_decimal(fval_, node, "Quantity")
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type SAFquantityType
            self.validate_SAFquantityType(self.Quantity)
        elif nodeName_ == "InvoiceUOM":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "InvoiceUOM")
            value_ = self.gds_validate_string(value_, node, "InvoiceUOM")
            self.InvoiceUOM = value_
            self.InvoiceUOM_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.InvoiceUOM)
        elif nodeName_ == "UOMToUOMBaseConversionFactor" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "UOMToUOMBaseConversionFactor")
            fval_ = self.gds_validate_decimal(
                fval_, node, "UOMToUOMBaseConversionFactor"
            )
            self.UOMToUOMBaseConversionFactor = fval_
            self.UOMToUOMBaseConversionFactor_nsprefix_ = child_.prefix
        elif nodeName_ == "UnitPrice" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "UnitPrice")
            fval_ = self.gds_validate_decimal(fval_, node, "UnitPrice")
            self.UnitPrice = fval_
            self.UnitPrice_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.UnitPrice)
        elif nodeName_ == "TaxPointDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TaxPointDate = dval_
            self.TaxPointDate_nsprefix_ = child_.prefix
        elif nodeName_ == "References":
            obj_ = ReferencesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.References = obj_
            obj_.original_tagname_ = "References"
        elif nodeName_ == "Description":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Description")
            value_ = self.gds_validate_string(value_, node, "Description")
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Description)
        elif nodeName_ == "InvoiceLineAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InvoiceLineAmount = obj_
            obj_.original_tagname_ = "InvoiceLineAmount"
        elif nodeName_ == "DebitCreditIndicator":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "DebitCreditIndicator")
            value_ = self.gds_validate_string(value_, node, "DebitCreditIndicator")
            self.DebitCreditIndicator = value_
            self.DebitCreditIndicator_nsprefix_ = child_.prefix
            # validate type DebitCreditIndicatorType8
            self.validate_DebitCreditIndicatorType8(self.DebitCreditIndicator)
        elif nodeName_ == "ShippingCostsAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingCostsAmount = obj_
            obj_.original_tagname_ = "ShippingCostsAmount"
        elif nodeName_ == "TaxInformation":
            obj_ = TaxInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxInformation.append(obj_)
            obj_.original_tagname_ = "TaxInformation"


# end class LineType7


class OrderReferencesType(GeneratedsSuper):
    """Relevant order references"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self, OriginatingON=None, OrderDate=None, gds_collector_=None, **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.OriginatingON = OriginatingON
        self.validate_SAFmiddle2textType(self.OriginatingON)
        self.OriginatingON_nsprefix_ = None
        if isinstance(OrderDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OrderDate, "%Y-%m-%d").date()
        else:
            initvalue_ = OrderDate
        self.OrderDate = initvalue_
        self.OrderDate_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderReferencesType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderReferencesType.subclass:
            return OrderReferencesType.subclass(*args_, **kwargs_)
        else:
            return OrderReferencesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_OriginatingON(self):
        return self.OriginatingON

    def set_OriginatingON(self, OriginatingON):
        self.OriginatingON = OriginatingON

    def get_OrderDate(self):
        return self.OrderDate

    def set_OrderDate(self, OrderDate):
        self.OrderDate = OrderDate

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.OriginatingON is not None or self.OrderDate is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="OrderReferencesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("OrderReferencesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "OrderReferencesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="OrderReferencesType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="OrderReferencesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="OrderReferencesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="OrderReferencesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.OriginatingON is not None:
            namespaceprefix_ = (
                self.OriginatingON_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OriginatingON_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOriginatingON>%s</%sOriginatingON>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.OriginatingON), input_name="OriginatingON"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.OrderDate is not None:
            namespaceprefix_ = (
                self.OrderDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.OrderDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sOrderDate>%s</%sOrderDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.OrderDate, input_name="OrderDate"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "OriginatingON":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "OriginatingON")
            value_ = self.gds_validate_string(value_, node, "OriginatingON")
            self.OriginatingON = value_
            self.OriginatingON_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.OriginatingON)
        elif nodeName_ == "OrderDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OrderDate = dval_
            self.OrderDate_nsprefix_ = child_.prefix


# end class OrderReferencesType


class DeliveryType(GeneratedsSuper):
    """Information about the date or timeframe of the delivery of the goods or
    services."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        MovementReference=None,
        DeliveryDate=None,
        DeliveryPeriod=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if MovementReference is None:
            self.MovementReference = []
        else:
            self.MovementReference = MovementReference
        self.MovementReference_nsprefix_ = None
        if isinstance(DeliveryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryDate, "%Y-%m-%d").date()
        else:
            initvalue_ = DeliveryDate
        self.DeliveryDate = initvalue_
        self.DeliveryDate_nsprefix_ = None
        self.DeliveryPeriod = DeliveryPeriod
        self.DeliveryPeriod_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, DeliveryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryType.subclass:
            return DeliveryType.subclass(*args_, **kwargs_)
        else:
            return DeliveryType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_MovementReference(self):
        return self.MovementReference

    def set_MovementReference(self, MovementReference):
        self.MovementReference = MovementReference

    def add_MovementReference(self, value):
        self.MovementReference.append(value)

    def insert_MovementReference_at(self, index, value):
        self.MovementReference.insert(index, value)

    def replace_MovementReference_at(self, index, value):
        self.MovementReference[index] = value

    def get_DeliveryDate(self):
        return self.DeliveryDate

    def set_DeliveryDate(self, DeliveryDate):
        self.DeliveryDate = DeliveryDate

    def get_DeliveryPeriod(self):
        return self.DeliveryPeriod

    def set_DeliveryPeriod(self, DeliveryPeriod):
        self.DeliveryPeriod = DeliveryPeriod

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.MovementReference
            or self.DeliveryDate is not None
            or self.DeliveryPeriod is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DeliveryType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("DeliveryType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "DeliveryType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="DeliveryType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="DeliveryType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="DeliveryType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DeliveryType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        for MovementReference_ in self.MovementReference:
            namespaceprefix_ = (
                self.MovementReference_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MovementReference_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMovementReference>%s</%sMovementReference>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(MovementReference_),
                            input_name="MovementReference",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DeliveryDate is not None:
            namespaceprefix_ = (
                self.DeliveryDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DeliveryDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDeliveryDate>%s</%sDeliveryDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.DeliveryDate, input_name="DeliveryDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.DeliveryPeriod is not None:
            namespaceprefix_ = (
                self.DeliveryPeriod_nsprefix_ + ":"
                if (UseCapturedNS_ and self.DeliveryPeriod_nsprefix_)
                else ""
            )
            self.DeliveryPeriod.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="DeliveryPeriod",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "MovementReference":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MovementReference")
            value_ = self.gds_validate_string(value_, node, "MovementReference")
            self.MovementReference.append(value_)
            self.MovementReference_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.MovementReference[-1])
        elif nodeName_ == "DeliveryDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DeliveryDate = dval_
            self.DeliveryDate_nsprefix_ = child_.prefix
        elif nodeName_ == "DeliveryPeriod":
            obj_ = DeliveryPeriodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryPeriod = obj_
            obj_.original_tagname_ = "DeliveryPeriod"


# end class DeliveryType


class DeliveryPeriodType(GeneratedsSuper):
    """Timeframe of the deliveries"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, FromDate=None, ToDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if isinstance(FromDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(FromDate, "%Y-%m-%d").date()
        else:
            initvalue_ = FromDate
        self.FromDate = initvalue_
        self.FromDate_nsprefix_ = None
        if isinstance(ToDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ToDate, "%Y-%m-%d").date()
        else:
            initvalue_ = ToDate
        self.ToDate = initvalue_
        self.ToDate_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryPeriodType
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryPeriodType.subclass:
            return DeliveryPeriodType.subclass(*args_, **kwargs_)
        else:
            return DeliveryPeriodType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_FromDate(self):
        return self.FromDate

    def set_FromDate(self, FromDate):
        self.FromDate = FromDate

    def get_ToDate(self):
        return self.ToDate

    def set_ToDate(self, ToDate):
        self.ToDate = ToDate

    def hasContent_(self):
        if self.FromDate is not None or self.ToDate is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DeliveryPeriodType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("DeliveryPeriodType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "DeliveryPeriodType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="DeliveryPeriodType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="DeliveryPeriodType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="DeliveryPeriodType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DeliveryPeriodType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.FromDate is not None:
            namespaceprefix_ = (
                self.FromDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.FromDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sFromDate>%s</%sFromDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.FromDate, input_name="FromDate"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.ToDate is not None:
            namespaceprefix_ = (
                self.ToDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ToDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sToDate>%s</%sToDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(self.ToDate, input_name="ToDate"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "FromDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.FromDate = dval_
            self.FromDate_nsprefix_ = child_.prefix
        elif nodeName_ == "ToDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ToDate = dval_
            self.ToDate_nsprefix_ = child_.prefix


# end class DeliveryPeriodType


class ReferencesType(GeneratedsSuper):
    """Credit Note references"""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, CreditNote=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.CreditNote = CreditNote
        self.CreditNote_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, ReferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType.subclass:
            return ReferencesType.subclass(*args_, **kwargs_)
        else:
            return ReferencesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_CreditNote(self):
        return self.CreditNote

    def set_CreditNote(self, CreditNote):
        self.CreditNote = CreditNote

    def hasContent_(self):
        if self.CreditNote is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ReferencesType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ReferencesType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ReferencesType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="ReferencesType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ReferencesType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ReferencesType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="ReferencesType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            pass
        if self.CreditNote is not None:
            namespaceprefix_ = (
                self.CreditNote_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CreditNote_nsprefix_)
                else ""
            )
            self.CreditNote.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="CreditNote",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "CreditNote":
            obj_ = CreditNoteType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditNote = obj_
            obj_.original_tagname_ = "CreditNote"


# end class ReferencesType


class CreditNoteType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(self, Reference=None, Reason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.Reference = Reference
        self.validate_SAFmiddle1textType(self.Reference)
        self.Reference_nsprefix_ = None
        self.Reason = Reason
        self.validate_SAFlongtextType(self.Reason)
        self.Reason_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, CreditNoteType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditNoteType.subclass:
            return CreditNoteType.subclass(*args_, **kwargs_)
        else:
            return CreditNoteType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Reference(self):
        return self.Reference

    def set_Reference(self, Reference):
        self.Reference = Reference

    def get_Reason(self):
        return self.Reason

    def set_Reason(self, Reason):
        self.Reason = Reason

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFlongtextType(self, value):
        result = True
        # Validate type SAFlongtextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 256:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFlongtextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if self.Reference is not None or self.Reason is not None:
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CreditNoteType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("CreditNoteType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "CreditNoteType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="CreditNoteType"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="CreditNoteType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="CreditNoteType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="CreditNoteType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.Reference is not None:
            namespaceprefix_ = (
                self.Reference_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Reference_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sReference>%s</%sReference>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Reference), input_name="Reference"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Reason is not None:
            namespaceprefix_ = (
                self.Reason_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Reason_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sReason>%s</%sReason>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Reason), input_name="Reason"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Reference":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Reference")
            value_ = self.gds_validate_string(value_, node, "Reference")
            self.Reference = value_
            self.Reference_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.Reference)
        elif nodeName_ == "Reason":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Reason")
            value_ = self.gds_validate_string(value_, node, "Reason")
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
            # validate type SAFlongtextType
            self.validate_SAFlongtextType(self.Reason)


# end class CreditNoteType


class SettlementType9(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        SettlementDiscount=None,
        SettlementAmount=None,
        SettlementDate=None,
        PaymentMechanism=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.SettlementDiscount = SettlementDiscount
        self.validate_SAFmiddle1textType(self.SettlementDiscount)
        self.SettlementDiscount_nsprefix_ = None
        self.SettlementAmount = SettlementAmount
        self.SettlementAmount_nsprefix_ = None
        if isinstance(SettlementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SettlementDate, "%Y-%m-%d").date()
        else:
            initvalue_ = SettlementDate
        self.SettlementDate = initvalue_
        self.SettlementDate_nsprefix_ = None
        self.PaymentMechanism = PaymentMechanism
        self.validate_SAFcodeType(self.PaymentMechanism)
        self.PaymentMechanism_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, SettlementType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SettlementType9.subclass:
            return SettlementType9.subclass(*args_, **kwargs_)
        else:
            return SettlementType9(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_SettlementDiscount(self):
        return self.SettlementDiscount

    def set_SettlementDiscount(self, SettlementDiscount):
        self.SettlementDiscount = SettlementDiscount

    def get_SettlementAmount(self):
        return self.SettlementAmount

    def set_SettlementAmount(self, SettlementAmount):
        self.SettlementAmount = SettlementAmount

    def get_SettlementDate(self):
        return self.SettlementDate

    def set_SettlementDate(self, SettlementDate):
        self.SettlementDate = SettlementDate

    def get_PaymentMechanism(self):
        return self.PaymentMechanism

    def set_PaymentMechanism(self, PaymentMechanism):
        self.PaymentMechanism = PaymentMechanism

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFcodeType(self, value):
        result = True
        # Validate type SAFcodeType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFcodeType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.SettlementDiscount is not None
            or self.SettlementAmount is not None
            or self.SettlementDate is not None
            or self.PaymentMechanism is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SettlementType9",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("SettlementType9")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "SettlementType9":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile, level, already_processed, namespaceprefix_, name_="SettlementType9"
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="SettlementType9",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="SettlementType9",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="SettlementType9",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.SettlementDiscount is not None:
            namespaceprefix_ = (
                self.SettlementDiscount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SettlementDiscount_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSettlementDiscount>%s</%sSettlementDiscount>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.SettlementDiscount),
                            input_name="SettlementDiscount",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.SettlementAmount is not None:
            namespaceprefix_ = (
                self.SettlementAmount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SettlementAmount_nsprefix_)
                else ""
            )
            self.SettlementAmount.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="SettlementAmount",
                pretty_print=pretty_print,
            )
        if self.SettlementDate is not None:
            namespaceprefix_ = (
                self.SettlementDate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.SettlementDate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sSettlementDate>%s</%sSettlementDate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_date(
                        self.SettlementDate, input_name="SettlementDate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.PaymentMechanism is not None:
            namespaceprefix_ = (
                self.PaymentMechanism_nsprefix_ + ":"
                if (UseCapturedNS_ and self.PaymentMechanism_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sPaymentMechanism>%s</%sPaymentMechanism>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.PaymentMechanism),
                            input_name="PaymentMechanism",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "SettlementDiscount":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "SettlementDiscount")
            value_ = self.gds_validate_string(value_, node, "SettlementDiscount")
            self.SettlementDiscount = value_
            self.SettlementDiscount_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.SettlementDiscount)
        elif nodeName_ == "SettlementAmount":
            obj_ = AmountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SettlementAmount = obj_
            obj_.original_tagname_ = "SettlementAmount"
        elif nodeName_ == "SettlementDate":
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SettlementDate = dval_
            self.SettlementDate_nsprefix_ = child_.prefix
        elif nodeName_ == "PaymentMechanism":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "PaymentMechanism")
            value_ = self.gds_validate_string(value_, node, "PaymentMechanism")
            self.PaymentMechanism = value_
            self.PaymentMechanism_nsprefix_ = child_.prefix
            # validate type SAFcodeType
            self.validate_SAFcodeType(self.PaymentMechanism)


# end class SettlementType9


class DocumentTotalsType10(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        TaxInformationTotals=None,
        ShippingCostsAmountTotal=None,
        NetTotal=None,
        GrossTotal=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        if TaxInformationTotals is None:
            self.TaxInformationTotals = []
        else:
            self.TaxInformationTotals = TaxInformationTotals
        self.TaxInformationTotals_nsprefix_ = None
        self.ShippingCostsAmountTotal = ShippingCostsAmountTotal
        self.validate_SAFmonetaryType(self.ShippingCostsAmountTotal)
        self.ShippingCostsAmountTotal_nsprefix_ = None
        self.NetTotal = NetTotal
        self.validate_SAFmonetaryType(self.NetTotal)
        self.NetTotal_nsprefix_ = None
        self.GrossTotal = GrossTotal
        self.validate_SAFmonetaryType(self.GrossTotal)
        self.GrossTotal_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentTotalsType10
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentTotalsType10.subclass:
            return DocumentTotalsType10.subclass(*args_, **kwargs_)
        else:
            return DocumentTotalsType10(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_TaxInformationTotals(self):
        return self.TaxInformationTotals

    def set_TaxInformationTotals(self, TaxInformationTotals):
        self.TaxInformationTotals = TaxInformationTotals

    def add_TaxInformationTotals(self, value):
        self.TaxInformationTotals.append(value)

    def insert_TaxInformationTotals_at(self, index, value):
        self.TaxInformationTotals.insert(index, value)

    def replace_TaxInformationTotals_at(self, index, value):
        self.TaxInformationTotals[index] = value

    def get_ShippingCostsAmountTotal(self):
        return self.ShippingCostsAmountTotal

    def set_ShippingCostsAmountTotal(self, ShippingCostsAmountTotal):
        self.ShippingCostsAmountTotal = ShippingCostsAmountTotal

    def get_NetTotal(self):
        return self.NetTotal

    def set_NetTotal(self, NetTotal):
        self.NetTotal = NetTotal

    def get_GrossTotal(self):
        return self.GrossTotal

    def set_GrossTotal(self, GrossTotal):
        self.GrossTotal = GrossTotal

    def validate_SAFmonetaryType(self, value):
        result = True
        # Validate type SAFmonetaryType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SAFmonetaryType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.TaxInformationTotals
            or self.ShippingCostsAmountTotal is not None
            or self.NetTotal is not None
            or self.GrossTotal is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DocumentTotalsType10",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("DocumentTotalsType10")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "DocumentTotalsType10":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="DocumentTotalsType10",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="DocumentTotalsType10",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="DocumentTotalsType10",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="DocumentTotalsType10",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        for TaxInformationTotals_ in self.TaxInformationTotals:
            namespaceprefix_ = (
                self.TaxInformationTotals_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxInformationTotals_nsprefix_)
                else ""
            )
            TaxInformationTotals_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxInformationTotals",
                pretty_print=pretty_print,
            )
        if self.ShippingCostsAmountTotal is not None:
            namespaceprefix_ = (
                self.ShippingCostsAmountTotal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ShippingCostsAmountTotal_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sShippingCostsAmountTotal>%s</%sShippingCostsAmountTotal>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.ShippingCostsAmountTotal,
                        input_name="ShippingCostsAmountTotal",
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.NetTotal is not None:
            namespaceprefix_ = (
                self.NetTotal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.NetTotal_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sNetTotal>%s</%sNetTotal>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.NetTotal, input_name="NetTotal"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.GrossTotal is not None:
            namespaceprefix_ = (
                self.GrossTotal_nsprefix_ + ":"
                if (UseCapturedNS_ and self.GrossTotal_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sGrossTotal>%s</%sGrossTotal>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(self.GrossTotal, input_name="GrossTotal"),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "TaxInformationTotals":
            obj_ = TaxInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxInformationTotals.append(obj_)
            obj_.original_tagname_ = "TaxInformationTotals"
        elif nodeName_ == "ShippingCostsAmountTotal" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "ShippingCostsAmountTotal")
            fval_ = self.gds_validate_decimal(fval_, node, "ShippingCostsAmountTotal")
            self.ShippingCostsAmountTotal = fval_
            self.ShippingCostsAmountTotal_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.ShippingCostsAmountTotal)
        elif nodeName_ == "NetTotal" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "NetTotal")
            fval_ = self.gds_validate_decimal(fval_, node, "NetTotal")
            self.NetTotal = fval_
            self.NetTotal_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.NetTotal)
        elif nodeName_ == "GrossTotal" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "GrossTotal")
            fval_ = self.gds_validate_decimal(fval_, node, "GrossTotal")
            self.GrossTotal = fval_
            self.GrossTotal_nsprefix_ = child_.prefix
            # validate type SAFmonetaryType
            self.validate_SAFmonetaryType(self.GrossTotal)


# end class DocumentTotalsType10


class PaymentTermsType(GeneratedsSuper):
    """Payment terms of the party."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None

    def __init__(
        self,
        Days=None,
        Months=None,
        CashDiscountDays=None,
        CashDiscountRate=None,
        FreeBillingMonth=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        self.Days = Days
        self.Days_nsprefix_ = None
        self.Months = Months
        self.Months_nsprefix_ = None
        self.CashDiscountDays = CashDiscountDays
        self.CashDiscountDays_nsprefix_ = None
        self.CashDiscountRate = CashDiscountRate
        self.validate_CashDiscountRateType(self.CashDiscountRate)
        self.CashDiscountRate_nsprefix_ = None
        self.FreeBillingMonth = FreeBillingMonth
        self.FreeBillingMonth_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(CurrentSubclassModule_, PaymentTermsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentTermsType.subclass:
            return PaymentTermsType.subclass(*args_, **kwargs_)
        else:
            return PaymentTermsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_Days(self):
        return self.Days

    def set_Days(self, Days):
        self.Days = Days

    def get_Months(self):
        return self.Months

    def set_Months(self, Months):
        self.Months = Months

    def get_CashDiscountDays(self):
        return self.CashDiscountDays

    def set_CashDiscountDays(self, CashDiscountDays):
        self.CashDiscountDays = CashDiscountDays

    def get_CashDiscountRate(self):
        return self.CashDiscountRate

    def set_CashDiscountRate(self, CashDiscountRate):
        self.CashDiscountRate = CashDiscountRate

    def get_FreeBillingMonth(self):
        return self.FreeBillingMonth

    def set_FreeBillingMonth(self, FreeBillingMonth):
        self.FreeBillingMonth = FreeBillingMonth

    def validate_CashDiscountRateType(self, value):
        result = True
        # Validate type CashDiscountRateType, a restriction on xs:decimal.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if value < 0.00:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on CashDiscountRateType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
            if value > 100.00:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on CashDiscountRateType'
                    % {"value": value, "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.Days is not None
            or self.Months is not None
            or self.CashDiscountDays is not None
            or self.CashDiscountRate is not None
            or self.FreeBillingMonth is not None
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PaymentTermsType",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("PaymentTermsType")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "PaymentTermsType":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="PaymentTermsType",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="PaymentTermsType",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="PaymentTermsType",
    ):
        pass

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_=' xmlns:None="urn:StandardAuditFile-Taxation-Financial:NO" ',
        name_="PaymentTermsType",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.Days is not None:
            namespaceprefix_ = (
                self.Days_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Days_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sDays>%s</%sDays>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.Days, input_name="Days"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Months is not None:
            namespaceprefix_ = (
                self.Months_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Months_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMonths>%s</%sMonths>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(self.Months, input_name="Months"),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CashDiscountDays is not None:
            namespaceprefix_ = (
                self.CashDiscountDays_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CashDiscountDays_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCashDiscountDays>%s</%sCashDiscountDays>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_integer(
                        self.CashDiscountDays, input_name="CashDiscountDays"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.CashDiscountRate is not None:
            namespaceprefix_ = (
                self.CashDiscountRate_nsprefix_ + ":"
                if (UseCapturedNS_ and self.CashDiscountRate_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sCashDiscountRate>%s</%sCashDiscountRate>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_decimal(
                        self.CashDiscountRate, input_name="CashDiscountRate"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.FreeBillingMonth is not None:
            namespaceprefix_ = (
                self.FreeBillingMonth_nsprefix_ + ":"
                if (UseCapturedNS_ and self.FreeBillingMonth_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sFreeBillingMonth>%s</%sFreeBillingMonth>%s"
                % (
                    namespaceprefix_,
                    self.gds_format_boolean(
                        self.FreeBillingMonth, input_name="FreeBillingMonth"
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "Days" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "Days")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "Days")
            self.Days = ival_
            self.Days_nsprefix_ = child_.prefix
        elif nodeName_ == "Months" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "Months")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "Months")
            self.Months = ival_
            self.Months_nsprefix_ = child_.prefix
        elif nodeName_ == "CashDiscountDays" and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, "CashDiscountDays")
            if ival_ < 0:
                raise_parse_error(child_, "requires nonNegativeInteger")
            ival_ = self.gds_validate_integer(ival_, node, "CashDiscountDays")
            self.CashDiscountDays = ival_
            self.CashDiscountDays_nsprefix_ = child_.prefix
        elif nodeName_ == "CashDiscountRate" and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, "CashDiscountRate")
            fval_ = self.gds_validate_decimal(fval_, node, "CashDiscountRate")
            self.CashDiscountRate = fval_
            self.CashDiscountRate_nsprefix_ = child_.prefix
            # validate type CashDiscountRateType
            self.validate_CashDiscountRateType(self.CashDiscountRate)
        elif nodeName_ == "FreeBillingMonth":
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, "FreeBillingMonth")
            ival_ = self.gds_validate_boolean(ival_, node, "FreeBillingMonth")
            self.FreeBillingMonth = ival_
            self.FreeBillingMonth_nsprefix_ = child_.prefix


# end class PaymentTermsType


class ContactHeaderStructure(ContactInformationStructure):
    """ContactInformationStructure with madatory TelephoneNumber."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ContactInformationStructure

    def __init__(
        self,
        ContactPerson=None,
        Telephone=None,
        Fax=None,
        Email=None,
        Website=None,
        MobilePhone=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("ContactHeaderStructure"), self).__init__(
            ContactPerson, Telephone, Fax, Email, Website, MobilePhone, **kwargs_
        )
        self.ContactPerson = ContactPerson
        self.ContactPerson_nsprefix_ = None
        self.Telephone = Telephone
        self.validate_SAFshorttextType(self.Telephone)
        self.Telephone_nsprefix_ = None
        self.Fax = Fax
        self.validate_SAFshorttextType(self.Fax)
        self.Fax_nsprefix_ = None
        self.Email = Email
        self.validate_SAFmiddle2textType(self.Email)
        self.Email_nsprefix_ = None
        self.Website = Website
        self.Website_nsprefix_ = None
        self.MobilePhone = MobilePhone
        self.validate_SAFshorttextType(self.MobilePhone)
        self.MobilePhone_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactHeaderStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactHeaderStructure.subclass:
            return ContactHeaderStructure.subclass(*args_, **kwargs_)
        else:
            return ContactHeaderStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_ContactPerson(self):
        return self.ContactPerson

    def set_ContactPerson(self, ContactPerson):
        self.ContactPerson = ContactPerson

    def get_Telephone(self):
        return self.Telephone

    def set_Telephone(self, Telephone):
        self.Telephone = Telephone

    def get_Fax(self):
        return self.Fax

    def set_Fax(self, Fax):
        self.Fax = Fax

    def get_Email(self):
        return self.Email

    def set_Email(self, Email):
        self.Email = Email

    def get_Website(self):
        return self.Website

    def set_Website(self, Website):
        self.Website = Website

    def get_MobilePhone(self):
        return self.MobilePhone

    def set_MobilePhone(self, MobilePhone):
        self.MobilePhone = MobilePhone

    def validate_SAFshorttextType(self, value):
        result = True
        # Validate type SAFshorttextType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFshorttextType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.ContactPerson is not None
            or self.Telephone is not None
            or self.Fax is not None
            or self.Email is not None
            or self.Website is not None
            or self.MobilePhone is not None
            or super(ContactHeaderStructure, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_="",
        name_="ContactHeaderStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("ContactHeaderStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "ContactHeaderStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="ContactHeaderStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="ContactHeaderStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="ContactHeaderStructure",
    ):
        super(ContactHeaderStructure, self).exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="ContactHeaderStructure",
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_="",
        name_="ContactHeaderStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.ContactPerson is not None:
            namespaceprefix_ = (
                self.ContactPerson_nsprefix_ + ":"
                if (UseCapturedNS_ and self.ContactPerson_nsprefix_)
                else ""
            )
            self.ContactPerson.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="ContactPerson",
                pretty_print=pretty_print,
            )
        if self.Telephone is not None:
            namespaceprefix_ = (
                self.Telephone_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Telephone_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sTelephone>%s</%sTelephone>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Telephone), input_name="Telephone"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Fax is not None:
            namespaceprefix_ = (
                self.Fax_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Fax_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sFax>%s</%sFax>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Fax), input_name="Fax")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Email is not None:
            namespaceprefix_ = (
                self.Email_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Email_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sEmail>%s</%sEmail>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Email), input_name="Email"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Website is not None:
            namespaceprefix_ = (
                self.Website_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Website_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sWebsite>%s</%sWebsite>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.Website), input_name="Website"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.MobilePhone is not None:
            namespaceprefix_ = (
                self.MobilePhone_nsprefix_ + ":"
                if (UseCapturedNS_ and self.MobilePhone_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sMobilePhone>%s</%sMobilePhone>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.MobilePhone), input_name="MobilePhone"
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(ContactHeaderStructure, self).buildAttributes(
            node, attrs, already_processed
        )

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "ContactPerson":
            obj_ = PersonNameStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContactPerson = obj_
            obj_.original_tagname_ = "ContactPerson"
        elif nodeName_ == "Telephone":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Telephone")
            value_ = self.gds_validate_string(value_, node, "Telephone")
            self.Telephone = value_
            self.Telephone_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Telephone)
        elif nodeName_ == "Fax":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Fax")
            value_ = self.gds_validate_string(value_, node, "Fax")
            self.Fax = value_
            self.Fax_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.Fax)
        elif nodeName_ == "Email":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Email")
            value_ = self.gds_validate_string(value_, node, "Email")
            self.Email = value_
            self.Email_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.Email)
        elif nodeName_ == "Website":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Website")
            value_ = self.gds_validate_string(value_, node, "Website")
            self.Website = value_
            self.Website_nsprefix_ = child_.prefix
        elif nodeName_ == "MobilePhone":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "MobilePhone")
            value_ = self.gds_validate_string(value_, node, "MobilePhone")
            self.MobilePhone = value_
            self.MobilePhone_nsprefix_ = child_.prefix
            # validate type SAFshorttextType
            self.validate_SAFshorttextType(self.MobilePhone)


# end class ContactHeaderStructure


class CompanyHeaderStructure(CompanyStructure):
    """CompanyStructure with mandatory RegistrationNumber and Telephone
    (Contact)."""

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyStructure

    def __init__(
        self,
        RegistrationNumber=None,
        Name=None,
        Address=None,
        Contact=None,
        TaxRegistration=None,
        BankAccount=None,
        gds_collector_=None,
        **kwargs_
    ):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get("parent_object_")
        self.ns_prefix_ = None
        super(globals().get("CompanyHeaderStructure"), self).__init__(
            RegistrationNumber,
            Name,
            Address,
            Contact,
            TaxRegistration,
            BankAccount,
            **kwargs_
        )
        self.RegistrationNumber = RegistrationNumber
        self.validate_SAFmiddle1textType(self.RegistrationNumber)
        self.RegistrationNumber_nsprefix_ = None
        self.Name = Name
        self.validate_SAFmiddle2textType(self.Name)
        self.Name_nsprefix_ = None
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Address_nsprefix_ = None
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        self.Contact_nsprefix_ = None
        if TaxRegistration is None:
            self.TaxRegistration = []
        else:
            self.TaxRegistration = TaxRegistration
        self.TaxRegistration_nsprefix_ = None
        if BankAccount is None:
            self.BankAccount = []
        else:
            self.BankAccount = BankAccount
        self.BankAccount_nsprefix_ = None

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompanyHeaderStructure
            )
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompanyHeaderStructure.subclass:
            return CompanyHeaderStructure.subclass(*args_, **kwargs_)
        else:
            return CompanyHeaderStructure(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_ns_prefix_(self):
        return self.ns_prefix_

    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix

    def get_RegistrationNumber(self):
        return self.RegistrationNumber

    def set_RegistrationNumber(self, RegistrationNumber):
        self.RegistrationNumber = RegistrationNumber

    def get_Name(self):
        return self.Name

    def set_Name(self, Name):
        self.Name = Name

    def get_Address(self):
        return self.Address

    def set_Address(self, Address):
        self.Address = Address

    def add_Address(self, value):
        self.Address.append(value)

    def insert_Address_at(self, index, value):
        self.Address.insert(index, value)

    def replace_Address_at(self, index, value):
        self.Address[index] = value

    def get_Contact(self):
        return self.Contact

    def set_Contact(self, Contact):
        self.Contact = Contact

    def add_Contact(self, value):
        self.Contact.append(value)

    def insert_Contact_at(self, index, value):
        self.Contact.insert(index, value)

    def replace_Contact_at(self, index, value):
        self.Contact[index] = value

    def get_TaxRegistration(self):
        return self.TaxRegistration

    def set_TaxRegistration(self, TaxRegistration):
        self.TaxRegistration = TaxRegistration

    def add_TaxRegistration(self, value):
        self.TaxRegistration.append(value)

    def insert_TaxRegistration_at(self, index, value):
        self.TaxRegistration.insert(index, value)

    def replace_TaxRegistration_at(self, index, value):
        self.TaxRegistration[index] = value

    def get_BankAccount(self):
        return self.BankAccount

    def set_BankAccount(self, BankAccount):
        self.BankAccount = BankAccount

    def add_BankAccount(self, value):
        self.BankAccount.append(value)

    def insert_BankAccount_at(self, index, value):
        self.BankAccount.insert(index, value)

    def replace_BankAccount_at(self, index, value):
        self.BankAccount[index] = value

    def validate_SAFmiddle1textType(self, value):
        result = True
        # Validate type SAFmiddle1textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle1textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def validate_SAFmiddle2textType(self, value):
        result = True
        # Validate type SAFmiddle2textType, a restriction on xs:string.
        if (
            value is not None
            and Validate_simpletypes_
            and self.gds_collector_ is not None
        ):
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s is not of the correct base simple type (str)'
                    % {
                        "value": value,
                        "lineno": lineno,
                    }
                )
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SAFmiddle2textType'
                    % {"value": encode_str_2_3(value), "lineno": lineno}
                )
                result = False
        return result

    def hasContent_(self):
        if (
            self.RegistrationNumber is not None
            or self.Name is not None
            or self.Address
            or self.Contact
            or self.TaxRegistration
            or self.BankAccount
            or super(CompanyHeaderStructure, self).hasContent_()
        ):
            return True
        else:
            return False

    def export(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_="",
        name_="CompanyHeaderStructure",
        pretty_print=True,
    ):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get("CompanyHeaderStructure")
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.original_tagname_ is not None and name_ == "CompanyHeaderStructure":
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ":"
        showIndent(outfile, level, pretty_print)
        outfile.write(
            "<%s%s%s"
            % (
                namespaceprefix_,
                name_,
                namespacedef_ and " " + namespacedef_ or "",
            )
        )
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="CompanyHeaderStructure",
        )
        if self.hasContent_():
            outfile.write(">%s" % (eol_,))
            self.exportChildren(
                outfile,
                level + 1,
                namespaceprefix_,
                namespacedef_,
                name_="CompanyHeaderStructure",
                pretty_print=pretty_print,
            )
            showIndent(outfile, level, pretty_print)
            outfile.write("</%s%s>%s" % (namespaceprefix_, name_, eol_))
        else:
            outfile.write("/>%s" % (eol_,))

    def exportAttributes(
        self,
        outfile,
        level,
        already_processed,
        namespaceprefix_="",
        name_="CompanyHeaderStructure",
    ):
        super(CompanyHeaderStructure, self).exportAttributes(
            outfile,
            level,
            already_processed,
            namespaceprefix_,
            name_="CompanyHeaderStructure",
        )

    def exportChildren(
        self,
        outfile,
        level,
        namespaceprefix_="",
        namespacedef_="",
        name_="CompanyHeaderStructure",
        fromsubclass_=False,
        pretty_print=True,
    ):
        if pretty_print:
            eol_ = "\n"
        else:
            eol_ = ""
        if self.RegistrationNumber is not None:
            namespaceprefix_ = (
                self.RegistrationNumber_nsprefix_ + ":"
                if (UseCapturedNS_ and self.RegistrationNumber_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sRegistrationNumber>%s</%sRegistrationNumber>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(
                            quote_xml(self.RegistrationNumber),
                            input_name="RegistrationNumber",
                        )
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        if self.Name is not None:
            namespaceprefix_ = (
                self.Name_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Name_nsprefix_)
                else ""
            )
            showIndent(outfile, level, pretty_print)
            outfile.write(
                "<%sName>%s</%sName>%s"
                % (
                    namespaceprefix_,
                    self.gds_encode(
                        self.gds_format_string(quote_xml(self.Name), input_name="Name")
                    ),
                    namespaceprefix_,
                    eol_,
                )
            )
        for Address_ in self.Address:
            namespaceprefix_ = (
                self.Address_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Address_nsprefix_)
                else ""
            )
            Address_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Address",
                pretty_print=pretty_print,
            )
        for Contact_ in self.Contact:
            namespaceprefix_ = (
                self.Contact_nsprefix_ + ":"
                if (UseCapturedNS_ and self.Contact_nsprefix_)
                else ""
            )
            Contact_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="Contact",
                pretty_print=pretty_print,
            )
        for TaxRegistration_ in self.TaxRegistration:
            namespaceprefix_ = (
                self.TaxRegistration_nsprefix_ + ":"
                if (UseCapturedNS_ and self.TaxRegistration_nsprefix_)
                else ""
            )
            TaxRegistration_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="TaxRegistration",
                pretty_print=pretty_print,
            )
        for BankAccount_ in self.BankAccount:
            namespaceprefix_ = (
                self.BankAccount_nsprefix_ + ":"
                if (UseCapturedNS_ and self.BankAccount_nsprefix_)
                else ""
            )
            BankAccount_.export(
                outfile,
                level,
                namespaceprefix_,
                namespacedef_="",
                name_="BankAccount",
                pretty_print=pretty_print,
            )

    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        super(CompanyHeaderStructure, self).buildAttributes(
            node, attrs, already_processed
        )

    def buildChildren(
        self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None
    ):
        if nodeName_ == "RegistrationNumber":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "RegistrationNumber")
            value_ = self.gds_validate_string(value_, node, "RegistrationNumber")
            self.RegistrationNumber = value_
            self.RegistrationNumber_nsprefix_ = child_.prefix
            # validate type SAFmiddle1textType
            self.validate_SAFmiddle1textType(self.RegistrationNumber)
        elif nodeName_ == "Name":
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, "Name")
            value_ = self.gds_validate_string(value_, node, "Name")
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
            # validate type SAFmiddle2textType
            self.validate_SAFmiddle2textType(self.Name)
        elif nodeName_ == "Address":
            obj_ = AddressStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address.append(obj_)
            obj_.original_tagname_ = "Address"
        elif nodeName_ == "Contact":
            obj_ = ContactInformationStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = "Contact"
        elif nodeName_ == "TaxRegistration":
            obj_ = TaxIDStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxRegistration.append(obj_)
            obj_.original_tagname_ = "TaxRegistration"
        elif nodeName_ == "BankAccount":
            obj_ = BankAccountStructure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankAccount.append(obj_)
            obj_.original_tagname_ = "BankAccount"


# end class CompanyHeaderStructure


GDSClassesMapping = {}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    """Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    """
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = " ".join(
        ['xmlns:{}="{}"'.format(prefix, uri) for prefix, uri in nsmap.items()]
    )
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "AuditFile"
        rootClass = AuditFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag, namespacedef_=namespacedefs, pretty_print=True
        )
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(
    inFileName, silence=False, print_warnings=True, mapping=None, nsmap=None
):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "AuditFile"
        rootClass = AuditFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if mapping is None:
        mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping, nsmap_=nsmap)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True, xml_declaration=True, encoding="utf-8"
        )
        sys.stdout.write(str(content))
        sys.stdout.write("\n")
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    """Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    """
    parser = None
    rootNode = parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "AuditFile"
        rootClass = AuditFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(sys.stdout, 0, name_=rootTag, namespacedef_="")
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = "AuditFile"
        rootClass = AuditFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write("#from saft_1_10 import *\n\n")
        sys.stdout.write("import saft_1_10 as model_\n\n")
        sys.stdout.write("rootObj = model_.rootClass(\n")
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(")\n")
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ("-" * 50) + "\n"
        sys.stderr.write(separator)
        sys.stderr.write(
            "----- Warnings -- count: {} -----\n".format(
                len(gds_collector.get_messages()),
            )
        )
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == "__main__":
    # import pdb; pdb.set_trace()
    main()

RenameMappings_ = {}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {
    "urn:StandardAuditFile-Taxation-Financial:NO": [
        ("SAFmonetaryType", "norway.xsd", "ST"),
        ("SAFexchangerateType", "norway.xsd", "ST"),
        ("SAFquantityType", "norway.xsd", "ST"),
        ("SAFweightType", "norway.xsd", "ST"),
        ("SAFcodeType", "norway.xsd", "ST"),
        ("SAFshorttextType", "norway.xsd", "ST"),
        ("SAFmiddle1textType", "norway.xsd", "ST"),
        ("SAFmiddle2textType", "norway.xsd", "ST"),
        ("SAFlongtextType", "norway.xsd", "ST"),
        ("ISOCountryCode", "norway.xsd", "ST"),
        ("ISOCurrencyCode", "norway.xsd", "ST"),
        ("InvoiceStructure", "norway.xsd", "CT"),
        ("ShippingPointStructure", "norway.xsd", "CT"),
        ("AddressStructure", "norway.xsd", "CT"),
        ("AmountStructure", "norway.xsd", "CT"),
        ("AnalysisStructure", "norway.xsd", "CT"),
        ("AnalysisPartyInfoStructure", "norway.xsd", "CT"),
        ("BankAccountStructure", "norway.xsd", "CT"),
        ("CompanyHeaderStructure", "norway.xsd", "CT"),
        ("CompanyStructure", "norway.xsd", "CT"),
        ("ContactHeaderStructure", "norway.xsd", "CT"),
        ("ContactInformationStructure", "norway.xsd", "CT"),
        ("HeaderStructure", "norway.xsd", "CT"),
        ("PartyInfoStructure", "norway.xsd", "CT"),
        ("PersonNameStructure", "norway.xsd", "CT"),
        ("SelectionCriteriaStructure", "norway.xsd", "CT"),
        ("TaxIDStructure", "norway.xsd", "CT"),
        ("TaxInformationStructure", "norway.xsd", "CT"),
    ]
}

__all__ = [
    "AccountType",
    "AddressStructure",
    "AmountStructure",
    "AnalysisPartyInfoStructure",
    "AnalysisStructure",
    "AnalysisTypeTableEntryType",
    "AnalysisTypeTableType",
    "AssetTransactionType",
    "AssetTransactionValuationType",
    "AssetTransactionValuationsType",
    "AssetTransactionsType",
    "AssetType",
    "AssetsType",
    "AuditFile",
    "BankAccountStructure",
    "CompanyHeaderStructure",
    "CompanyStructure",
    "ContactHeaderStructure",
    "ContactInformationStructure",
    "CreditNoteType",
    "CustomerInfoType",
    "CustomerType",
    "CustomersType",
    "DeliveryPeriodType",
    "DeliveryType",
    "DocumentReferenceType",
    "DocumentTotalsType",
    "DocumentTotalsType10",
    "ExtraordinaryDepreciationForPeriodType",
    "ExtraordinaryDepreciationsForPeriodType",
    "GeneralLedgerAccountsType",
    "GeneralLedgerEntriesType",
    "HeaderStructure",
    "HeaderType",
    "InvoiceStructure",
    "JournalType",
    "LineType",
    "LineType3",
    "LineType4",
    "LineType7",
    "MasterFilesType",
    "MovementOfGoodsType",
    "MovementTypeTableEntryType",
    "MovementTypeTableType",
    "OrderReferencesType",
    "OwnerType",
    "OwnersType",
    "PartyInfoStructure",
    "PaymentTermsType",
    "PaymentType",
    "PaymentsType",
    "PersonNameStructure",
    "PhysicalStockEntryType",
    "PhysicalStockType",
    "ProductType",
    "ProductsType",
    "PurchaseInvoicesType",
    "ReferencesType",
    "SalesInvoicesType",
    "SelectionCriteriaStructure",
    "SettlementType",
    "SettlementType9",
    "ShippingPointStructure",
    "SourceDocumentsType",
    "StockCharacteristicsType",
    "StockMovementType",
    "SupplierInfoType",
    "SupplierType",
    "SupplierType1",
    "SupplierType5",
    "SuppliersType",
    "TaxCodeDetailsType",
    "TaxIDStructure",
    "TaxInformationStructure",
    "TaxTableEntryType",
    "TaxTableType",
    "TaxType",
    "TaxonomiesType",
    "TaxonomyElementType",
    "TaxonomyType",
    "TransactionType",
    "UOMTableEntryType",
    "UOMTableType",
    "ValuationType",
    "ValuationsType",
]
